{
  "nav": [
    {
      "children": [
        {
          "title": "Quick start",
          "level": 2,
          "route": "blueprint.quick-start"
        },
        {
          "title": "Browser support",
          "level": 2,
          "route": "blueprint.browser-support"
        },
        {
          "children": [
            {
              "title": "Installing Blueprint",
              "level": 3,
              "route": "blueprint/getting-started.installing-blueprint"
            },
            {
              "title": "JS environment",
              "level": 3,
              "route": "blueprint/getting-started.js-environment"
            },
            {
              "title": "Language features",
              "level": 4,
              "route": "blueprint/getting-started.language-features"
            },
            {
              "title": "DOM4",
              "level": 4,
              "route": "blueprint/getting-started.dom4"
            },
            {
              "title": "TypeScript",
              "level": 3,
              "route": "blueprint/getting-started.typescript"
            },
            {
              "title": "Vanilla JS APIs",
              "level": 3,
              "route": "blueprint/getting-started.vanilla-js-apis"
            },
            {
              "title": "CDN consumption",
              "level": 3,
              "route": "blueprint/getting-started.cdn-consumption"
            }
          ],
          "level": 2,
          "reference": "getting-started",
          "route": "blueprint/getting-started",
          "title": "Getting started"
        }
      ],
      "level": 1,
      "reference": "blueprint",
      "route": "blueprint",
      "title": "Blueprint"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "title": "Fixed to viewport top",
                  "level": 5,
                  "route": "react-json-blinkforms/renderers/ArrayDefault.fixed-to-viewport-top"
                },
                {
                  "title": "Fixed width",
                  "level": 5,
                  "route": "react-json-blinkforms/renderers/ArrayDefault.fixed-width"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "react-json-blinkforms/renderers/ArrayDefault.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "react-json-blinkforms/renderers/ArrayDefault.css"
                }
              ],
              "level": 3,
              "reference": "ArrayDefault",
              "route": "react-json-blinkforms/renderers/ArrayDefault",
              "title": "ArrayDefault"
            }
          ],
          "level": 2,
          "reference": "renderers",
          "route": "react-json-blinkforms/renderers",
          "title": "Components"
        }
      ],
      "level": 1,
      "reference": "react-json-blinkforms",
      "route": "react-json-blinkforms",
      "title": "React"
    }
  ],
  "pages": {
    "_nav": {
      "reference": "_nav",
      "route": "_nav",
      "sourcePath": "_nav.md",
      "title": "(untitled)",
      "contents": [
        "<!--\nThis file enumerates the exact order of root pages in the left sidebar.\n-->\n",
        {
          "tag": "page",
          "value": "blueprint"
        },
        {
          "tag": "page",
          "value": "react-json-blinkforms"
        }
      ],
      "contentsRaw": "<!--\nThis file enumerates the exact order of root pages in the left sidebar.\n-->\n\n@page blueprint\n@page react-json-blinkforms",
      "metadata": {}
    },
    "blueprint": {
      "reference": "blueprint",
      "route": "blueprint",
      "sourcePath": "blueprint.md",
      "title": "Blueprint",
      "contents": [
        {
          "tag": "heading",
          "value": "Blueprint",
          "level": 1,
          "route": "blueprint"
        },
        "<h4 id=\"blueprint-is-a-react-based-ui-toolkit-for-the-web-\">Blueprint is a React-based UI toolkit for the web.</h4>\n<p>It is optimized for building complex data-dense interfaces for desktop applications.</p>\n",
        {
          "tag": "reactDocs",
          "value": "Welcome"
        },
        "<div class=\"bp3-callout bp3-intent-success bp3-icon-endorsed\">\n    <h4 class=\"bp3-heading\">Blueprint v3 is available now! <a href=\"#blueprint/whats-new-3.0\">See what&#39;s new.</a></h4>\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Quick start",
          "level": 2,
          "route": "blueprint.quick-start"
        },
        "<h3 id=\"install\">Install</h3>\n<p><strong>@blueprintjs/core</strong> is the primary Blueprint package on NPM and home to over 40 components.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>yarn&nbsp;add&nbsp;@blueprintjs/core&nbsp;react&nbsp;react-dom</span></span></div></pre><p>Additional components live in the <strong>@blueprintjs/icons</strong>, <strong>@blueprintjs/datetime</strong>, <strong>@blueprintjs/select</strong>, <strong>@blueprintjs/table</strong>, and <strong>@blueprintjs/timezone</strong> packages, separated by use case and significant dependencies. All have peer dependencies on <strong>react</strong> and <strong>react-dom</strong>, so these two packages must be installed alongside Blueprint.</p>\n<h3 id=\"import\">Import</h3>\n<p>Import React components from the appropriate package.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>success</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button&nbsp;content</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>incrementCounter</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>Don&#39;t forget to include the <strong>main CSS file</strong> from each Blueprint package!</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;in&nbsp;index.html,&nbsp;or&nbsp;however&nbsp;you&nbsp;manage&nbsp;your&nbsp;CSS&nbsp;files&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/normalize.css/normalize.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;blueprint-icons.css&nbsp;file&nbsp;must&nbsp;be&nbsp;included&nbsp;alongside&nbsp;blueprint.css!&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;add&nbsp;other&nbsp;blueprint-*.css&nbsp;files&nbsp;here&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Browser support",
          "level": 2,
          "route": "blueprint.browser-support"
        },
        "<p><strong>Blueprint supports Chrome, Firefox, Safari, IE 11, and Microsoft Edge.</strong></p>\n<p>You may experience degraded visuals in IE.\nIE 10 and below are unsupported due to their lack of support for CSS Flexbox Layout.\nThese browsers were deprecated by Microsoft (end of support) in <a href=\"https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support\">January 2016</a>.</p>\n",
        {
          "tag": "page",
          "value": "getting-started"
        }
      ],
      "contentsRaw": "@# Blueprint\n\n#### Blueprint is a React-based UI toolkit for the web.\n\nIt is optimized for building complex data-dense interfaces for desktop applications.\n\n@reactDocs Welcome\n\n<div class=\"bp3-callout bp3-intent-success bp3-icon-endorsed\">\n    <h4 class=\"bp3-heading\">Blueprint v3 is available now! [See what's new.](#blueprint/whats-new-3.0)</h4>\n</div>\n\n@## Quick start\n\n### Install\n\n**@blueprintjs/core** is the primary Blueprint package on NPM and home to over 40 components.\n\n```sh\nyarn add @blueprintjs/core react react-dom\n```\n\nAdditional components live in the **@blueprintjs/icons**, **@blueprintjs/datetime**, **@blueprintjs/select**, **@blueprintjs/table**, and **@blueprintjs/timezone** packages, separated by use case and significant dependencies. All have peer dependencies on **react** and **react-dom**, so these two packages must be installed alongside Blueprint.\n\n### Import\n\nImport React components from the appropriate package.\n\n```tsx\nimport { Button } from \"@blueprintjs/core\";\n\n<Button intent=\"success\" text=\"button content\" onClick={incrementCounter} />\n```\n\nDon't forget to include the **main CSS file** from each Blueprint package!\n\n```html\n<!-- in index.html, or however you manage your CSS files -->\n<link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n<!-- blueprint-icons.css file must be included alongside blueprint.css! -->\n<link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n<link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n<!-- add other blueprint-*.css files here -->\n```\n\n@## Browser support\n\n**Blueprint supports Chrome, Firefox, Safari, IE 11, and Microsoft Edge.**\n\nYou may experience degraded visuals in IE.\nIE 10 and below are unsupported due to their lack of support for CSS Flexbox Layout.\nThese browsers were deprecated by Microsoft (end of support) in [January 2016](https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support).\n\n@page getting-started",
      "metadata": {}
    },
    "getting-started": {
      "reference": "getting-started",
      "route": "blueprint/getting-started",
      "sourcePath": "getting-started.md",
      "title": "Getting started",
      "contents": [
        {
          "tag": "heading",
          "value": "Getting started",
          "level": 1,
          "route": "blueprint/getting-started"
        },
        {
          "tag": "heading",
          "value": "Installing Blueprint",
          "level": 2,
          "route": "blueprint/getting-started.installing-blueprint"
        },
        "<p>Blueprint is available as a collection of NPM packages under the <code>@blueprintjs</code>\nscope. Each package appears at the top level of the sidebar to the left, along\nwith its current version.</p>\n<p>Each package contains a CSS file and a collection of CommonJS modules exposing React components.\nThe <code>main</code> module exports all symbols from all modules so you don&#39;t have to import individual files\n(though you can if you want to). The JavaScript components are stable and their APIs adhere to\n<a href=\"http://semver.org/\">semantic versioning</a>.</p>\n<ol>\n<li><p>Install the core package and its peer dependencies with an NPM client like\n<code>npm</code> or <code>yarn</code>, pulling in all relevant dependencies:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>yarn&nbsp;add&nbsp;@blueprintjs/core&nbsp;react&nbsp;react-dom</span></span></div></pre></li>\n<li><p>After installation, you&#39;ll be able to import the React components in your application:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Intent</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Spinner</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;using&nbsp;JSX:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>mySpinner</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Spinner</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;use&nbsp;React.createElement&nbsp;if&nbsp;you&#39;re&nbsp;not&nbsp;using&nbsp;JSX.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>myButton</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>createElement</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>intent</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SUCCESS</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button&nbsp;content</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre></li>\n<li><p><strong>Don&#39;t forget to include the main CSS file from each Blueprint package!</strong> Additionally, the\n<code>resources/</code> directory contains supporting media such as fonts and images.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;using&nbsp;node-style&nbsp;package&nbsp;resolution&nbsp;in&nbsp;a&nbsp;CSS&nbsp;file:</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~normalize.css</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;or&nbsp;using&nbsp;plain&nbsp;old&nbsp;HTML&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;include&nbsp;dependencies&nbsp;manually&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/normalize.css/normalize.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;NOTE:&nbsp;blueprint-icons.css&nbsp;file&nbsp;must&nbsp;be&nbsp;included&nbsp;alongside&nbsp;blueprint.css!&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre></li>\n</ol>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">CDN-only usage</h4>\n    Blueprint can instead be quickly added to a page using the Unpkg CDN.\n    <a href=\"#blueprint/getting-started.cdn-consumption\">See below for instructions</a>.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "JS environment",
          "level": 2,
          "route": "blueprint/getting-started.js-environment"
        },
        {
          "tag": "heading",
          "value": "Language features",
          "level": 3,
          "route": "blueprint/getting-started.language-features"
        },
        "<p>Note that since the minimum supported version of React is <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\">v16</a>,\nall of its <a href=\"https://reactjs.org/docs/javascript-environment-requirements.html\">JavaScript Environment Requirements</a> apply to\nBlueprint as well. Blueprint components require the following ES2015 features:</p>\n<ul>\n<li><code>Map</code></li>\n<li><code>Set</code></li>\n<li><code>Array.fill</code></li>\n<li><code>Array.from</code></li>\n</ul>\n<p>We recommend polyfilling these features using <a href=\"https://github.com/paulmillr/es6-shim\">es6-shim</a> or\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>.</p>\n",
        {
          "tag": "heading",
          "value": "DOM4",
          "level": 3,
          "route": "blueprint/getting-started.dom4"
        },
        "<p>Blueprint relies on a handful of DOM Level 4 API methods: <code>el.closest()</code> and <code>el.contains()</code>.\n<code>@blueprintjs/core</code> depends on a <a href=\"https://webreflection.github.io/dom4/\">polyfill library called <code>dom4</code></a> to ensure\nthese methods are available. This module is conditionally loaded if Blueprint is used in a browser environment.</p>\n",
        {
          "tag": "heading",
          "value": "TypeScript",
          "level": 2,
          "route": "blueprint/getting-started.typescript"
        },
        "<p>Blueprint is written in TypeScript and therefore its own <code>.d.ts</code> type definitions are distributed in\nthe NPM package and should be resolved automatically by the compiler. However, you&#39;ll need to\ninstall typings for Blueprint&#39;s dependencies before you can consume it:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>#&nbsp;required&nbsp;for&nbsp;all&nbsp;@blueprintjs&nbsp;packages:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@types/react&nbsp;@types/react-dom</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>#&nbsp;@blueprintjs/timezone&nbsp;requires:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@types/moment-timezone</span></span></div></pre><p>Blueprint&#39;s declaration files require <strong>TypeScript 2.3+</strong> for default generic parameter arguments: <code>&lt;P = {}&gt;</code>.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see <a href=\"#blueprint/reading-the-docs.understanding-typescript\">Understanding TypeScript</a>.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Vanilla JS APIs",
          "level": 2,
          "route": "blueprint/getting-started.vanilla-js-apis"
        },
        "<p>JS components are built using React, but that does not limit their usage to just React applications.\nYou can render any component in any JavaScript application with <code>ReactDOM.render</code>. Think of it like\nusing a jQuery plugin.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Classes</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Intent</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Spinner</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>myContainerElement</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support variable dom tsx\"><span>document</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>getElementById</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>container</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;with&nbsp;JSX</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>render</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Spinner</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SMALL</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;with&nbsp;vanilla&nbsp;JS,&nbsp;use&nbsp;React.createElement</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>render</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>createElement</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Spinner</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>className</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SMALL</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>intent</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span class=\"meta object member tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><p>To remove the component from the DOM and clean up, unmount it:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>unmountComponentAtNode</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><p>Check out the <a href=\"https://facebook.github.io/react/docs/react-api.html\">React API docs</a> for more details.</p>\n",
        {
          "tag": "heading",
          "value": "CDN consumption",
          "level": 2,
          "route": "blueprint/getting-started.cdn-consumption"
        },
        "<p>Blueprint supports the venerable <a href=\"https://unpkg.com\">unpkg CDN</a>. Each package provides a UMD\n<code>dist/[name].bundle.js</code> file containing the bundled source code. The UMD wrapper exposes each\nlibrary on the <code>Blueprint</code> global variable: <code>Blueprint.Core</code>, <code>Blueprint.Datetime</code>, etc.</p>\n<p>These bundles <em>do not include</em> external dependencies; your application will need to ensure that\n<code>normalize.css</code>, <code>classnames</code>, <code>dom4</code>, <code>react</code>, <code>react-dom</code>, <code>react-transition-group</code>, <code>popper.js</code>, and\n<code>react-popper</code> are available at runtime.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag sgml html\"><span class=\"punctuation definition tag html\"><span>&lt;!</span></span><span class=\"meta tag sgml doctype html\"><span class=\"entity name tag doctype html\"><span>DOCTYPE</span></span><span>&nbsp;html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>meta</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>charset</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>utf-8</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>meta</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>name</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>viewport</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>content</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width=device-width</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blueprint&nbsp;Starter&nbsp;Kit</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;Style&nbsp;dependencies&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/normalize.css@</span></span><span>^7.0.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;Blueprint&nbsp;stylesheets&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/icons@</span></span><span>^3.4.0/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/core@</span></span><span>^3.10.0/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;Blueprint&nbsp;dependencies&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/classnames@</span></span><span>^2.2</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/dom4@</span></span><span>^1.8</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/tslib@</span></span><span>^1.9.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react@</span></span><span>^16.2.0/umd/react.production.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-dom@</span></span><span>^16.2.0/umd/react-dom.production.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-transition-group@</span></span><span>^2.2.1/dist/react-transition-group.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/popper.js@</span></span><span>^1.14.1/dist/umd/popper.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-popper@</span></span><span>^1.0.0/dist/index.umd.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/resize-observer-polyfill@</span></span><span>^1.5.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;Blueprint&nbsp;packages&nbsp;(note:&nbsp;icons&nbsp;script&nbsp;must&nbsp;come&nbsp;first)&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/icons@</span></span><span>^3.4.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/core@</span></span><span>^3.10.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"meta attribute-with-value id html\"><span class=\"entity other attribute-name id html\"><span>id</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>btn</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>button</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>React</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>createElement</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>Blueprint</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>Core</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>Button</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;icon</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>cloud</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>CDN&nbsp;Blueprint&nbsp;is&nbsp;go!</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>ReactDOM</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>render</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>button</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"support variable dom js\"><span>document</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>querySelector</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>#btn</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>"
      ],
      "contentsRaw": "@# Getting started\n\n@## Installing Blueprint\n\nBlueprint is available as a collection of NPM packages under the `@blueprintjs`\nscope. Each package appears at the top level of the sidebar to the left, along\nwith its current version.\n\nEach package contains a CSS file and a collection of CommonJS modules exposing React components.\nThe `main` module exports all symbols from all modules so you don't have to import individual files\n(though you can if you want to). The JavaScript components are stable and their APIs adhere to\n[semantic versioning](http://semver.org/).\n\n1.  Install the core package and its peer dependencies with an NPM client like\n    `npm` or `yarn`, pulling in all relevant dependencies:\n\n    ```sh\n    yarn add @blueprintjs/core react react-dom\n    ```\n\n1.  After installation, you'll be able to import the React components in your application:\n\n    ```tsx\n    import { Button, Intent, Spinner } from \"@blueprintjs/core\";\n\n    // using JSX:\n    const mySpinner = <Spinner intent={Intent.PRIMARY} />;\n\n    // use React.createElement if you're not using JSX.\n    const myButton = React.createElement(Button, { intent: Intent.SUCCESS }, \"button content\");\n    ```\n\n1.  **Don't forget to include the main CSS file from each Blueprint package!** Additionally, the\n    `resources/` directory contains supporting media such as fonts and images.\n\n    ```css.scss\n    // using node-style package resolution in a CSS file:\n    @import \"~normalize.css\";\n    @import \"~@blueprintjs/core/lib/css/blueprint.css\";\n    @import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\n    ```\n\n    ```html\n    <!-- or using plain old HTML -->\n    <head>\n      <!-- include dependencies manually -->\n      <link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n      <link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n      <link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n      <!-- NOTE: blueprint-icons.css file must be included alongside blueprint.css! -->\n    </head>\n    ```\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">CDN-only usage</h4>\n    Blueprint can instead be quickly added to a page using the Unpkg CDN.\n    [See below for instructions](#blueprint/getting-started.cdn-consumption).\n</div>\n\n@## JS environment\n\n@### Language features\n\nNote that since the minimum supported version of React is [v16](https://reactjs.org/blog/2017/09/26/react-v16.0.html),\nall of its [JavaScript Environment Requirements](https://reactjs.org/docs/javascript-environment-requirements.html) apply to\nBlueprint as well. Blueprint components require the following ES2015 features:\n\n-   `Map`\n-   `Set`\n-   `Array.fill`\n-   `Array.from`\n\nWe recommend polyfilling these features using [es6-shim](https://github.com/paulmillr/es6-shim) or\n[core-js](https://github.com/zloirock/core-js).\n\n@### DOM4\n\nBlueprint relies on a handful of DOM Level 4 API methods: `el.closest()` and `el.contains()`.\n`@blueprintjs/core` depends on a [polyfill library called `dom4`](https://webreflection.github.io/dom4/) to ensure\nthese methods are available. This module is conditionally loaded if Blueprint is used in a browser environment.\n\n@## TypeScript\n\nBlueprint is written in TypeScript and therefore its own `.d.ts` type definitions are distributed in\nthe NPM package and should be resolved automatically by the compiler. However, you'll need to\ninstall typings for Blueprint's dependencies before you can consume it:\n\n```sh\n# required for all @blueprintjs packages:\nnpm install --save @types/react @types/react-dom\n\n# @blueprintjs/timezone requires:\nnpm install --save @types/moment-timezone\n```\n\nBlueprint's declaration files require **TypeScript 2.3+** for default generic parameter arguments: `<P = {}>`.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see [Understanding TypeScript](#blueprint/reading-the-docs.understanding-typescript).\n</div>\n\n@## Vanilla JS APIs\n\nJS components are built using React, but that does not limit their usage to just React applications.\nYou can render any component in any JavaScript application with `ReactDOM.render`. Think of it like\nusing a jQuery plugin.\n\n```tsx\nimport { Classes, Intent, Spinner } from \"@blueprintjs/core\";\n\nconst myContainerElement = document.getElementById(\"container\");\n\n// with JSX\nReactDOM.render(<Spinner className={Classes.SMALL} intent={Intent.PRIMARY} />, myContainerElement);\n\n// with vanilla JS, use React.createElement\nReactDOM.render(\n    React.createElement(Spinner, {\n        className: Classes.SMALL,\n        intent: Intent.PRIMARY\n    }),\n    myContainerElement\n);\n```\n\nTo remove the component from the DOM and clean up, unmount it:\n\n```tsx\nReactDOM.unmountComponentAtNode(myContainerElement);\n```\n\nCheck out the [React API docs](https://facebook.github.io/react/docs/react-api.html) for more details.\n\n@## CDN consumption\n\nBlueprint supports the venerable [unpkg CDN](https://unpkg.com). Each package provides a UMD\n`dist/[name].bundle.js` file containing the bundled source code. The UMD wrapper exposes each\nlibrary on the `Blueprint` global variable: `Blueprint.Core`, `Blueprint.Datetime`, etc.\n\nThese bundles _do not include_ external dependencies; your application will need to ensure that\n`normalize.css`, `classnames`, `dom4`, `react`, `react-dom`, `react-transition-group`, `popper.js`, and\n`react-popper` are available at runtime.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>Blueprint Starter Kit</title>\n\n    <!-- Style dependencies -->\n    <link href=\"https://unpkg.com/normalize.css@^7.0.0\" rel=\"stylesheet\" />\n    <!-- Blueprint stylesheets -->\n    <link href=\"https://unpkg.com/@blueprintjs/icons@^3.4.0/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n    <link href=\"https://unpkg.com/@blueprintjs/core@^3.10.0/lib/css/blueprint.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <!-- Blueprint dependencies -->\n    <script src=\"https://unpkg.com/classnames@^2.2\"></script>\n    <script src=\"https://unpkg.com/dom4@^1.8\"></script>\n    <script src=\"https://unpkg.com/tslib@^1.9.0\"></script>\n    <script src=\"https://unpkg.com/react@^16.2.0/umd/react.production.min.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@^16.2.0/umd/react-dom.production.min.js\"></script>\n    <script src=\"https://unpkg.com/react-transition-group@^2.2.1/dist/react-transition-group.min.js\"></script>\n    <script src=\"https://unpkg.com/popper.js@^1.14.1/dist/umd/popper.js\"></script>\n    <script src=\"https://unpkg.com/react-popper@^1.0.0/dist/index.umd.min.js\"></script>\n    <script src=\"https://unpkg.com/resize-observer-polyfill@^1.5.0\"></script>\n    <!-- Blueprint packages (note: icons script must come first) -->\n    <script src=\"https://unpkg.com/@blueprintjs/icons@^3.4.0\"></script>\n    <script src=\"https://unpkg.com/@blueprintjs/core@^3.10.0\"></script>\n\n    <div id=\"btn\"></div>\n    <script>\n      const button = React.createElement(Blueprint.Core.Button, {\n        icon: \"cloud\",\n        text: \"CDN Blueprint is go!\",\n      });\n      ReactDOM.render(button, document.querySelector(\"#btn\"));\n    </script>\n  </body>\n</html>\n```",
      "metadata": {}
    },
    "react-json-blinkforms": {
      "reference": "react-json-blinkforms",
      "route": "react-json-blinkforms",
      "sourcePath": "react-json-blinkforms\\examples\\index.md",
      "title": "React",
      "contents": [
        {
          "tag": "heading",
          "value": "React",
          "level": 1,
          "route": "react-json-blinkforms"
        },
        "<p>Components elo</p>\n",
        {
          "tag": "page",
          "value": "renderers"
        }
      ],
      "contentsRaw": "\n@# React\n\nComponents elo\n\n@page renderers",
      "metadata": {
        "reference": "react-json-blinkforms"
      }
    },
    "README": {
      "reference": "README",
      "route": "README",
      "sourcePath": "typescript-core\\README.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"typescript-core\">typescript-core</h1>\n<p>Typescript client-side core of Blinkforms</p>\n"
      ],
      "contentsRaw": "# typescript-core\nTypescript client-side core of Blinkforms",
      "metadata": {}
    },
    "CHANGELOG": {
      "reference": "CHANGELOG",
      "route": "CHANGELOG",
      "sourcePath": "react-json-blinkforms\\node_modules\\y18n\\CHANGELOG.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"change-log\">Change Log</h1>\n<p>All notable changes to this project will be documented in this file. See <a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> for commit guidelines.</p>\n<p><a name=\"4.0.0\"></a></p>\n<h1 id=\"4-0-0-2017-10-10-\"><a href=\"https://github.com/yargs/y18n/compare/v3.2.1...v4.0.0\">4.0.0</a> (2017-10-10)</h1>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>allow support for falsy values like 0 in tagged literal (<a href=\"https://github.com/yargs/y18n/issues/45\">#45</a>) (<a href=\"https://github.com/yargs/y18n/commit/c926123\">c926123</a>)</li>\n</ul>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li><strong>__:</strong> added tagged template literal support (<a href=\"https://github.com/yargs/y18n/issues/44\">#44</a>) (<a href=\"https://github.com/yargs/y18n/commit/0598daf\">0598daf</a>)</li>\n</ul>\n<h3 id=\"breaking-changes\">BREAKING CHANGES</h3>\n<ul>\n<li><strong>__:</strong> dropping Node 0.10/Node 0.12 support</li>\n</ul>\n"
      ],
      "contentsRaw": "# Change Log\n\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n\n<a name=\"4.0.0\"></a>\n# [4.0.0](https://github.com/yargs/y18n/compare/v3.2.1...v4.0.0) (2017-10-10)\n\n\n### Bug Fixes\n\n* allow support for falsy values like 0 in tagged literal ([#45](https://github.com/yargs/y18n/issues/45)) ([c926123](https://github.com/yargs/y18n/commit/c926123))\n\n\n### Features\n\n* **__:** added tagged template literal support ([#44](https://github.com/yargs/y18n/issues/44)) ([0598daf](https://github.com/yargs/y18n/commit/0598daf))\n\n\n### BREAKING CHANGES\n\n* **__:** dropping Node 0.10/Node 0.12 support",
      "metadata": {}
    },
    "CONTRIBUTING": {
      "reference": "CONTRIBUTING",
      "route": "CONTRIBUTING",
      "sourcePath": "react-json-blinkforms\\node_modules\\webpack-dev-middleware\\node_modules\\mime\\CONTRIBUTING.md",
      "title": "(untitled)",
      "contents": [
        "<ol>\n<li>Commit messages should have a <a href=\"https://conventionalcommits.org/\">Conventional Commit</a> prefix.</li>\n<li>If you&#39;re editing the <code>types/*</code> files, just stop.  These are auto-generated from <a href=\"https://github.com/jshttp/mime-db\">mime-db</a>.  Go talk to those folks.</li>\n<li>README edits should be made to <a href=\"src/README_md.js\">src/README_md.js</a>.</li>\n</ol>\n<p>Thanks for helping out with this project.  You rock!</p>\n"
      ],
      "contentsRaw": "1. Commit messages should have a [Conventional Commit](https://conventionalcommits.org/) prefix.\n2. If you're editing the `types/*` files, just stop.  These are auto-generated from [mime-db](https://github.com/jshttp/mime-db).  Go talk to those folks.\n3. README edits should be made to [src/README_md.js](src/README_md.js).\n\nThanks for helping out with this project.  You rock!",
      "metadata": {}
    },
    "readme": {
      "reference": "readme",
      "route": "readme",
      "sourcePath": "react-json-blinkforms\\node_modules\\widest-line\\readme.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"widest-line-build-status\">widest-line <a href=\"https://travis-ci.org/sindresorhus/widest-line\"><img src=\"https://travis-ci.org/sindresorhus/widest-line.svg?branch=master\" alt=\"Build Status\"></a></h1>\n<blockquote>\n<p>Get the visual width of the widest line in a string - the number of columns required to display it</p>\n</blockquote>\n<p>Some Unicode characters are <a href=\"https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms\">fullwidth</a> and use double the normal width. <a href=\"http://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI escape codes</a> are stripped and doesn&#39;t affect the width.</p>\n<p>Useful to be able to know the maximum width a string will take up in the terminal.</p>\n<h2 id=\"install\">Install</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>npm</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>install</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>widest</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>line</span></span></span></div></pre><h2 id=\"usage\">Usage</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>widestLine</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>widest-line</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>widestLine</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>古</span><span class=\"constant character escape js\"><span>\\n</span><span>\\u001B</span></span><span>[1m@</span><span class=\"constant character escape js\"><span>\\u001B</span></span><span>[22m</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>=&gt;&nbsp;2</span></span></span></div></pre><h2 id=\"related\">Related</h2>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/string-width\">string-width</a> - Get the visual width of a string</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT © <a href=\"https://sindresorhus.com\">Sindre Sorhus</a></p>\n"
      ],
      "contentsRaw": "# widest-line [![Build Status](https://travis-ci.org/sindresorhus/widest-line.svg?branch=master)](https://travis-ci.org/sindresorhus/widest-line)\n\n> Get the visual width of the widest line in a string - the number of columns required to display it\n\nSome Unicode characters are [fullwidth](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms) and use double the normal width. [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code) are stripped and doesn't affect the width.\n\nUseful to be able to know the maximum width a string will take up in the terminal.\n\n\n## Install\n\n```\n$ npm install widest-line\n```\n\n\n## Usage\n\n```js\nconst widestLine = require('widest-line');\n\nwidestLine('古\\n\\u001B[1m@\\u001B[22m');\n//=> 2\n```\n\n\n## Related\n\n- [string-width](https://github.com/sindresorhus/string-width) - Get the visual width of a string\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)",
      "metadata": {}
    },
    "DocumentFormattingSample": {
      "reference": "DocumentFormattingSample",
      "route": "DocumentFormattingSample",
      "sourcePath": "react-json-blinkforms\\node_modules\\@storybook\\components\\src\\typography\\DocumentFormattingSample.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"h1-heading\">h1 Heading</h1>\n<h2 id=\"h2-heading\">h2 Heading</h2>\n<h3 id=\"h3-heading\">h3 Heading</h3>\n<h4 id=\"h4-heading\">h4 Heading</h4>\n<h5 id=\"h5-heading\">h5 Heading</h5>\n<h6 id=\"h6-heading\">h6 Heading</h6>\n<h2 id=\"typographic-replacements\">Typographic replacements</h2>\n<p>Enable typographer option to see result.</p>\n<p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>\n<p>test.. test... test..... test?..... test!....</p>\n<p>!!!!!! ???? ,, -- ---</p>\n<p>&quot;Smartypants, double quotes&quot; and &#39;single quotes&#39;</p>\n<h2 id=\"emphasis\">Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><em>This is italic text</em></p>\n<p><del>Strikethrough</del></p>\n<h2 id=\"blockquotes\">Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested...</p>\n<blockquote>\n<p>...by using additional greater-than signs right next to each other...</p>\n<blockquote>\n<p>...or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"lists\">Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:<ul>\n<li>Marker character change forces new list start:<ul>\n<li>Ac tristique libero volutpat at</li>\n<li>Facilisis in pretium nisl aliquet</li>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>Lorem ipsum dolor sit amet</li>\n<li>Consectetur adipiscing elit</li>\n<li>Integer molestie lorem at massa</li>\n</ol>\n<p>1) You can use sequential numbers...\n1) ...or keep all the numbers as <code>1.</code></p>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2 id=\"code\">Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Some&nbsp;comments</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>line</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>1</span></span><span>&nbsp;</span><span class=\"keyword operator expression of tsx\"><span>of</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>code</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>line</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span>&nbsp;</span><span class=\"keyword operator expression of tsx\"><span>of</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>code</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>line</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>3</span></span><span>&nbsp;</span><span class=\"keyword operator expression of tsx\"><span>of</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>code</span></span></span></div></pre><p>Block code &quot;fences&quot;</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Sample</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>text</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>here</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span></span></div></pre><p>Syntax highlighting</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"entity name function js\"><span>foo</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>bar</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;bar</span><span class=\"keyword operator increment js\"><span>++</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>foo</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>5</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"tables\">Tables</h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>Right aligned columns</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Option</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"links\">Links</h2>\n<p><a href=\"http://dev.nodeca.com\">link text</a></p>\n<p><a href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title</a></p>\n<!--lint disable no-literal-urls-->\n<p>Autoconverted link <a href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica</a> (enable linkify to see)\n<!--lint enable no-literal-urls--></p>\n<h2 id=\"images\">Images</h2>\n<p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"></p>\n"
      ],
      "contentsRaw": "# h1 Heading\n\n## h2 Heading\n\n### h3 Heading\n\n#### h4 Heading\n\n##### h5 Heading\n\n###### h6 Heading\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,, -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n## Emphasis\n\n**This is bold text**\n\n**This is bold text**\n\n_This is italic text_\n\n_This is italic text_\n\n~~Strikethrough~~\n\n## Blockquotes\n\n> Blockquotes can also be nested...\n>\n> > ...by using additional greater-than signs right next to each other...\n> >\n> > > ...or with spaces between arrows.\n\n## Lists\n\nUnordered\n\n- Create a list by starting a line with `+`, `-`, or `*`\n- Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    - Ac tristique libero volutpat at\n    * Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n- Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n1) You can use sequential numbers...\n1) ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n```js\nvar foo = function(bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ 'title text!')\n\n<!--lint disable no-literal-urls-->\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n<!--lint enable no-literal-urls-->\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg 'The Stormtroopocat')",
      "metadata": {}
    },
    "LICENSE": {
      "reference": "LICENSE",
      "route": "LICENSE",
      "sourcePath": "react-json-blinkforms\\node_modules\\worker-farm\\LICENSE.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"the-mit-license-mit-\">The MIT License (MIT)</h1>\n<h2 id=\"copyright-c-2014-levelup-contributors\">Copyright (c) 2014 LevelUP contributors</h2>\n<p><em>LevelUP contributors listed at <a href=\"https://github.com/rvagg/node-levelup#contributors\">https://github.com/rvagg/node-levelup#contributors</a></em></p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n"
      ],
      "contentsRaw": "The MIT License (MIT)\n=====================\n\nCopyright (c) 2014 LevelUP contributors\n---------------------------------------\n\n*LevelUP contributors listed at <https://github.com/rvagg/node-levelup#contributors>*\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
      "metadata": {}
    },
    "HISTORY": {
      "reference": "HISTORY",
      "route": "HISTORY",
      "sourcePath": "react-json-blinkforms\\node_modules\\vary\\HISTORY.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"1-1-2-2017-09-23\">1.1.2 / 2017-09-23</h1>\n<ul>\n<li>perf: improve header token parsing speed</li>\n</ul>\n<h1 id=\"1-1-1-2017-03-20\">1.1.1 / 2017-03-20</h1>\n<ul>\n<li>perf: hoist regular expression</li>\n</ul>\n<h1 id=\"1-1-0-2015-09-29\">1.1.0 / 2015-09-29</h1>\n<ul>\n<li>Only accept valid field names in the <code>field</code> argument<ul>\n<li>Ensures the resulting string is a valid HTTP header value</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-0-1-2015-07-08\">1.0.1 / 2015-07-08</h1>\n<ul>\n<li>Fix setting empty header from empty <code>field</code></li>\n<li>perf: enable strict mode</li>\n<li>perf: remove argument reassignments</li>\n</ul>\n<h1 id=\"1-0-0-2014-08-10\">1.0.0 / 2014-08-10</h1>\n<ul>\n<li>Accept valid <code>Vary</code> header string as <code>field</code></li>\n<li>Add <code>vary.append</code> for low-level string manipulation</li>\n<li>Move to <code>jshttp</code> orgainzation</li>\n</ul>\n<h1 id=\"0-1-0-2014-06-05\">0.1.0 / 2014-06-05</h1>\n<ul>\n<li>Support array of fields to set</li>\n</ul>\n<h1 id=\"0-0-0-2014-06-04\">0.0.0 / 2014-06-04</h1>\n<ul>\n<li>Initial release</li>\n</ul>\n"
      ],
      "contentsRaw": "1.1.2 / 2017-09-23\n==================\n\n  * perf: improve header token parsing speed\n\n1.1.1 / 2017-03-20\n==================\n\n  * perf: hoist regular expression\n\n1.1.0 / 2015-09-29\n==================\n\n  * Only accept valid field names in the `field` argument\n    - Ensures the resulting string is a valid HTTP header value\n\n1.0.1 / 2015-07-08\n==================\n\n  * Fix setting empty header from empty `field`\n  * perf: enable strict mode\n  * perf: remove argument reassignments\n\n1.0.0 / 2014-08-10\n==================\n\n  * Accept valid `Vary` header string as `field`\n  * Add `vary.append` for low-level string manipulation\n  * Move to `jshttp` orgainzation\n\n0.1.0 / 2014-06-05\n==================\n\n  * Support array of fields to set\n\n0.0.0 / 2014-06-04\n==================\n\n  * Initial release",
      "metadata": {}
    },
    "History": {
      "reference": "History",
      "route": "History",
      "sourcePath": "react-json-blinkforms\\node_modules\\util-deprecate\\History.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"1-0-2-2015-10-07\">1.0.2 / 2015-10-07</h1>\n<ul>\n<li>use try/catch when checking <code>localStorage</code> (#3, @kumavis)</li>\n</ul>\n<h1 id=\"1-0-1-2014-11-25\">1.0.1 / 2014-11-25</h1>\n<ul>\n<li>browser: use <code>console.warn()</code> for deprecation calls</li>\n<li>browser: more jsdocs</li>\n</ul>\n<h1 id=\"1-0-0-2014-04-30\">1.0.0 / 2014-04-30</h1>\n<ul>\n<li>initial commit</li>\n</ul>\n"
      ],
      "contentsRaw": "1.0.2 / 2015-10-07\n==================\n\n  * use try/catch when checking `localStorage` (#3, @kumavis)\n\n1.0.1 / 2014-11-25\n==================\n\n  * browser: use `console.warn()` for deprecation calls\n  * browser: more jsdocs\n\n1.0.0 / 2014-04-30\n==================\n\n  * initial commit",
      "metadata": {}
    },
    "CHANGES": {
      "reference": "CHANGES",
      "route": "CHANGES",
      "sourcePath": "react-json-blinkforms\\node_modules\\q\\CHANGES.md",
      "title": "(untitled)",
      "contents": [
        "<h2 id=\"1-5-1\">1.5.1</h2>\n<ul>\n<li>Q.any now annotates its error message to clarify that Q.any was involved and\nincludes only the last error emitted. (Ivan Etchart)</li>\n<li>Avoid domain.dispose during tests in preparation for Node.js 9. (Anna\nHenningsen)</li>\n</ul>\n<h2 id=\"1-5-0\">1.5.0</h2>\n<ul>\n<li>Q.any gives an error message from the last rejected promise</li>\n<li>Throw if callback supplied to &quot;finally&quot; is invalid (@grahamrhay)</li>\n<li>Long stack trace improvements, can now construct long stack traces\nacross rethrows.</li>\n</ul>\n<h2 id=\"1-4-1\">1.4.1</h2>\n<ul>\n<li>Address an issue that prevented Q from being used as a <code>&lt;script&gt;</code> for\nFirefox add-ons. Q can now be used in any environment that provides <code>window</code>\nor <code>self</code> globals, favoring <code>window</code> since add-ons have an an immutable\n<code>self</code> that is distinct from <code>window</code>.</li>\n</ul>\n<h2 id=\"1-4-0\">1.4.0</h2>\n<ul>\n<li>Add <code>noConflict</code> support for use in <code>&lt;script&gt;</code> (@jahnjw).</li>\n</ul>\n<h2 id=\"1-3-0\">1.3.0</h2>\n<ul>\n<li>Add tracking for unhandled and handled rejections in Node.js (@benjamingr).</li>\n</ul>\n<h2 id=\"1-2-1\">1.2.1</h2>\n<ul>\n<li>Fix Node.js environment detection for modern Browserify (@kahnjw).</li>\n</ul>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<ul>\n<li>Added Q.any(promisesArray) method (@vergara).\nReturns a promise fulfilled with the value of the first resolved promise in\npromisesArray. If all promises in promisesArray are rejected, it returns\na rejected promise.</li>\n</ul>\n<h2 id=\"1-1-2\">1.1.2</h2>\n<ul>\n<li>Removed extraneous files from the npm package by using the &quot;files&quot;\nwhitelist in package.json instead of the .npmignore blacklist.\n(@anton-rudeshko)</li>\n</ul>\n<h2 id=\"1-1-1\">1.1.1</h2>\n<ul>\n<li>Fix a pair of regressions in bootstrapping, one which precluded\nWebWorker support, and another that precluded support in\n<code>&lt;script&gt;</code> usage outright. #607</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<ul>\n<li>Adds support for enabling long stack traces in node.js by setting\nenvironment variable <code>Q_DEBUG=1</code>.</li>\n<li>Introduces the <code>tap</code> method to promises, which will see a value\npass through without alteration.</li>\n<li>Use instanceof to recognize own promise instances as opposed to\nthenables.</li>\n<li>Construct timeout errors with <code>code === ETIMEDOUT</code> (Kornel Lesiński)</li>\n<li>More descriminant CommonJS module environment detection.</li>\n<li>Dropped continuous integration for Node.js 0.6 and 0.8 because of\nchanges to npm that preclude the use of new <code>^</code> version predicate\noperator in any transitive dependency.</li>\n<li>Users can now override <code>Q.nextTick</code>.</li>\n</ul>\n<h2 id=\"1-0-1\">1.0.1</h2>\n<ul>\n<li>Adds support for <code>Q.Promise</code>, which implements common usage of the\nES6 <code>Promise</code> constructor and its methods. <code>Promise</code> does not have\na valid promise constructor and a proper implementation awaits\nversion 2 of Q.</li>\n<li>Removes the console stopgap for a promise inspector. This no longer\nworks with any degree of reliability.</li>\n<li>Fixes support for content security policies that forbid eval. Now\nusing the <code>StopIteration</code> global to distinguish SpiderMonkey\ngenerators from ES6 generators, assuming that they will never\ncoexist.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>:cake: This is all but a re-release of version 0.9, which has settled\ninto a gentle maintenance mode and rightly deserves an official 1.0.\nAn ambitious 2.0 release is already around the corner, but 0.9/1.0\nhave been distributed far and wide and demand long term support.</p>\n<ul>\n<li>Q will now attempt to post a debug message in browsers regardless\nof whether window.Touch is defined. Chrome at least now has this\nproperty regardless of whether touch is supported by the underlying\nhardware.</li>\n<li>Remove deprecation warning from <code>promise.valueOf</code>. The function is\ncalled by the browser in various ways so there is no way to\ndistinguish usage that should be migrated from usage that cannot be\naltered.</li>\n</ul>\n<h2 id=\"0-9-7\">0.9.7</h2>\n<ul>\n<li>:warning: <code>q.min.js</code> is no longer checked-in.  It is however still\ncreated by Grunt and NPM.</li>\n<li>Fixes a bug that inhibited <code>Q.async</code> with implementations of the new\nES6 generators.</li>\n<li>Fixes a bug with <code>nextTick</code> affecting Safari 6.0.5 the first time a\npage loads when an <code>iframe</code> is involved.</li>\n<li>Introduces <code>passByCopy</code>, <code>join</code>, and <code>race</code>.</li>\n<li>Shows stack traces or error messages on the console, instead of\n<code>Error</code> objects.</li>\n<li>Elimintates wrapper methods for improved performance.</li>\n<li><code>Q.all</code> now propagates progress notifications of the form you might\nexpect of ES6 iterations, <code>{value, index}</code> where the <code>value</code> is the\nprogress notification from the promise at <code>index</code>.</li>\n</ul>\n<h2 id=\"0-9-6\">0.9.6</h2>\n<ul>\n<li>Fixes a bug in recognizing the difference between compatible Q\npromises, and Q promises from before the implementation of &quot;inspect&quot;.\nThe latter are now coerced.</li>\n<li>Fixes an infinite asynchronous coercion cycle introduced by former\nsolution, in two independently sufficient ways.  1.) All promises\nreturned by makePromise now implement &quot;inspect&quot;, albeit a default\nthat reports that the promise has an &quot;unknown&quot; state.  2.) The\nimplementation of &quot;then/when&quot; is now in &quot;then&quot; instead of &quot;when&quot;, so\nthat the responsibility to &quot;coerce&quot; the given promise rests solely in\nthe &quot;when&quot; method and the &quot;then&quot; method may assume that &quot;this&quot; is a\npromise of the right type.</li>\n<li>Refactors <code>nextTick</code> to use an unrolled microtask within Q regardless\nof how new ticks a requested. #316 @rkatic</li>\n</ul>\n<h2 id=\"0-9-5\">0.9.5</h2>\n<ul>\n<li>Introduces <code>inspect</code> for getting the state of a promise as\n<code>{state: &quot;fulfilled&quot; | &quot;rejected&quot; | &quot;pending&quot;, value | reason}</code>.</li>\n<li>Introduces <code>allSettled</code> which produces an array of promises states\nfor the input promises once they have all &quot;settled&quot;.  This is in\naccordance with a discussion on Promises/A+ that &quot;settled&quot; refers to\na promise that is &quot;fulfilled&quot; or &quot;rejected&quot;.  &quot;resolved&quot; refers to a\ndeferred promise that has been &quot;resolved&quot; to another promise,\n&quot;sealing its fate&quot; to the fate of the successor promise.</li>\n<li>Long stack traces are now off by default.  Set <code>Q.longStackSupport</code>\nto true to enable long stack traces.</li>\n<li>Long stack traces can now follow the entire asynchronous history of a\npromise, not just a single jump.</li>\n<li>Introduces <code>spawn</code> for an immediately invoked asychronous generator.\n@jlongster</li>\n<li>Support for <em>experimental</em> synonyms <code>mapply</code>, <code>mcall</code>, <code>nmapply</code>,\n<code>nmcall</code> for method invocation.</li>\n</ul>\n<h2 id=\"0-9-4\">0.9.4</h2>\n<ul>\n<li><code>isPromise</code> and <code>isPromiseAlike</code> now always returns a boolean\n(even for falsy values). #284 @lfac-pt</li>\n<li>Support for ES6 Generators in <code>async</code> #288 @andywingo</li>\n<li>Clear duplicate promise rejections from dispatch methods #238 @SLaks</li>\n<li>Unhandled rejection API #296 @domenic\n<code>stopUnhandledRejectionTracking</code>, <code>getUnhandledReasons</code>,\n<code>resetUnhandledRejections</code>.</li>\n</ul>\n<h2 id=\"0-9-3\">0.9.3</h2>\n<ul>\n<li>Add the ability to give <code>Q.timeout</code>&#39;s errors a custom error message. #270\n@jgrenon</li>\n<li>Fix Q&#39;s call-stack busting behavior in Node.js 0.10, by switching from\n<code>process.nextTick</code> to <code>setImmediate</code>. #254 #259</li>\n<li>Fix Q&#39;s behavior when used with the Mocha test runner in the browser, since\nMocha introduces a fake <code>process</code> global without a <code>nextTick</code> property. #267</li>\n<li>Fix some, but not all, cases wherein Q would give false positives in its\nunhandled rejection detection (#252). A fix for other cases (#238) is\nhopefully coming soon.</li>\n<li>Made <code>Q.promise</code> throw early if given a non-function.</li>\n</ul>\n<h2 id=\"0-9-2\">0.9.2</h2>\n<ul>\n<li>Pass through progress notifications when using <code>timeout</code>. #229 @omares</li>\n<li>Pass through progress notifications when using <code>delay</code>.</li>\n<li>Fix <code>nbind</code> to actually bind the <code>thisArg</code>. #232 @davidpadbury</li>\n</ul>\n<h2 id=\"0-9-1\">0.9.1</h2>\n<ul>\n<li>Made the AMD detection compatible with the RequireJS optimizer&#39;s <code>namespace</code>\noption. #225 @terinjokes</li>\n<li>Fix side effects from <code>valueOf</code>, and thus from <code>isFulfilled</code>, <code>isRejected</code>,\nand <code>isPending</code>. #226 @benjamn</li>\n</ul>\n<h2 id=\"0-9-0\">0.9.0</h2>\n<p>This release removes many layers of deprecated methods and brings Q closer to\nalignment with Mark Miller’s TC39 <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:concurrency\">strawman</a> for concurrency. At the same\ntime, it fixes many bugs and adds a few features around error handling. Finally,\nit comes with an updated and comprehensive <a href=\"https://github.com/kriskowal/q/wiki/API-Reference\">API Reference</a>.</p>\n<h3 id=\"api-cleanup\">API Cleanup</h3>\n<p>The following deprecated or undocumented methods have been removed.\nTheir replacements are listed here:</p>\n<table>\n   <thead>\n      <tr>\n         <th>0.8.x method</th>\n         <th>0.9 replacement</th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <td><code>Q.ref</code></td>\n         <td><code>Q</code></td>\n      </tr>\n      <tr>\n         <td><code>call</code>, <code>apply</code>, <code>bind</code> (<em>)</td>\n         <td><code>fcall</code>/<code>invoke</code>, <code>fapply</code>/<code>post</code>, <code>fbind</code></td>\n      </tr>\n      <tr>\n         <td><code>ncall</code>, <code>napply</code> (</em>)</td>\n         <td><code>nfcall</code>/<code>ninvoke</code>, <code>nfapply</code>/<code>npost</code></td>\n      </tr>\n      <tr>\n         <td><code>end</code></td>\n         <td><code>done</code></td>\n      </tr>\n      <tr>\n         <td><code>put</code></td>\n         <td><code>set</code></td>\n      </tr>\n      <tr>\n         <td><code>node</code></td>\n         <td><code>nbind</code></td>\n      </tr>\n      <tr>\n         <td><code>nend</code></td>\n         <td><code>nodeify</code></td>\n      </tr>\n      <tr>\n         <td><code>isResolved</code></td>\n         <td><code>isPending</code></td>\n      </tr>\n      <tr>\n         <td><code>deferred.node</code></td>\n         <td><code>deferred.makeNodeResolver</code></td>\n      </tr>\n      <tr>\n         <td><code>Method</code>, <code>sender</code></td>\n         <td><code>dispatcher</code></td>\n      </tr>\n      <tr>\n         <td><code>send</code></td>\n         <td><code>dispatch</code></td>\n      </tr>\n      <tr>\n         <td><code>view</code>, <code>viewInfo</code></td>\n         <td>(none)</td>\n      </tr>\n   </tbody>\n</table>\n\n\n<p>(*) Use of <code>thisp</code> is discouraged. For calling methods, use <code>post</code> or\n<code>invoke</code>.</p>\n<h3 id=\"alignment-with-the-concurrency-strawman\">Alignment with the Concurrency Strawman</h3>\n<ul>\n<li>Q now exports a <code>Q(value)</code> function, an alias for <code>resolve</code>.\n<code>Q.call</code>, <code>Q.apply</code>, and <code>Q.bind</code> were removed to make room for the\nsame methods on the function prototype.</li>\n<li><code>invoke</code> has been aliased to <code>send</code> in all its forms.</li>\n<li><code>post</code> with no method name acts like <code>fapply</code>.</li>\n</ul>\n<h3 id=\"error-handling\">Error Handling</h3>\n<ul>\n<li>Long stack traces can be turned off by setting <code>Q.stackJumpLimit</code> to zero.\nIn the future, this property will be used to fine tune how many stack jumps\nare retained in long stack traces; for now, anything nonzero is treated as\none (since Q only tracks one stack jump at the moment, see #144). #168</li>\n<li>In Node.js, if there are unhandled rejections when the process exits, they\nare output to the console. #115</li>\n</ul>\n<h3 id=\"other\">Other</h3>\n<ul>\n<li><code>delete</code> and <code>set</code> (née <code>put</code>) no longer have a fulfillment value.</li>\n<li>Q promises are no longer frozen, which\n<a href=\"http://code.google.com/p/v8/issues/detail?id=1858\">helps with performance</a>.</li>\n<li><code>thenReject</code> is now included, as a counterpart to <code>thenResolve</code>.</li>\n<li>The included browser <code>nextTick</code> shim is now faster. #195 @rkatic.</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>Q now works in Internet Explorer 10. #186 @ForbesLindesay</li>\n<li><code>fbind</code> no longer hard-binds the returned function&#39;s <code>this</code> to <code>undefined</code>.\n#202</li>\n<li><code>Q.reject</code> no longer leaks memory. #148</li>\n<li><code>npost</code> with no arguments now works. #207</li>\n<li><code>allResolved</code> now works with non-Q promises (&quot;thenables&quot;). #179</li>\n<li><code>keys</code> behavior is now correct even in browsers without native\n<code>Object.keys</code>. #192 @rkatic</li>\n<li><code>isRejected</code> and the <code>exception</code> property now work correctly if the\nrejection reason is falsy. #198</li>\n</ul>\n<h3 id=\"internals-and-advanced\">Internals and Advanced</h3>\n<ul>\n<li>The internal interface for a promise now uses\n<code>dispatchPromise(resolve, op, operands)</code> instead of <code>sendPromise(op,\nresolve, ...operands)</code>, which reduces the cases where Q needs to do\nargument slicing.</li>\n<li>The internal protocol uses different operands. &quot;put&quot; is now &quot;set&quot;.\n&quot;del&quot; is now &quot;delete&quot;. &quot;view&quot; and &quot;viewInfo&quot; have been removed.</li>\n<li><code>Q.fulfill</code> has been added. It is distinct from <code>Q.resolve</code> in that\nit does not pass promises through, nor coerces promises from other\nsystems. The promise becomes the fulfillment value. This is only\nrecommended for use when trying to fulfill a promise with an object that has\na <code>then</code> function that is at the same time not a promise.</li>\n</ul>\n<h2 id=\"0-8-12\">0.8.12</h2>\n<ul>\n<li>Treat foreign promises as unresolved in <code>Q.isFulfilled</code>; this lets <code>Q.all</code>\nwork on arrays containing foreign promises. #154</li>\n<li>Fix minor incompliances with the <a href=\"http://promises-aplus.github.com/promises-spec/\">Promises/A+ spec</a> and <a href=\"https://github.com/promises-aplus/promises-tests\">test suite</a>. #157\n#158</li>\n</ul>\n<h2 id=\"0-8-11\">0.8.11</h2>\n<ul>\n<li>Added <code>nfcall</code>, <code>nfapply</code>, and <code>nfbind</code> as <code>thisp</code>-less versions of\n<code>ncall</code>, <code>napply</code>, and <code>nbind</code>. The latter are now deprecated. #142</li>\n<li>Long stack traces no longer cause linearly-growing memory usage when chaining\npromises together. #111</li>\n<li>Inspecting <code>error.stack</code> in a rejection handler will now give a long stack\ntrace. #103</li>\n<li>Fixed <code>Q.timeout</code> to clear its timeout handle when the promise is rejected;\npreviously, it kept the event loop alive until the timeout period expired.\n#145 @dfilatov</li>\n<li>Added <code>q/queue</code> module, which exports an infinite promise queue\nconstructor.</li>\n</ul>\n<h2 id=\"0-8-10\">0.8.10</h2>\n<ul>\n<li>Added <code>done</code> as a replacement for <code>end</code>, taking the usual fulfillment,\nrejection, and progress handlers. It&#39;s essentially equivalent to\n<code>then(f, r, p).end()</code>.</li>\n<li>Added <code>Q.onerror</code>, a settable error trap that you can use to get full stack\ntraces for uncaught errors. #94</li>\n<li>Added <code>thenResolve</code> as a shortcut for returning a constant value once a\npromise is fulfilled. #108 @ForbesLindesay</li>\n<li>Various tweaks to progress notification, including propagation and\ntransformation of progress values and only forwarding a single progress\nobject.</li>\n<li>Renamed <code>nend</code> to <code>nodeify</code>. It no longer returns an always-fulfilled\npromise when a Node callback is passed.</li>\n<li><code>deferred.resolve</code> and <code>deferred.reject</code> no longer (sometimes) return\n<code>deferred.promise</code>.</li>\n<li>Fixed stack traces getting mangled if they hit <code>end</code> twice. #116 #121 @ef4</li>\n<li>Fixed <code>ninvoke</code> and <code>npost</code> to work on promises for objects with Node\nmethods. #134</li>\n<li>Fixed accidental coercion of objects with nontrivial <code>valueOf</code> methods,\nlike <code>Date</code>s, by the promise&#39;s <code>valueOf</code> method. #135</li>\n<li>Fixed <code>spread</code> not calling the passed rejection handler if given a rejected\npromise.</li>\n</ul>\n<h2 id=\"0-8-9\">0.8.9</h2>\n<ul>\n<li>Added <code>nend</code></li>\n<li>Added preliminary progress notification support, via\n<code>promise.then(onFulfilled, onRejected, onProgress)</code>,\n<code>promise.progress(onProgress)</code>, and <code>deferred.notify(...progressData)</code>.</li>\n<li>Made <code>put</code> and <code>del</code> return the object acted upon for easier chaining.\n#84</li>\n<li>Fixed coercion cycles with cooperating promises. #106</li>\n</ul>\n<h2 id=\"0-8-7\">0.8.7</h2>\n<ul>\n<li>Support <a href=\"http://github.com/kriskowal/mr\">Montage Require</a></li>\n</ul>\n<h2 id=\"0-8-6\">0.8.6</h2>\n<ul>\n<li>Fixed <code>npost</code> and <code>ninvoke</code> to pass the correct <code>thisp</code>. #74</li>\n<li>Fixed various cases involving unorthodox rejection reasons. #73 #90\n@ef4</li>\n<li>Fixed double-resolving of misbehaved custom promises. #75</li>\n<li>Sped up <code>Q.all</code> for arrays contain already-resolved promises or scalar\nvalues. @ForbesLindesay</li>\n<li>Made stack trace filtering work when concatenating assets. #93 @ef4</li>\n<li>Added warnings for deprecated methods. @ForbesLindesay</li>\n<li>Added <code>.npmignore</code> file so that dependent packages get a slimmer\n<code>node_modules</code> directory.</li>\n</ul>\n<h2 id=\"0-8-5\">0.8.5</h2>\n<ul>\n<li>Added preliminary support for long traces (@domenic)</li>\n<li>Added <code>fapply</code>, <code>fcall</code>, <code>fbind</code> for non-thisp\npromised function calls.</li>\n<li>Added <code>return</code> for async generators, where generators\nare implemented.</li>\n<li>Rejected promises now have an &quot;exception&quot; property.  If an object\nisRejected(object), then object.valueOf().exception will\nbe the wrapped error.</li>\n<li>Added Jasmine specifications</li>\n<li>Support Internet Explorers 7–9 (with multiple bug fixes @domenic)</li>\n<li>Support Firefox 12</li>\n<li>Support Safari 5.1.5</li>\n<li>Support Chrome 18</li>\n</ul>\n<h2 id=\"0-8-4\">0.8.4</h2>\n<ul>\n<li>WARNING: <code>promise.timeout</code> is now rejected with an <code>Error</code> object\nand the message now includes the duration of the timeout in\nmiliseconds.  This doesn&#39;t constitute (in my opinion) a\nbackward-incompatibility since it is a change of an undocumented and\nunspecified public behavior, but if you happened to depend on the\nexception being a string, you will need to revise your code.</li>\n<li>Added <code>deferred.makeNodeResolver()</code> to replace the more cryptic\n<code>deferred.node()</code> method.</li>\n<li>Added experimental <code>Q.promise(maker(resolve, reject))</code> to make a\npromise inside a callback, such that thrown exceptions in the\ncallback are converted and the resolver and rejecter are arguments.\nThis is a shorthand for making a deferred directly and inspired by\n@gozala’s stream constructor pattern and the Microsoft Windows Metro\nPromise constructor interface.</li>\n<li>Added experimental <code>Q.begin()</code> that is intended to kick off chains\nof <code>.then</code> so that each of these can be reordered without having to\nedit the new and former first step.</li>\n</ul>\n<h2 id=\"0-8-3\">0.8.3</h2>\n<ul>\n<li>Added <code>isFulfilled</code>, <code>isRejected</code>, and <code>isResolved</code>\nto the promise prototype.</li>\n<li>Added <code>allResolved</code> for waiting for every promise to either be\nfulfilled or rejected, without propagating an error. @utvara #53</li>\n<li>Added <code>Q.bind</code> as a method to transform functions that\nreturn and throw into promise-returning functions. See\n<a href=\"https://gist.github.com/1782808\">an example</a>. @domenic</li>\n<li>Renamed <code>node</code> export to <code>nbind</code>, and added <code>napply</code> to\ncomplete the set. <code>node</code> remains as deprecated. @domenic #58</li>\n<li>Renamed <code>Method</code> export to <code>sender</code>.  <code>Method</code>\nremains as deprecated and will be removed in the next\nmajor version since I expect it has very little usage.</li>\n<li>Added browser console message indicating a live list of\nunhandled errors.</li>\n<li>Added support for <code>msSetImmediate</code> (IE10) or <code>setImmediate</code>\n(available via <a href=\"https://github.com/NobleJS/setImmediate\">polyfill</a>)\nas a browser-side <code>nextTick</code> implementation. #44 #50 #59</li>\n<li>Stopped using the event-queue dependency, which was in place for\nNarwhal support: now directly using <code>process.nextTick</code>.</li>\n<li>WARNING: EXPERIMENTAL: added <code>finally</code> alias for <code>fin</code>, <code>catch</code>\nalias for <code>fail</code>, <code>try</code> alias for <code>call</code>, and <code>delete</code> alias\nfor <code>del</code>.  These properties are enquoted in the library for\ncross-browser compatibility, but may be used as property names in\nmodern engines.</li>\n</ul>\n<h2 id=\"0-8-2\">0.8.2</h2>\n<ul>\n<li>Deprecated <code>ref</code> in favor of <code>resolve</code> as recommended by\n@domenic.</li>\n<li>Update event-queue dependency.</li>\n</ul>\n<h2 id=\"0-8-1\">0.8.1</h2>\n<ul>\n<li>Fixed Opera bug. #35 @cadorn</li>\n<li>Fixed <code>Q.all([])</code> #32 @domenic</li>\n</ul>\n<h2 id=\"0-8-0\">0.8.0</h2>\n<ul>\n<li>WARNING: <code>enqueue</code> removed.  Use <code>nextTick</code> instead.\nThis is more consistent with NodeJS and (subjectively)\nmore explicit and intuitive.</li>\n<li>WARNING: <code>def</code> removed.  Use <code>master</code> instead.  The\nterm <code>def</code> was too confusing to new users.</li>\n<li>WARNING: <code>spy</code> removed in favor of <code>fin</code>.</li>\n<li>WARNING: <code>wait</code> removed. Do <code>all(args).get(0)</code> instead.</li>\n<li>WARNING: <code>join</code> removed. Do <code>all(args).spread(callback)</code> instead.</li>\n<li>WARNING: Removed the <code>Q</code> function module.exports alias\nfor <code>Q.ref</code>. It conflicts with <code>Q.apply</code> in weird\nways, making it uncallable.</li>\n<li>Revised <code>delay</code> so that it accepts both <code>(value,\ntimeout)</code> and <code>(timeout)</code> variations based on\narguments length.</li>\n<li>Added <code>ref().spread(cb(...args))</code>, a variant of\n<code>then</code> that spreads an array across multiple arguments.\nUseful with <code>all()</code>.</li>\n<li>Added <code>defer().node()</code> Node callback generator.  The\ncallback accepts <code>(error, value)</code> or <code>(error,\n...values)</code>.  For multiple value arguments, the\nfulfillment value is an array, useful in conjunction with\n<code>spread</code>.</li>\n<li>Added <code>node</code> and <code>ncall</code>, both with the signature\n<code>(fun, thisp_opt, ...args)</code>.  The former is a decorator\nand the latter calls immediately.  <code>node</code> optional\nbinds and partially applies.  <code>ncall</code> can bind and pass\narguments.</li>\n</ul>\n<h2 id=\"0-7-2\">0.7.2</h2>\n<ul>\n<li>Fixed thenable promise assimilation.</li>\n</ul>\n<h2 id=\"0-7-1\">0.7.1</h2>\n<ul>\n<li>Stopped shimming <code>Array.prototype.reduce</code>. The\nenumerable property has bad side-effects.  Libraries that\ndepend on this (for example, QQ) will need to be revised.</li>\n</ul>\n<h2 id=\"0-7-0-backward-incompatibility\">0.7.0 - BACKWARD INCOMPATIBILITY</h2>\n<ul>\n<li>WARNING: Removed <code>report</code> and <code>asap</code></li>\n<li>WARNING: The <code>callback</code> argument of the <code>fin</code>\nfunction no longer receives any arguments. Thus, it can\nbe used to call functions that should not receive\narguments on resolution.  Use <code>when</code>, <code>then</code>, or\n<code>fail</code> if you need a value.</li>\n<li>IMPORTANT: Fixed a bug in the use of <code>MessageChannel</code>\nfor <code>nextTick</code>.</li>\n<li>Renamed <code>enqueue</code> to <code>nextTick</code>.</li>\n<li>Added experimental <code>view</code> and <code>viewInfo</code> for creating\nviews of promises either when or before they&#39;re\nfulfilled.</li>\n<li>Shims are now externally applied so subsequent scripts or\ndependees can use them.</li>\n<li>Improved minification results.</li>\n<li>Improved readability.</li>\n</ul>\n<h2 id=\"0-6-0-backward-incompatibility\">0.6.0 - BACKWARD INCOMPATIBILITY</h2>\n<ul>\n<li>WARNING: In practice, the implementation of <code>spy</code> and\nthe name <code>fin</code> were useful.  I&#39;ve removed the old\n<code>fin</code> implementation and renamed/aliased <code>spy</code>.</li>\n<li>The &quot;q&quot; module now exports its <code>ref</code> function as a &quot;Q&quot;\nconstructor, with module systems that support exports\nassignment including NodeJS, RequireJS, and when used as\na <code>&lt;script&gt;</code> tag. Notably, strictly compliant CommonJS\ndoes not support this, but UncommonJS does.</li>\n<li>Added <code>async</code> decorator for generators that use yield\nto &quot;trampoline&quot; promises. In engines that support\ngenerators (SpiderMonkey), this will greatly reduce the\nneed for nested callbacks.</li>\n<li>Made <code>when</code> chainable.</li>\n<li>Made <code>all</code> chainable.</li>\n</ul>\n<h2 id=\"0-5-3\">0.5.3</h2>\n<ul>\n<li>Added <code>all</code> and refactored <code>join</code> and <code>wait</code> to use\nit.  All of these will now reject at the earliest\nrejection.</li>\n</ul>\n<h2 id=\"0-5-2\">0.5.2</h2>\n<ul>\n<li>Minor improvement to <code>spy</code>; now waits for resolution of\ncallback promise.</li>\n</ul>\n<h2 id=\"0-5-1\">0.5.1</h2>\n<ul>\n<li>Made most Q API methods chainable on promise objects, and\nturned the previous promise-methods of <code>join</code>,\n<code>wait</code>, and <code>report</code> into Q API methods.</li>\n<li>Added <code>apply</code> and <code>call</code> to the Q API, and <code>apply</code>\nas a promise handler.</li>\n<li>Added <code>fail</code>, <code>fin</code>, and <code>spy</code> to Q and the promise\nprototype for convenience when observing rejection,\nfulfillment and rejection, or just observing without\naffecting the resolution.</li>\n<li>Renamed <code>def</code> (although <code>def</code> remains shimmed until\nthe next major release) to <code>master</code>.</li>\n<li>Switched to using <code>MessageChannel</code> for next tick task\nenqueue in browsers that support it.</li>\n</ul>\n<h2 id=\"0-5-0-minor-backward-incompatibility\">0.5.0 - MINOR BACKWARD INCOMPATIBILITY</h2>\n<ul>\n<li>Exceptions are no longer reported when consumed.</li>\n<li>Removed <code>error</code> from the API.  Since exceptions are\ngetting consumed, throwing them in an errback causes the\nexception to silently disappear.  Use <code>end</code>.</li>\n<li>Added <code>end</code> as both an API method and a promise-chain\nending method.  It causes propagated rejections to be\nthrown, which allows Node to write stack traces and\nemit <code>uncaughtException</code> events, and browsers to\nlikewise emit <code>onerror</code> and log to the console.</li>\n<li>Added <code>join</code> and <code>wait</code> as promise chain functions,\nso you can wait for variadic promises, returning your own\npromise back, or join variadic promises, resolving with a\ncallback that receives variadic fulfillment values.</li>\n</ul>\n<h2 id=\"0-4-4\">0.4.4</h2>\n<ul>\n<li><code>end</code> no longer returns a promise. It is the end of the\npromise chain.</li>\n<li>Stopped reporting thrown exceptions in <code>when</code> callbacks\nand errbacks.  These must be explicitly reported through\n<code>.end()</code>, <code>.then(null, Q.error)</code>, or some other\nmechanism.</li>\n<li>Added <code>report</code> as an API method, which can be used as\nan errback to report and propagate an error.</li>\n<li>Added <code>report</code> as a promise-chain method, so an error\ncan be reported if it passes such a gate.</li>\n</ul>\n<h2 id=\"0-4-3\">0.4.3</h2>\n<ul>\n<li>Fixed <code>&lt;script&gt;</code> support that regressed with 0.4.2\nbecause of &quot;use strict&quot; in the module system\nmulti-plexer.</li>\n</ul>\n<h2 id=\"0-4-2\">0.4.2</h2>\n<ul>\n<li>Added support for RequireJS (jburke)</li>\n</ul>\n<h2 id=\"0-4-1\">0.4.1</h2>\n<ul>\n<li>Added an &quot;end&quot; method to the promise prototype,\nas a shorthand for waiting for the promise to\nbe resolved gracefully, and failing to do so,\nto dump an error message.</li>\n</ul>\n<h2 id=\"0-4-0-backward-incompatible-\">0.4.0 - BACKWARD INCOMPATIBLE*</h2>\n<ul>\n<li>*Removed the utility modules. NPM and Node no longer\nexpose any module except the main module.  These have\nbeen moved and merged into the &quot;qq&quot; package.</li>\n<li>*In a non-CommonJS browser, q.js can be used as a script.\nIt now creates a Q global variable.</li>\n<li>Fixed thenable assimilation.</li>\n<li>Fixed some issues with asap, when it resolves to\nundefined, or throws an exception.</li>\n</ul>\n<h2 id=\"0-3-0-backward-incompatible\">0.3.0 - BACKWARD-INCOMPATIBLE</h2>\n<ul>\n<li>The <code>post</code> method has been reverted to its original\nsignature, as provided in Tyler Close&#39;s <code>ref_send</code> API.\nThat is, <code>post</code> accepts two arguments, the second of\nwhich is an arbitrary object, but usually invocation\narguments as an <code>Array</code>.  To provide variadic arguments\nto <code>post</code>, there is a new <code>invoke</code> function that posts\nthe variadic arguments to the value given in the first\nargument.</li>\n<li>The <code>defined</code> method has been moved from <code>q</code> to <code>q/util</code>\nsince it gets no use in practice but is still\ntheoretically useful.</li>\n<li>The <code>Promise</code> constructor has been renamed to\n<code>makePromise</code> to be consistent with the convention that\nfunctions that do not require the <code>new</code> keyword to be\nused as constructors have camelCase names.</li>\n<li>The <code>isResolved</code> function has been renamed to\n<code>isFulfilled</code>.  There is a new <code>isResolved</code> function that\nindicates whether a value is not a promise or, if it is a\npromise, whether it has been either fulfilled or\nrejected.  The code has been revised to reflect this\nnuance in terminology.</li>\n</ul>\n<h2 id=\"0-2-10\">0.2.10</h2>\n<ul>\n<li>Added <code>join</code> to <code>&quot;q/util&quot;</code> for variadically joining\nmultiple promises.</li>\n</ul>\n<h2 id=\"0-2-9\">0.2.9</h2>\n<ul>\n<li>The future-compatible <code>invoke</code> method has been added,\nto replace <code>post</code>, since <code>post</code> will become backward-\nincompatible in the next major release.</li>\n<li>Exceptions thrown in the callbacks of a <code>when</code> call are\nnow emitted to Node&#39;s <code>&quot;uncaughtException&quot;</code> <code>process</code>\nevent in addition to being returned as a rejection reason.</li>\n</ul>\n<h2 id=\"0-2-8\">0.2.8</h2>\n<ul>\n<li>Exceptions thrown in the callbacks of a <code>when</code> call\nare now consumed, warned, and transformed into\nrejections of the promise returned by <code>when</code>.</li>\n</ul>\n<h2 id=\"0-2-7\">0.2.7</h2>\n<ul>\n<li>Fixed a minor bug in thenable assimilation, regressed\nbecause of the change in the forwarding protocol.</li>\n<li>Fixed behavior of &quot;q/util&quot; <code>deep</code> method on dates and\nother primitives. Github issue #11.</li>\n</ul>\n<h2 id=\"0-2-6\">0.2.6</h2>\n<ul>\n<li>Thenables (objects with a &quot;then&quot; method) are accepted\nand provided, bringing this implementation of Q\ninto conformance with Promises/A, B, and D.</li>\n<li>Added <code>makePromise</code>, to replace the <code>Promise</code> function\neventually.</li>\n<li>Rejections are now also duck-typed. A rejection is a\npromise with a valueOf method that returns a rejection\ndescriptor. A rejection descriptor has a\n&quot;promiseRejected&quot; property equal to &quot;true&quot; and a\n&quot;reason&quot; property corresponding to the rejection reason.</li>\n<li>Altered the <code>makePromise</code> API such that the <code>fallback</code>\nmethod no longer receives a superfluous <code>resolved</code> method\nafter the <code>operator</code>.  The fallback method is responsible\nonly for returning a resolution.  This breaks an\nundocumented API, so third-party API&#39;s depending on the\nprevious undocumented behavior may break.</li>\n</ul>\n<h2 id=\"0-2-5\">0.2.5</h2>\n<ul>\n<li>Changed promises into a duck-type such that multiple\ninstances of the Q module can exchange promise objects.\nA promise is now defined as &quot;an object that implements the\n<code>promiseSend(op, resolved, ...)</code> method and <code>valueOf</code>&quot;.</li>\n<li>Exceptions in promises are now captured and returned\nas rejections.</li>\n</ul>\n<h2 id=\"0-2-4\">0.2.4</h2>\n<ul>\n<li>Fixed bug in <code>ref</code> that prevented <code>del</code> messages from\nbeing received (gozala)</li>\n<li>Fixed a conflict with FireFox 4; constructor property\nis now read-only.</li>\n</ul>\n<h2 id=\"0-2-3\">0.2.3</h2>\n<ul>\n<li>Added <code>keys</code> message to promises and to the promise API.</li>\n</ul>\n<h2 id=\"0-2-2\">0.2.2</h2>\n<ul>\n<li>Added boilerplate to <code>q/queue</code> and <code>q/util</code>.</li>\n<li>Fixed missing dependency to <code>q/queue</code>.</li>\n</ul>\n<h2 id=\"0-2-1\">0.2.1</h2>\n<ul>\n<li>The <code>resolve</code> and <code>reject</code> methods of <code>defer</code> objects now\nreturn the resolution promise for convenience.</li>\n<li>Added <code>q/util</code>, which provides <code>step</code>, <code>delay</code>, <code>shallow</code>,\n<code>deep</code>, and three reduction orders.</li>\n<li>Added <code>q/queue</code> module for a promise <code>Queue</code>.</li>\n<li>Added <code>q-comm</code> to the list of compatible libraries.</li>\n<li>Deprecated <code>defined</code> from <code>q</code>, with intent to move it to\n<code>q/util</code>.</li>\n</ul>\n<h2 id=\"0-2-0-backward-incompatible\">0.2.0 - BACKWARD INCOMPATIBLE</h2>\n<ul>\n<li>Changed post(ref, name, args) to variadic\npost(ref, name, ...args). BACKWARD INCOMPATIBLE</li>\n<li>Added a def(value) method to annotate an object as being\nnecessarily a local value that cannot be serialized, such\nthat inter-process/worker/vat promise communication\nlibraries will send messages to it, but never send it\nback.</li>\n<li>Added a send(value, op, ...args) method to the public API, for\nforwarding messages to a value or promise in a future turn.</li>\n</ul>\n<h2 id=\"0-1-9\">0.1.9</h2>\n<ul>\n<li>Added isRejected() for testing whether a value is a rejected\npromise.  isResolved() retains the behavior of stating\nthat rejected promises are not resolved.</li>\n</ul>\n<h2 id=\"0-1-8\">0.1.8</h2>\n<ul>\n<li>Fixed isResolved(null) and isResolved(undefined) [issue #9]</li>\n<li>Fixed a problem with the Object.create shim</li>\n</ul>\n<h2 id=\"0-1-7\">0.1.7</h2>\n<ul>\n<li>shimmed ES5 Object.create in addition to Object.freeze\nfor compatibility on non-ES5 engines (gozala)</li>\n</ul>\n<h2 id=\"0-1-6\">0.1.6</h2>\n<ul>\n<li>Q.isResolved added</li>\n<li>promise.valueOf() now returns the value of resolved\nand near values</li>\n<li>asap retried</li>\n<li>promises are frozen when possible</li>\n</ul>\n<h2 id=\"0-1-5\">0.1.5</h2>\n<ul>\n<li>fixed dependency list for Teleport (gozala)</li>\n<li>all unit tests now pass (gozala)</li>\n</ul>\n<h2 id=\"0-1-4\">0.1.4</h2>\n<ul>\n<li>added support for Teleport as an engine (gozala)</li>\n<li>simplified and updated methods for getting internal\nprint and enqueue functions universally (gozala)</li>\n</ul>\n<h2 id=\"0-1-3\">0.1.3</h2>\n<ul>\n<li>fixed erroneous link to the q module in package.json</li>\n</ul>\n<h2 id=\"0-1-2\">0.1.2</h2>\n<ul>\n<li>restructured for overlay style package compatibility</li>\n</ul>\n<h2 id=\"0-1-0\">0.1.0</h2>\n<ul>\n<li>removed asap because it was broken, probably down to the\nphilosophy.</li>\n</ul>\n<h2 id=\"0-0-3\">0.0.3</h2>\n<ul>\n<li>removed q-util</li>\n<li>fixed asap so it returns a value if completed</li>\n</ul>\n<h2 id=\"0-0-2\">0.0.2</h2>\n<ul>\n<li>added q-util</li>\n</ul>\n<h2 id=\"0-0-1\">0.0.1</h2>\n<ul>\n<li>initial version</li>\n</ul>\n"
      ],
      "contentsRaw": "## 1.5.1\n\n - Q.any now annotates its error message to clarify that Q.any was involved and\n   includes only the last error emitted. (Ivan Etchart)\n - Avoid domain.dispose during tests in preparation for Node.js 9. (Anna\n   Henningsen)\n\n## 1.5.0\n\n - Q.any gives an error message from the last rejected promise\n - Throw if callback supplied to \"finally\" is invalid (@grahamrhay)\n - Long stack trace improvements, can now construct long stack traces\n   across rethrows.\n\n## 1.4.1\n\n - Address an issue that prevented Q from being used as a `<script>` for\n   Firefox add-ons. Q can now be used in any environment that provides `window`\n   or `self` globals, favoring `window` since add-ons have an an immutable\n   `self` that is distinct from `window`.\n\n## 1.4.0\n\n - Add `noConflict` support for use in `<script>` (@jahnjw).\n\n## 1.3.0\n\n - Add tracking for unhandled and handled rejections in Node.js (@benjamingr).\n\n## 1.2.1\n\n - Fix Node.js environment detection for modern Browserify (@kahnjw).\n\n## 1.2.0\n\n - Added Q.any(promisesArray) method (@vergara).\n   Returns a promise fulfilled with the value of the first resolved promise in\n   promisesArray. If all promises in promisesArray are rejected, it returns\n   a rejected promise.\n\n## 1.1.2\n\n - Removed extraneous files from the npm package by using the \"files\"\n   whitelist in package.json instead of the .npmignore blacklist.\n   (@anton-rudeshko)\n\n## 1.1.1\n\n - Fix a pair of regressions in bootstrapping, one which precluded\n   WebWorker support, and another that precluded support in\n   ``<script>`` usage outright. #607\n\n## 1.1.0\n\n - Adds support for enabling long stack traces in node.js by setting\n   environment variable `Q_DEBUG=1`.\n - Introduces the `tap` method to promises, which will see a value\n   pass through without alteration.\n - Use instanceof to recognize own promise instances as opposed to\n   thenables.\n - Construct timeout errors with `code === ETIMEDOUT` (Kornel Lesiński)\n - More descriminant CommonJS module environment detection.\n - Dropped continuous integration for Node.js 0.6 and 0.8 because of\n   changes to npm that preclude the use of new `^` version predicate\n   operator in any transitive dependency.\n - Users can now override `Q.nextTick`.\n\n## 1.0.1\n\n - Adds support for `Q.Promise`, which implements common usage of the\n   ES6 `Promise` constructor and its methods. `Promise` does not have\n   a valid promise constructor and a proper implementation awaits\n   version 2 of Q.\n - Removes the console stopgap for a promise inspector. This no longer\n   works with any degree of reliability.\n - Fixes support for content security policies that forbid eval. Now\n   using the `StopIteration` global to distinguish SpiderMonkey\n   generators from ES6 generators, assuming that they will never\n   coexist.\n\n## 1.0.0\n\n:cake: This is all but a re-release of version 0.9, which has settled\ninto a gentle maintenance mode and rightly deserves an official 1.0.\nAn ambitious 2.0 release is already around the corner, but 0.9/1.0\nhave been distributed far and wide and demand long term support.\n\n - Q will now attempt to post a debug message in browsers regardless\n   of whether window.Touch is defined. Chrome at least now has this\n   property regardless of whether touch is supported by the underlying\n   hardware.\n - Remove deprecation warning from `promise.valueOf`. The function is\n   called by the browser in various ways so there is no way to\n   distinguish usage that should be migrated from usage that cannot be\n   altered.\n\n## 0.9.7\n\n - :warning: `q.min.js` is no longer checked-in.  It is however still\n   created by Grunt and NPM.\n - Fixes a bug that inhibited `Q.async` with implementations of the new\n   ES6 generators.\n - Fixes a bug with `nextTick` affecting Safari 6.0.5 the first time a\n   page loads when an `iframe` is involved.\n - Introduces `passByCopy`, `join`, and `race`.\n - Shows stack traces or error messages on the console, instead of\n   `Error` objects.\n - Elimintates wrapper methods for improved performance.\n - `Q.all` now propagates progress notifications of the form you might\n   expect of ES6 iterations, `{value, index}` where the `value` is the\n   progress notification from the promise at `index`.\n\n## 0.9.6\n\n - Fixes a bug in recognizing the difference between compatible Q\n   promises, and Q promises from before the implementation of \"inspect\".\n   The latter are now coerced.\n - Fixes an infinite asynchronous coercion cycle introduced by former\n   solution, in two independently sufficient ways.  1.) All promises\n   returned by makePromise now implement \"inspect\", albeit a default\n   that reports that the promise has an \"unknown\" state.  2.) The\n   implementation of \"then/when\" is now in \"then\" instead of \"when\", so\n   that the responsibility to \"coerce\" the given promise rests solely in\n   the \"when\" method and the \"then\" method may assume that \"this\" is a\n   promise of the right type.\n - Refactors `nextTick` to use an unrolled microtask within Q regardless\n   of how new ticks a requested. #316 @rkatic\n\n## 0.9.5\n\n - Introduces `inspect` for getting the state of a promise as\n   `{state: \"fulfilled\" | \"rejected\" | \"pending\", value | reason}`.\n - Introduces `allSettled` which produces an array of promises states\n   for the input promises once they have all \"settled\".  This is in\n   accordance with a discussion on Promises/A+ that \"settled\" refers to\n   a promise that is \"fulfilled\" or \"rejected\".  \"resolved\" refers to a\n   deferred promise that has been \"resolved\" to another promise,\n   \"sealing its fate\" to the fate of the successor promise.\n - Long stack traces are now off by default.  Set `Q.longStackSupport`\n   to true to enable long stack traces.\n - Long stack traces can now follow the entire asynchronous history of a\n   promise, not just a single jump.\n - Introduces `spawn` for an immediately invoked asychronous generator.\n   @jlongster\n - Support for *experimental* synonyms `mapply`, `mcall`, `nmapply`,\n   `nmcall` for method invocation.\n\n## 0.9.4\n\n - `isPromise` and `isPromiseAlike` now always returns a boolean\n   (even for falsy values). #284 @lfac-pt\n - Support for ES6 Generators in `async` #288 @andywingo\n - Clear duplicate promise rejections from dispatch methods #238 @SLaks\n - Unhandled rejection API #296 @domenic\n   `stopUnhandledRejectionTracking`, `getUnhandledReasons`,\n   `resetUnhandledRejections`.\n\n## 0.9.3\n\n - Add the ability to give `Q.timeout`'s errors a custom error message. #270\n   @jgrenon\n - Fix Q's call-stack busting behavior in Node.js 0.10, by switching from\n   `process.nextTick` to `setImmediate`. #254 #259\n - Fix Q's behavior when used with the Mocha test runner in the browser, since\n   Mocha introduces a fake `process` global without a `nextTick` property. #267\n - Fix some, but not all, cases wherein Q would give false positives in its\n   unhandled rejection detection (#252). A fix for other cases (#238) is\n   hopefully coming soon.\n - Made `Q.promise` throw early if given a non-function.\n\n## 0.9.2\n\n - Pass through progress notifications when using `timeout`. #229 @omares\n - Pass through progress notifications when using `delay`.\n - Fix `nbind` to actually bind the `thisArg`. #232 @davidpadbury\n\n## 0.9.1\n\n - Made the AMD detection compatible with the RequireJS optimizer's `namespace`\n   option. #225 @terinjokes\n - Fix side effects from `valueOf`, and thus from `isFulfilled`, `isRejected`,\n   and `isPending`. #226 @benjamn\n\n## 0.9.0\n\nThis release removes many layers of deprecated methods and brings Q closer to\nalignment with Mark Miller’s TC39 [strawman][] for concurrency. At the same\ntime, it fixes many bugs and adds a few features around error handling. Finally,\nit comes with an updated and comprehensive [API Reference][].\n\n[strawman]: http://wiki.ecmascript.org/doku.php?id=strawman:concurrency\n[API Reference]: https://github.com/kriskowal/q/wiki/API-Reference\n\n### API Cleanup\n\nThe following deprecated or undocumented methods have been removed.\nTheir replacements are listed here:\n\n<table>\n   <thead>\n      <tr>\n         <th>0.8.x method</th>\n         <th>0.9 replacement</th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <td><code>Q.ref</code></td>\n         <td><code>Q</code></td>\n      </tr>\n      <tr>\n         <td><code>call</code>, <code>apply</code>, <code>bind</code> (*)</td>\n         <td><code>fcall</code>/<code>invoke</code>, <code>fapply</code>/<code>post</code>, <code>fbind</code></td>\n      </tr>\n      <tr>\n         <td><code>ncall</code>, <code>napply</code> (*)</td>\n         <td><code>nfcall</code>/<code>ninvoke</code>, <code>nfapply</code>/<code>npost</code></td>\n      </tr>\n      <tr>\n         <td><code>end</code></td>\n         <td><code>done</code></td>\n      </tr>\n      <tr>\n         <td><code>put</code></td>\n         <td><code>set</code></td>\n      </tr>\n      <tr>\n         <td><code>node</code></td>\n         <td><code>nbind</code></td>\n      </tr>\n      <tr>\n         <td><code>nend</code></td>\n         <td><code>nodeify</code></td>\n      </tr>\n      <tr>\n         <td><code>isResolved</code></td>\n         <td><code>isPending</code></td>\n      </tr>\n      <tr>\n         <td><code>deferred.node</code></td>\n         <td><code>deferred.makeNodeResolver</code></td>\n      </tr>\n      <tr>\n         <td><code>Method</code>, <code>sender</code></td>\n         <td><code>dispatcher</code></td>\n      </tr>\n      <tr>\n         <td><code>send</code></td>\n         <td><code>dispatch</code></td>\n      </tr>\n      <tr>\n         <td><code>view</code>, <code>viewInfo</code></td>\n         <td>(none)</td>\n      </tr>\n   </tbody>\n</table>\n\n\n(*) Use of ``thisp`` is discouraged. For calling methods, use ``post`` or\n``invoke``.\n\n### Alignment with the Concurrency Strawman\n\n-   Q now exports a `Q(value)` function, an alias for `resolve`.\n    `Q.call`, `Q.apply`, and `Q.bind` were removed to make room for the\n    same methods on the function prototype.\n-   `invoke` has been aliased to `send` in all its forms.\n-   `post` with no method name acts like `fapply`.\n\n### Error Handling\n\n-   Long stack traces can be turned off by setting `Q.stackJumpLimit` to zero.\n    In the future, this property will be used to fine tune how many stack jumps\n    are retained in long stack traces; for now, anything nonzero is treated as\n    one (since Q only tracks one stack jump at the moment, see #144). #168\n-   In Node.js, if there are unhandled rejections when the process exits, they\n    are output to the console. #115\n\n### Other\n\n-   `delete` and `set` (née `put`) no longer have a fulfillment value.\n-   Q promises are no longer frozen, which\n    [helps with performance](http://code.google.com/p/v8/issues/detail?id=1858).\n-   `thenReject` is now included, as a counterpart to `thenResolve`.\n-   The included browser `nextTick` shim is now faster. #195 @rkatic.\n\n### Bug Fixes\n\n-   Q now works in Internet Explorer 10. #186 @ForbesLindesay\n-   `fbind` no longer hard-binds the returned function's `this` to `undefined`.\n    #202\n-   `Q.reject` no longer leaks memory. #148\n-   `npost` with no arguments now works. #207\n-   `allResolved` now works with non-Q promises (\"thenables\"). #179\n-   `keys` behavior is now correct even in browsers without native\n    `Object.keys`. #192 @rkatic\n-   `isRejected` and the `exception` property now work correctly if the\n    rejection reason is falsy. #198\n\n### Internals and Advanced\n\n-   The internal interface for a promise now uses\n    `dispatchPromise(resolve, op, operands)` instead of `sendPromise(op,\n    resolve, ...operands)`, which reduces the cases where Q needs to do\n    argument slicing.\n-   The internal protocol uses different operands. \"put\" is now \"set\".\n    \"del\" is now \"delete\". \"view\" and \"viewInfo\" have been removed.\n-   `Q.fulfill` has been added. It is distinct from `Q.resolve` in that\n    it does not pass promises through, nor coerces promises from other\n    systems. The promise becomes the fulfillment value. This is only\n    recommended for use when trying to fulfill a promise with an object that has\n    a `then` function that is at the same time not a promise.\n\n## 0.8.12\n- Treat foreign promises as unresolved in `Q.isFulfilled`; this lets `Q.all`\n  work on arrays containing foreign promises. #154\n- Fix minor incompliances with the [Promises/A+ spec][] and [test suite][]. #157\n  #158\n\n[Promises/A+ spec]: http://promises-aplus.github.com/promises-spec/\n[test suite]: https://github.com/promises-aplus/promises-tests\n\n## 0.8.11\n\n - Added ``nfcall``, ``nfapply``, and ``nfbind`` as ``thisp``-less versions of\n   ``ncall``, ``napply``, and ``nbind``. The latter are now deprecated. #142\n - Long stack traces no longer cause linearly-growing memory usage when chaining\n   promises together. #111\n - Inspecting ``error.stack`` in a rejection handler will now give a long stack\n   trace. #103\n - Fixed ``Q.timeout`` to clear its timeout handle when the promise is rejected;\n   previously, it kept the event loop alive until the timeout period expired.\n   #145 @dfilatov\n - Added `q/queue` module, which exports an infinite promise queue\n   constructor.\n\n## 0.8.10\n\n - Added ``done`` as a replacement for ``end``, taking the usual fulfillment,\n   rejection, and progress handlers. It's essentially equivalent to\n   ``then(f, r, p).end()``.\n - Added ``Q.onerror``, a settable error trap that you can use to get full stack\n   traces for uncaught errors. #94\n - Added ``thenResolve`` as a shortcut for returning a constant value once a\n   promise is fulfilled. #108 @ForbesLindesay\n - Various tweaks to progress notification, including propagation and\n   transformation of progress values and only forwarding a single progress\n   object.\n - Renamed ``nend`` to ``nodeify``. It no longer returns an always-fulfilled\n   promise when a Node callback is passed.\n - ``deferred.resolve`` and ``deferred.reject`` no longer (sometimes) return\n   ``deferred.promise``.\n - Fixed stack traces getting mangled if they hit ``end`` twice. #116 #121 @ef4\n - Fixed ``ninvoke`` and ``npost`` to work on promises for objects with Node\n   methods. #134\n - Fixed accidental coercion of objects with nontrivial ``valueOf`` methods,\n   like ``Date``s, by the promise's ``valueOf`` method. #135\n - Fixed ``spread`` not calling the passed rejection handler if given a rejected\n   promise.\n\n## 0.8.9\n\n - Added ``nend``\n - Added preliminary progress notification support, via\n   ``promise.then(onFulfilled, onRejected, onProgress)``,\n   ``promise.progress(onProgress)``, and ``deferred.notify(...progressData)``.\n - Made ``put`` and ``del`` return the object acted upon for easier chaining.\n   #84\n - Fixed coercion cycles with cooperating promises. #106\n\n## 0.8.7\n\n - Support [Montage Require](http://github.com/kriskowal/mr)\n\n## 0.8.6\n\n - Fixed ``npost`` and ``ninvoke`` to pass the correct ``thisp``. #74\n - Fixed various cases involving unorthodox rejection reasons. #73 #90\n   @ef4\n - Fixed double-resolving of misbehaved custom promises. #75\n - Sped up ``Q.all`` for arrays contain already-resolved promises or scalar\n   values. @ForbesLindesay\n - Made stack trace filtering work when concatenating assets. #93 @ef4\n - Added warnings for deprecated methods. @ForbesLindesay\n - Added ``.npmignore`` file so that dependent packages get a slimmer\n   ``node_modules`` directory.\n\n## 0.8.5\n\n - Added preliminary support for long traces (@domenic)\n - Added ``fapply``, ``fcall``, ``fbind`` for non-thisp\n   promised function calls.\n - Added ``return`` for async generators, where generators\n   are implemented.\n - Rejected promises now have an \"exception\" property.  If an object\n   isRejected(object), then object.valueOf().exception will\n   be the wrapped error.\n - Added Jasmine specifications\n - Support Internet Explorers 7–9 (with multiple bug fixes @domenic)\n - Support Firefox 12\n - Support Safari 5.1.5\n - Support Chrome 18\n\n## 0.8.4\n\n - WARNING: ``promise.timeout`` is now rejected with an ``Error`` object\n   and the message now includes the duration of the timeout in\n   miliseconds.  This doesn't constitute (in my opinion) a\n   backward-incompatibility since it is a change of an undocumented and\n   unspecified public behavior, but if you happened to depend on the\n   exception being a string, you will need to revise your code.\n - Added ``deferred.makeNodeResolver()`` to replace the more cryptic\n   ``deferred.node()`` method.\n - Added experimental ``Q.promise(maker(resolve, reject))`` to make a\n   promise inside a callback, such that thrown exceptions in the\n   callback are converted and the resolver and rejecter are arguments.\n   This is a shorthand for making a deferred directly and inspired by\n   @gozala’s stream constructor pattern and the Microsoft Windows Metro\n   Promise constructor interface.\n - Added experimental ``Q.begin()`` that is intended to kick off chains\n   of ``.then`` so that each of these can be reordered without having to\n   edit the new and former first step.\n\n## 0.8.3\n\n - Added ``isFulfilled``, ``isRejected``, and ``isResolved``\n   to the promise prototype.\n - Added ``allResolved`` for waiting for every promise to either be\n   fulfilled or rejected, without propagating an error. @utvara #53\n - Added ``Q.bind`` as a method to transform functions that\n   return and throw into promise-returning functions. See\n   [an example](https://gist.github.com/1782808). @domenic\n - Renamed ``node`` export to ``nbind``, and added ``napply`` to\n   complete the set. ``node`` remains as deprecated. @domenic #58\n - Renamed ``Method`` export to ``sender``.  ``Method``\n   remains as deprecated and will be removed in the next\n   major version since I expect it has very little usage.\n - Added browser console message indicating a live list of\n   unhandled errors.\n - Added support for ``msSetImmediate`` (IE10) or ``setImmediate``\n   (available via [polyfill](https://github.com/NobleJS/setImmediate))\n   as a browser-side ``nextTick`` implementation. #44 #50 #59\n - Stopped using the event-queue dependency, which was in place for\n   Narwhal support: now directly using ``process.nextTick``.\n - WARNING: EXPERIMENTAL: added ``finally`` alias for ``fin``, ``catch``\n   alias for ``fail``, ``try`` alias for ``call``, and ``delete`` alias\n   for ``del``.  These properties are enquoted in the library for\n   cross-browser compatibility, but may be used as property names in\n   modern engines.\n\n## 0.8.2\n\n - Deprecated ``ref`` in favor of ``resolve`` as recommended by\n   @domenic.\n - Update event-queue dependency.\n\n## 0.8.1\n\n - Fixed Opera bug. #35 @cadorn\n - Fixed ``Q.all([])`` #32 @domenic\n\n## 0.8.0\n\n - WARNING: ``enqueue`` removed.  Use ``nextTick`` instead.\n   This is more consistent with NodeJS and (subjectively)\n   more explicit and intuitive.\n - WARNING: ``def`` removed.  Use ``master`` instead.  The\n   term ``def`` was too confusing to new users.\n - WARNING: ``spy`` removed in favor of ``fin``.\n - WARNING: ``wait`` removed. Do ``all(args).get(0)`` instead.\n - WARNING: ``join`` removed. Do ``all(args).spread(callback)`` instead.\n - WARNING: Removed the ``Q`` function module.exports alias\n   for ``Q.ref``. It conflicts with ``Q.apply`` in weird\n   ways, making it uncallable.\n - Revised ``delay`` so that it accepts both ``(value,\n   timeout)`` and ``(timeout)`` variations based on\n   arguments length.\n - Added ``ref().spread(cb(...args))``, a variant of\n   ``then`` that spreads an array across multiple arguments.\n   Useful with ``all()``.\n - Added ``defer().node()`` Node callback generator.  The\n   callback accepts ``(error, value)`` or ``(error,\n   ...values)``.  For multiple value arguments, the\n   fulfillment value is an array, useful in conjunction with\n   ``spread``.\n - Added ``node`` and ``ncall``, both with the signature\n   ``(fun, thisp_opt, ...args)``.  The former is a decorator\n   and the latter calls immediately.  ``node`` optional\n   binds and partially applies.  ``ncall`` can bind and pass\n   arguments.\n\n## 0.7.2\n\n - Fixed thenable promise assimilation.\n\n## 0.7.1\n\n - Stopped shimming ``Array.prototype.reduce``. The\n   enumerable property has bad side-effects.  Libraries that\n   depend on this (for example, QQ) will need to be revised.\n\n## 0.7.0 - BACKWARD INCOMPATIBILITY\n\n - WARNING: Removed ``report`` and ``asap``\n - WARNING: The ``callback`` argument of the ``fin``\n   function no longer receives any arguments. Thus, it can\n   be used to call functions that should not receive\n   arguments on resolution.  Use ``when``, ``then``, or\n   ``fail`` if you need a value.\n - IMPORTANT: Fixed a bug in the use of ``MessageChannel``\n   for ``nextTick``.\n - Renamed ``enqueue`` to ``nextTick``.\n - Added experimental ``view`` and ``viewInfo`` for creating\n   views of promises either when or before they're\n   fulfilled.\n - Shims are now externally applied so subsequent scripts or\n   dependees can use them.\n - Improved minification results.\n - Improved readability.\n\n## 0.6.0 - BACKWARD INCOMPATIBILITY\n\n - WARNING: In practice, the implementation of ``spy`` and\n   the name ``fin`` were useful.  I've removed the old\n   ``fin`` implementation and renamed/aliased ``spy``.\n - The \"q\" module now exports its ``ref`` function as a \"Q\"\n   constructor, with module systems that support exports\n   assignment including NodeJS, RequireJS, and when used as\n   a ``<script>`` tag. Notably, strictly compliant CommonJS\n   does not support this, but UncommonJS does.\n - Added ``async`` decorator for generators that use yield\n   to \"trampoline\" promises. In engines that support\n   generators (SpiderMonkey), this will greatly reduce the\n   need for nested callbacks.\n - Made ``when`` chainable.\n - Made ``all`` chainable.\n\n## 0.5.3\n\n - Added ``all`` and refactored ``join`` and ``wait`` to use\n   it.  All of these will now reject at the earliest\n   rejection.\n\n## 0.5.2\n\n - Minor improvement to ``spy``; now waits for resolution of\n   callback promise.\n\n## 0.5.1\n\n - Made most Q API methods chainable on promise objects, and\n   turned the previous promise-methods of ``join``,\n   ``wait``, and ``report`` into Q API methods.\n - Added ``apply`` and ``call`` to the Q API, and ``apply``\n   as a promise handler.\n - Added ``fail``, ``fin``, and ``spy`` to Q and the promise\n   prototype for convenience when observing rejection,\n   fulfillment and rejection, or just observing without\n   affecting the resolution.\n - Renamed ``def`` (although ``def`` remains shimmed until\n   the next major release) to ``master``.\n - Switched to using ``MessageChannel`` for next tick task\n   enqueue in browsers that support it.\n\n## 0.5.0 - MINOR BACKWARD INCOMPATIBILITY\n\n - Exceptions are no longer reported when consumed.\n - Removed ``error`` from the API.  Since exceptions are\n   getting consumed, throwing them in an errback causes the\n   exception to silently disappear.  Use ``end``.\n - Added ``end`` as both an API method and a promise-chain\n   ending method.  It causes propagated rejections to be\n   thrown, which allows Node to write stack traces and\n   emit ``uncaughtException`` events, and browsers to\n   likewise emit ``onerror`` and log to the console.\n - Added ``join`` and ``wait`` as promise chain functions,\n   so you can wait for variadic promises, returning your own\n   promise back, or join variadic promises, resolving with a\n   callback that receives variadic fulfillment values.\n\n## 0.4.4\n\n - ``end`` no longer returns a promise. It is the end of the\n   promise chain.\n - Stopped reporting thrown exceptions in ``when`` callbacks\n   and errbacks.  These must be explicitly reported through\n   ``.end()``, ``.then(null, Q.error)``, or some other\n   mechanism.\n - Added ``report`` as an API method, which can be used as\n   an errback to report and propagate an error.\n - Added ``report`` as a promise-chain method, so an error\n   can be reported if it passes such a gate.\n\n## 0.4.3\n\n - Fixed ``<script>`` support that regressed with 0.4.2\n   because of \"use strict\" in the module system\n   multi-plexer.\n\n## 0.4.2\n\n - Added support for RequireJS (jburke)\n\n## 0.4.1\n\n - Added an \"end\" method to the promise prototype,\n   as a shorthand for waiting for the promise to\n   be resolved gracefully, and failing to do so,\n   to dump an error message.\n\n## 0.4.0 - BACKWARD INCOMPATIBLE*\n\n - *Removed the utility modules. NPM and Node no longer\n   expose any module except the main module.  These have\n   been moved and merged into the \"qq\" package.\n - *In a non-CommonJS browser, q.js can be used as a script.\n   It now creates a Q global variable.\n - Fixed thenable assimilation.\n - Fixed some issues with asap, when it resolves to\n   undefined, or throws an exception.\n\n## 0.3.0 - BACKWARD-INCOMPATIBLE\n\n - The `post` method has been reverted to its original\n   signature, as provided in Tyler Close's `ref_send` API.\n   That is, `post` accepts two arguments, the second of\n   which is an arbitrary object, but usually invocation\n   arguments as an `Array`.  To provide variadic arguments\n   to `post`, there is a new `invoke` function that posts\n   the variadic arguments to the value given in the first\n   argument.\n - The `defined` method has been moved from `q` to `q/util`\n   since it gets no use in practice but is still\n   theoretically useful.\n - The `Promise` constructor has been renamed to\n   `makePromise` to be consistent with the convention that\n   functions that do not require the `new` keyword to be\n   used as constructors have camelCase names.\n - The `isResolved` function has been renamed to\n   `isFulfilled`.  There is a new `isResolved` function that\n   indicates whether a value is not a promise or, if it is a\n   promise, whether it has been either fulfilled or\n   rejected.  The code has been revised to reflect this\n   nuance in terminology.\n\n## 0.2.10\n\n - Added `join` to `\"q/util\"` for variadically joining\n   multiple promises.\n\n## 0.2.9\n\n - The future-compatible `invoke` method has been added,\n   to replace `post`, since `post` will become backward-\n   incompatible in the next major release.\n - Exceptions thrown in the callbacks of a `when` call are\n   now emitted to Node's `\"uncaughtException\"` `process`\n   event in addition to being returned as a rejection reason.\n\n## 0.2.8\n\n - Exceptions thrown in the callbacks of a `when` call\n   are now consumed, warned, and transformed into\n   rejections of the promise returned by `when`.\n\n## 0.2.7\n\n - Fixed a minor bug in thenable assimilation, regressed\n   because of the change in the forwarding protocol.\n - Fixed behavior of \"q/util\" `deep` method on dates and\n   other primitives. Github issue #11.\n\n## 0.2.6\n\n - Thenables (objects with a \"then\" method) are accepted\n   and provided, bringing this implementation of Q\n   into conformance with Promises/A, B, and D.\n - Added `makePromise`, to replace the `Promise` function\n   eventually.\n - Rejections are now also duck-typed. A rejection is a\n   promise with a valueOf method that returns a rejection\n   descriptor. A rejection descriptor has a\n   \"promiseRejected\" property equal to \"true\" and a\n   \"reason\" property corresponding to the rejection reason.\n - Altered the `makePromise` API such that the `fallback`\n   method no longer receives a superfluous `resolved` method\n   after the `operator`.  The fallback method is responsible\n   only for returning a resolution.  This breaks an\n   undocumented API, so third-party API's depending on the\n   previous undocumented behavior may break.\n\n## 0.2.5\n\n - Changed promises into a duck-type such that multiple\n   instances of the Q module can exchange promise objects.\n   A promise is now defined as \"an object that implements the\n   `promiseSend(op, resolved, ...)` method and `valueOf`\".\n - Exceptions in promises are now captured and returned\n   as rejections.\n\n## 0.2.4\n\n - Fixed bug in `ref` that prevented `del` messages from\n   being received (gozala)\n - Fixed a conflict with FireFox 4; constructor property\n   is now read-only.\n\n## 0.2.3\n\n - Added `keys` message to promises and to the promise API.\n\n## 0.2.2\n\n - Added boilerplate to `q/queue` and `q/util`.\n - Fixed missing dependency to `q/queue`.\n\n## 0.2.1\n\n - The `resolve` and `reject` methods of `defer` objects now\n   return the resolution promise for convenience.\n - Added `q/util`, which provides `step`, `delay`, `shallow`,\n   `deep`, and three reduction orders.\n - Added `q/queue` module for a promise `Queue`.\n - Added `q-comm` to the list of compatible libraries.\n - Deprecated `defined` from `q`, with intent to move it to\n   `q/util`.\n\n## 0.2.0 - BACKWARD INCOMPATIBLE\n\n - Changed post(ref, name, args) to variadic\n   post(ref, name, ...args). BACKWARD INCOMPATIBLE\n - Added a def(value) method to annotate an object as being\n   necessarily a local value that cannot be serialized, such\n   that inter-process/worker/vat promise communication\n   libraries will send messages to it, but never send it\n   back.\n - Added a send(value, op, ...args) method to the public API, for\n   forwarding messages to a value or promise in a future turn.\n\n## 0.1.9\n\n - Added isRejected() for testing whether a value is a rejected\n   promise.  isResolved() retains the behavior of stating\n   that rejected promises are not resolved.\n\n## 0.1.8\n\n - Fixed isResolved(null) and isResolved(undefined) [issue #9]\n - Fixed a problem with the Object.create shim\n\n## 0.1.7\n\n - shimmed ES5 Object.create in addition to Object.freeze\n   for compatibility on non-ES5 engines (gozala)\n\n## 0.1.6\n\n - Q.isResolved added\n - promise.valueOf() now returns the value of resolved\n   and near values\n - asap retried\n - promises are frozen when possible\n\n## 0.1.5\n\n - fixed dependency list for Teleport (gozala)\n - all unit tests now pass (gozala)\n\n## 0.1.4\n\n - added support for Teleport as an engine (gozala)\n - simplified and updated methods for getting internal\n   print and enqueue functions universally (gozala)\n\n## 0.1.3\n\n - fixed erroneous link to the q module in package.json\n\n## 0.1.2\n\n - restructured for overlay style package compatibility\n\n## 0.1.0\n\n - removed asap because it was broken, probably down to the\n   philosophy.\n\n## 0.0.3\n\n - removed q-util\n - fixed asap so it returns a value if completed\n\n## 0.0.2\n\n - added q-util\n\n## 0.0.1\n\n - initial version",
      "metadata": {}
    },
    "changelog": {
      "reference": "changelog",
      "route": "changelog",
      "sourcePath": "react-json-blinkforms\\node_modules\\vfile\\changelog.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"changelog\">Changelog</h1>\n<p>See <a href=\"https://github.com/vfile/vfile/releases\">GitHub Releases</a> for the changelog.</p>\n"
      ],
      "contentsRaw": "# Changelog\n\nSee [GitHub Releases][releases] for the changelog.\n\n[releases]: https://github.com/vfile/vfile/releases",
      "metadata": {}
    },
    "license": {
      "reference": "license",
      "route": "license",
      "sourcePath": "react-json-blinkforms\\node_modules\\ua-parser-js\\license.md",
      "title": "(untitled)",
      "contents": [
        "<p>MIT License</p>\n<p>Copyright (c) 2012-2019 Faisal Salman &lt;<a href=\"mailto:&#x66;&#x40;&#x66;&#97;&#x69;&#115;&#x61;&#x6c;&#x6d;&#97;&#110;&#46;&#x63;&#111;&#109;\">&#x66;&#x40;&#x66;&#97;&#x69;&#115;&#x61;&#x6c;&#x6d;&#97;&#110;&#46;&#x63;&#111;&#109;</a>&gt;</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n"
      ],
      "contentsRaw": "MIT License\n\nCopyright (c) 2012-2019 Faisal Salman <<f@faisalman.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "metadata": {}
    },
    "AUTHORS": {
      "reference": "AUTHORS",
      "route": "AUTHORS",
      "sourcePath": "react-json-blinkforms\\node_modules\\unbzip2-stream\\node_modules\\buffer\\AUTHORS.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"authors\">Authors</h1>\n<h4 id=\"ordered-by-first-contribution-\">Ordered by first contribution.</h4>\n<ul>\n<li>Romain Beauxis (<a href=\"mailto:toots@rastageeks.org\">toots@rastageeks.org</a>)</li>\n<li>Tobias Koppers (<a href=\"mailto:tobias.koppers@googlemail.com\">tobias.koppers@googlemail.com</a>)</li>\n<li>Janus (<a href=\"mailto:ysangkok@gmail.com\">ysangkok@gmail.com</a>)</li>\n<li>Rainer Dreyer (<a href=\"mailto:rdrey1@gmail.com\">rdrey1@gmail.com</a>)</li>\n<li>Tõnis Tiigi (<a href=\"mailto:tonistiigi@gmail.com\">tonistiigi@gmail.com</a>)</li>\n<li>James Halliday (<a href=\"mailto:mail@substack.net\">mail@substack.net</a>)</li>\n<li>Michael Williamson (<a href=\"mailto:mike@zwobble.org\">mike@zwobble.org</a>)</li>\n<li>elliottcable (<a href=\"mailto:github@elliottcable.name\">github@elliottcable.name</a>)</li>\n<li>rafael (<a href=\"mailto:rvalle@livelens.net\">rvalle@livelens.net</a>)</li>\n<li>Andrew Kelley (<a href=\"mailto:superjoe30@gmail.com\">superjoe30@gmail.com</a>)</li>\n<li>Andreas Madsen (<a href=\"mailto:amwebdk@gmail.com\">amwebdk@gmail.com</a>)</li>\n<li>Mike Brevoort (<a href=\"mailto:mike.brevoort@pearson.com\">mike.brevoort@pearson.com</a>)</li>\n<li>Brian White (<a href=\"mailto:mscdex@mscdex.net\">mscdex@mscdex.net</a>)</li>\n<li>Feross Aboukhadijeh (<a href=\"mailto:feross@feross.org\">feross@feross.org</a>)</li>\n<li>Ruben Verborgh (<a href=\"mailto:ruben@verborgh.org\">ruben@verborgh.org</a>)</li>\n<li>eliang (<a href=\"mailto:eliang.cs@gmail.com\">eliang.cs@gmail.com</a>)</li>\n<li>Jesse Tane (<a href=\"mailto:jesse.tane@gmail.com\">jesse.tane@gmail.com</a>)</li>\n<li>Alfonso Boza (<a href=\"mailto:alfonso@cloud.com\">alfonso@cloud.com</a>)</li>\n<li>Mathias Buus (<a href=\"mailto:mathiasbuus@gmail.com\">mathiasbuus@gmail.com</a>)</li>\n<li>Devon Govett (<a href=\"mailto:devongovett@gmail.com\">devongovett@gmail.com</a>)</li>\n<li>Daniel Cousens (<a href=\"mailto:github@dcousens.com\">github@dcousens.com</a>)</li>\n<li>Joseph Dykstra (<a href=\"mailto:josephdykstra@gmail.com\">josephdykstra@gmail.com</a>)</li>\n<li>Parsha Pourkhomami (<a href=\"mailto:parshap+git@gmail.com\">parshap+git@gmail.com</a>)</li>\n<li>Damjan Košir (<a href=\"mailto:damjan.kosir@gmail.com\">damjan.kosir@gmail.com</a>)</li>\n<li>daverayment (<a href=\"mailto:dave.rayment@gmail.com\">dave.rayment@gmail.com</a>)</li>\n<li>kawanet (<a href=\"mailto:u-suke@kawa.net\">u-suke@kawa.net</a>)</li>\n<li>Linus Unnebäck (<a href=\"mailto:linus@folkdatorn.se\">linus@folkdatorn.se</a>)</li>\n<li>Nolan Lawson (<a href=\"mailto:nolan.lawson@gmail.com\">nolan.lawson@gmail.com</a>)</li>\n<li>Calvin Metcalf (<a href=\"mailto:calvin.metcalf@gmail.com\">calvin.metcalf@gmail.com</a>)</li>\n<li>Koki Takahashi (<a href=\"mailto:hakatasiloving@gmail.com\">hakatasiloving@gmail.com</a>)</li>\n<li>Guy Bedford (<a href=\"mailto:guybedford@gmail.com\">guybedford@gmail.com</a>)</li>\n<li>Jan Schär (<a href=\"mailto:jscissr@gmail.com\">jscissr@gmail.com</a>)</li>\n<li>RaulTsc (<a href=\"mailto:tomescu.raul@gmail.com\">tomescu.raul@gmail.com</a>)</li>\n<li>Matthieu Monsch (<a href=\"mailto:monsch@alum.mit.edu\">monsch@alum.mit.edu</a>)</li>\n<li>Dan Ehrenberg (<a href=\"mailto:littledan@chromium.org\">littledan@chromium.org</a>)</li>\n<li>Kirill Fomichev (<a href=\"mailto:fanatid@ya.ru\">fanatid@ya.ru</a>)</li>\n<li>Yusuke Kawasaki (<a href=\"mailto:u-suke@kawa.net\">u-suke@kawa.net</a>)</li>\n<li>DC (<a href=\"mailto:dcposch@dcpos.ch\">dcposch@dcpos.ch</a>)</li>\n<li>John-David Dalton (<a href=\"mailto:john.david.dalton@gmail.com\">john.david.dalton@gmail.com</a>)</li>\n<li>adventure-yunfei (<a href=\"mailto:adventure030@gmail.com\">adventure030@gmail.com</a>)</li>\n<li>Emil Bay (<a href=\"mailto:github@tixz.dk\">github@tixz.dk</a>)</li>\n<li>Sam Sudar (<a href=\"mailto:sudar.sam@gmail.com\">sudar.sam@gmail.com</a>)</li>\n<li>Volker Mische (<a href=\"mailto:volker.mische@gmail.com\">volker.mische@gmail.com</a>)</li>\n<li>David Walton (<a href=\"mailto:support@geekstocks.com\">support@geekstocks.com</a>)</li>\n<li>Сковорода Никита Андреевич (<a href=\"mailto:chalkerx@gmail.com\">chalkerx@gmail.com</a>)</li>\n<li>greenkeeper[bot] (greenkeeper[bot]@users.noreply.github.com)</li>\n<li>ukstv (<a href=\"mailto:sergey.ukustov@machinomy.com\">sergey.ukustov@machinomy.com</a>)</li>\n<li>ranbochen (<a href=\"mailto:ranbochen@qq.com\">ranbochen@qq.com</a>)</li>\n<li>Vladimir Borovik (<a href=\"mailto:bobahbdb@gmail.com\">bobahbdb@gmail.com</a>)</li>\n</ul>\n<h4 id=\"generated-by-bin-update-authors-sh-\">Generated by bin/update-authors.sh.</h4>\n"
      ],
      "contentsRaw": "# Authors\n\n#### Ordered by first contribution.\n\n- Romain Beauxis (toots@rastageeks.org)\n- Tobias Koppers (tobias.koppers@googlemail.com)\n- Janus (ysangkok@gmail.com)\n- Rainer Dreyer (rdrey1@gmail.com)\n- Tõnis Tiigi (tonistiigi@gmail.com)\n- James Halliday (mail@substack.net)\n- Michael Williamson (mike@zwobble.org)\n- elliottcable (github@elliottcable.name)\n- rafael (rvalle@livelens.net)\n- Andrew Kelley (superjoe30@gmail.com)\n- Andreas Madsen (amwebdk@gmail.com)\n- Mike Brevoort (mike.brevoort@pearson.com)\n- Brian White (mscdex@mscdex.net)\n- Feross Aboukhadijeh (feross@feross.org)\n- Ruben Verborgh (ruben@verborgh.org)\n- eliang (eliang.cs@gmail.com)\n- Jesse Tane (jesse.tane@gmail.com)\n- Alfonso Boza (alfonso@cloud.com)\n- Mathias Buus (mathiasbuus@gmail.com)\n- Devon Govett (devongovett@gmail.com)\n- Daniel Cousens (github@dcousens.com)\n- Joseph Dykstra (josephdykstra@gmail.com)\n- Parsha Pourkhomami (parshap+git@gmail.com)\n- Damjan Košir (damjan.kosir@gmail.com)\n- daverayment (dave.rayment@gmail.com)\n- kawanet (u-suke@kawa.net)\n- Linus Unnebäck (linus@folkdatorn.se)\n- Nolan Lawson (nolan.lawson@gmail.com)\n- Calvin Metcalf (calvin.metcalf@gmail.com)\n- Koki Takahashi (hakatasiloving@gmail.com)\n- Guy Bedford (guybedford@gmail.com)\n- Jan Schär (jscissr@gmail.com)\n- RaulTsc (tomescu.raul@gmail.com)\n- Matthieu Monsch (monsch@alum.mit.edu)\n- Dan Ehrenberg (littledan@chromium.org)\n- Kirill Fomichev (fanatid@ya.ru)\n- Yusuke Kawasaki (u-suke@kawa.net)\n- DC (dcposch@dcpos.ch)\n- John-David Dalton (john.david.dalton@gmail.com)\n- adventure-yunfei (adventure030@gmail.com)\n- Emil Bay (github@tixz.dk)\n- Sam Sudar (sudar.sam@gmail.com)\n- Volker Mische (volker.mische@gmail.com)\n- David Walton (support@geekstocks.com)\n- Сковорода Никита Андреевич (chalkerx@gmail.com)\n- greenkeeper[bot] (greenkeeper[bot]@users.noreply.github.com)\n- ukstv (sergey.ukustov@machinomy.com)\n- ranbochen (ranbochen@qq.com)\n- Vladimir Borovik (bobahbdb@gmail.com)\n\n#### Generated by bin/update-authors.sh.",
      "metadata": {}
    },
    "Readme": {
      "reference": "Readme",
      "route": "Readme",
      "sourcePath": "react-json-blinkforms\\node_modules\\uglify-js\\node_modules\\commander\\Readme.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"commander-js\">Commander.js</h1>\n<p><a href=\"http://travis-ci.org/tj/commander.js\"><img src=\"https://api.travis-ci.org/tj/commander.js.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://www.npmjs.org/package/commander\"><img src=\"http://img.shields.io/npm/v/commander.svg?style=flat\" alt=\"NPM Version\"></a>\n<a href=\"https://npmcharts.com/compare/commander?minimal=true\"><img src=\"https://img.shields.io/npm/dm/commander.svg?style=flat\" alt=\"NPM Downloads\"></a>\n<a href=\"https://packagephobia.now.sh/result?p=commander\"><img src=\"https://packagephobia.now.sh/badge?p=commander\" alt=\"Install Size\"></a>\n<a href=\"https://gitter.im/tj/commander.js?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/tj/commander.js\"></a></p>\n<p>  The complete solution for <a href=\"http://nodejs.org\">node.js</a> command-line interfaces, inspired by Ruby&#39;s <a href=\"https://github.com/commander-rb/commander\">commander</a>.<br>  <a href=\"http://tj.github.com/commander.js/\">API documentation</a></p>\n<h2 id=\"installation\">Installation</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>npm</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>install</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>commander</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>save</span></span></span></div></pre><h2 id=\"option-parsing\">Option parsing</h2>\n<p>Options with commander are defined with the <code>.option()</code> method, also serving as documentation for the options. The example below parses args and options from <code>process.argv</code>, leaving remaining args as the <code>program.args</code> array which were not consumed by options.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span class=\"punctuation definition comment js\"><span>/**</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;*&nbsp;Module&nbsp;dependencies.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;</span><span class=\"punctuation definition comment js\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-p,&nbsp;--peppers</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Add&nbsp;peppers</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-P,&nbsp;--pineapple</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Add&nbsp;pineapple</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-b,&nbsp;--bbq-sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Add&nbsp;bbq&nbsp;sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-c,&nbsp;--cheese&nbsp;[type]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Add&nbsp;the&nbsp;specified&nbsp;type&nbsp;of&nbsp;cheese&nbsp;[marble]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>marble</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>you&nbsp;ordered&nbsp;a&nbsp;pizza&nbsp;with:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>peppers</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;-&nbsp;peppers</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>pineapple</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;-&nbsp;pineapple</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>bbqSauce</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;-&nbsp;bbq</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;-&nbsp;%s&nbsp;cheese</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>cheese</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Short flags may be passed as a single arg, for example <code>-abc</code> is equivalent to <code>-a -b -c</code>. Multi-word options such as &quot;--template-engine&quot; are camel-cased, becoming <code>program.templateEngine</code> etc.</p>\n<p>Note that multi-word options starting with <code>--no</code> prefix negate the boolean value of the following word. For example, <code>--no-sauce</code> sets the value of <code>program.sauce</code> to false.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span class=\"punctuation definition comment js\"><span>/**</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;*&nbsp;Module&nbsp;dependencies.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;</span><span class=\"punctuation definition comment js\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--no-sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Remove&nbsp;sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>you&nbsp;ordered&nbsp;a&nbsp;pizza</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>sauce</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;with&nbsp;sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>else</span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;without&nbsp;sauce</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"version-option\">Version option</h2>\n<p>Calling the <code>version</code> implicitly adds the <code>-V</code> and <code>--version</code> options to the command.\nWhen either of these options is present, the command prints the version number and exits.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other readwrite tsx\"><span>examples</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other readwrite tsx\"><span>pizza</span></span><span>&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other constant tsx\"><span>V</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"constant numeric decimal tsx\"><span>0</span><span class=\"meta delimiter decimal period tsx\"><span>.</span></span><span>0</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"constant numeric decimal tsx\"><span>1</span></span></span></div></pre><p>If you want your program to respond to the <code>-v</code> option instead of the <code>-V</code> option, simply pass custom flags to the <code>version</code> method using the same syntax as the <code>option</code> method.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.0.1</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-v,&nbsp;--version</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div></pre><p>The version flags can be named anything, but the long option is required.</p>\n<h2 id=\"command-specific-options\">Command-specific options</h2>\n<p>You can attach options to a command.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>rm&nbsp;&lt;dir&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-r,&nbsp;--recursive</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Remove&nbsp;recursively</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>dir</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>cmd</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>remove&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;dir&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>cmd</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>recursive</span></span><span>&nbsp;</span><span class=\"keyword operator ternary js\"><span>?</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;recursively</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator ternary js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><p>A command&#39;s options are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.</p>\n<h2 id=\"coercion\">Coercion</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>range</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>val</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>val</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>split</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>..</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>map</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>Number</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>list</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>val</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>val</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>split</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>,</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>collect</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>val</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>memo</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>memo</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>val</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;memo</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>increaseVerbosity</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>v</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>total</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;total&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>usage</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>[options]&nbsp;&lt;file&nbsp;...&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-i,&nbsp;--integer&nbsp;&lt;n&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>An&nbsp;integer&nbsp;argument</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;parseInt</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-f,&nbsp;--float&nbsp;&lt;n&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>A&nbsp;float&nbsp;argument</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;parseFloat</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-r,&nbsp;--range&nbsp;&lt;a&gt;..&lt;b&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>A&nbsp;range</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;range</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-l,&nbsp;--list&nbsp;&lt;items&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>A&nbsp;list</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;list</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-o,&nbsp;--optional&nbsp;[value]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>An&nbsp;optional&nbsp;value</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-c,&nbsp;--collect&nbsp;[value]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>A&nbsp;repeatable&nbsp;value</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;collect</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-v,&nbsp;--verbose</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>A&nbsp;value&nbsp;that&nbsp;can&nbsp;be&nbsp;increased</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;increaseVerbosity</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;int:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>integer</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;float:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>float</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;optional:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>optional</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>range</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>range</span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>||</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;range:&nbsp;%j..%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>range</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>range</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;list:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>list</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;collect:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>collect</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;verbosity:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>verbose</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;args:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>args</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"regular-expression\">Regular Expression</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-s&nbsp;--size&nbsp;&lt;size&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Pizza&nbsp;size</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"string regexp js\"><span>&nbsp;</span><span class=\"punctuation definition string begin js\"><span>/</span></span><span class=\"keyword control anchor regexp\"><span>^</span></span><span class=\"meta group regexp\"><span class=\"punctuation definition group regexp\"><span>(</span></span><span>large</span><span class=\"keyword operator or regexp\"><span>|</span></span><span>medium</span><span class=\"keyword operator or regexp\"><span>|</span></span><span>small</span><span class=\"punctuation definition group regexp\"><span>)</span></span></span><span class=\"keyword control anchor regexp\"><span>$</span></span><span class=\"punctuation definition string end js\"><span>/</span></span><span>i</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>medium</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-d&nbsp;--drink&nbsp;[drink]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Drink</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"string regexp js\"><span>&nbsp;</span><span class=\"punctuation definition string begin js\"><span>/</span></span><span class=\"keyword control anchor regexp\"><span>^</span></span><span class=\"meta group regexp\"><span class=\"punctuation definition group regexp\"><span>(</span></span><span>coke</span><span class=\"keyword operator or regexp\"><span>|</span></span><span>pepsi</span><span class=\"keyword operator or regexp\"><span>|</span></span><span>izze</span><span class=\"punctuation definition group regexp\"><span>)</span></span></span><span class=\"keyword control anchor regexp\"><span>$</span></span><span class=\"punctuation definition string end js\"><span>/</span></span><span>i</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;size:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>size</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;drink:&nbsp;%j</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>drink</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"variadic-arguments\">Variadic arguments</h2>\n<p> The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append <code>...</code> to the argument name.  Here is an example:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span class=\"punctuation definition comment js\"><span>/**</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;*&nbsp;Module&nbsp;dependencies.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;</span><span class=\"punctuation definition comment js\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>rmdir&nbsp;&lt;dir&gt;&nbsp;[otherDirs...]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>dir</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>otherDirs</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>rmdir&nbsp;%s</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;dir</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span>otherDirs</span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>otherDirs</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>forEach</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>oDir</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>rmdir&nbsp;%s</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;oDir</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p> An <code>Array</code> is used for the value of a variadic argument.  This applies to <code>program.args</code> as well as the argument passed\n to your action as demonstrated above.</p>\n<h2 id=\"specify-the-argument-syntax\">Specify the argument syntax</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>arguments</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&lt;cmd&gt;&nbsp;[env]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>cmd</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>env</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmdValue&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;cmd</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;envValue&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;env</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"keyword operator typeof js\"><span>typeof</span></span><span>&nbsp;cmdValue&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>undefined</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>no&nbsp;command&nbsp;given!</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"support variable js\"><span>process</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>exit</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>command:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;cmdValue</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>environment:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;envValue&nbsp;</span><span class=\"keyword operator logical js\"><span>||</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>no&nbsp;environment&nbsp;given</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Angled brackets (e.g. <code>&lt;cmd&gt;</code>) indicate required input. Square brackets (e.g. <code>[env]</code>) indicate optional input.</p>\n<h2 id=\"git-style-sub-commands\">Git-style sub-commands</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;file:&nbsp;./examples/pm</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>install&nbsp;[name]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>install&nbsp;one&nbsp;or&nbsp;more&nbsp;packages</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search&nbsp;[query]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search&nbsp;with&nbsp;optional&nbsp;query</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>list</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>list&nbsp;packages&nbsp;installed</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>isDefault</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>When <code>.command()</code> is invoked with a description argument, no <code>.action(callback)</code> should be called to handle sub-commands, otherwise there will be an error. This tells commander that you&#39;re going to use separate executables for sub-commands, much like <code>git(1)</code> and other popular tools.<br>The commander will try to search the executables in the directory of the entry script (like <code>./examples/pm</code>) with the name <code>program-command</code>, like <code>pm-install</code>, <code>pm-search</code>.</p>\n<p>Options can be passed with the call to <code>.command()</code>. Specifying <code>true</code> for <code>opts.noHelp</code> will remove the subcommand from the generated help output. Specifying <code>true</code> for <code>opts.isDefault</code> will run the subcommand if no other subcommand is specified.</p>\n<p>If the program is designed to be installed globally, make sure the executables have proper modes, like <code>755</code>.</p>\n<h3 id=\"-harmony\"><code>--harmony</code></h3>\n<p>You can enable <code>--harmony</code> option in two ways:</p>\n<ul>\n<li>Use <code>#! /usr/bin/env node --harmony</code> in the sub-commands scripts. Note some os version don’t support this pattern.</li>\n<li>Use the <code>--harmony</code> option when call the command, like <code>node --harmony examples/pm publish</code>. The <code>--harmony</code> option will be preserved when spawning sub-command process.</li>\n</ul>\n<h2 id=\"automated-help\">Automated --help</h2>\n<p> The help information is auto-generated based on the information commander already knows about your program, so the following <code>--help</code> info is for free:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other readwrite tsx\"><span>examples</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other readwrite tsx\"><span>pizza</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Usage</span></span><span>:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>pizza</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other readwrite tsx\"><span>options</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>An</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>application</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>for</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>pizzas</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>ordering</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Options</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>h</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>output</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>usage</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>information</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other constant tsx\"><span>V</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>output</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>number</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>p</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>peppers</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Add</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>peppers</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other constant tsx\"><span>P</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>pineapple</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Add</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>pineapple</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>b</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>bbq</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Add</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>bbq</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>sauce</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>c</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>cheese</span></span><span>&nbsp;</span><span class=\"keyword operator relational tsx\"><span>&lt;</span></span><span class=\"variable other readwrite tsx\"><span>type</span></span><span class=\"keyword operator relational tsx\"><span>&gt;</span></span><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Add</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>specified</span></span><span>&nbsp;</span><span class=\"meta type declaration tsx\"><span class=\"storage type type tsx\"><span>type</span></span><span>&nbsp;</span><span class=\"entity name type alias tsx\"><span>of</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>cheese</span></span><span>&nbsp;</span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"entity name type tsx\"><span>marble</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span>&nbsp;&nbsp;-</span><span class=\"entity name type tsx\"><span>C</span></span><span>,&nbsp;--</span><span class=\"entity name type tsx\"><span>no</span></span><span>-</span><span class=\"entity name type tsx\"><span>cheese</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type tsx\"><span>You</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>do</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>not</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>want</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>any</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>cheese</span></span></span></span></div></pre><h2 id=\"custom-help\">Custom help</h2>\n<p> You can display arbitrary <code>-h, --help</code> information\n by listening for &quot;--help&quot;. Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable &quot;stuff&quot; will not output when\n <code>--help</code> is used.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line shebang js\"><span>#!/usr/bin/env&nbsp;node</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span class=\"punctuation definition comment js\"><span>/**</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;*&nbsp;Module&nbsp;dependencies.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment block documentation js\"><span>&nbsp;</span><span class=\"punctuation definition comment js\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-f,&nbsp;--foo</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>enable&nbsp;some&nbsp;foo</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-b,&nbsp;--bar</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>enable&nbsp;some&nbsp;bar</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-B,&nbsp;--baz</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>enable&nbsp;some&nbsp;baz</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;must&nbsp;be&nbsp;before&nbsp;.parse()&nbsp;since</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;node&#39;s&nbsp;emit()&nbsp;is&nbsp;immediate</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>on</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--help</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Examples:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;$&nbsp;custom-help&nbsp;--help</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;$&nbsp;custom-help&nbsp;-h</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>stuff</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Yields the following help output when <code>node script-name.js -h</code> or <code>node script-name.js --help</code> are run:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Usage</span></span><span>:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>custom</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other readwrite tsx\"><span>options</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Options</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>h</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>output</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>usage</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>information</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other constant tsx\"><span>V</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>output</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>number</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>f</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>foo</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>enable</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>some</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>foo</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>b</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>bar</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>enable</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>some</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>bar</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other constant tsx\"><span>B</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>baz</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>enable</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>some</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>baz</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Examples</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>custom</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>$</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>custom</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>h</span></span></span></div></pre><h2 id=\"-outputhelp-cb-\">.outputHelp(cb)</h2>\n<p>Output help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.</p>\n<p>If you want to display help by default (e.g. if no command was provided), you can use something like:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;colors&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>colors</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>getstream&nbsp;[url]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>get&nbsp;stream&nbsp;URL</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"keyword operator logical js\"><span>!</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>argv</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>slice</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>2</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>outputHelp</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>make_red</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>make_red</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>txt</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>colors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>red</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>txt</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>display&nbsp;the&nbsp;help&nbsp;text&nbsp;in&nbsp;red&nbsp;on&nbsp;the&nbsp;console</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div></pre><h2 id=\"-help-cb-\">.help(cb)</h2>\n<p>  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.</p>\n<h2 id=\"custom-event-listeners\">Custom event listeners</h2>\n<p> You can execute custom actions by listening to command and option events.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>on</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>option:verbose</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>env</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"constant other property js\"><span>VERBOSE</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>verbose</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;error&nbsp;on&nbsp;unknown&nbsp;commands</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>on</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>command:*</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Invalid&nbsp;command:&nbsp;%s</span><span class=\"constant character escape js\"><span>\\n</span></span><span>See&nbsp;--help&nbsp;for&nbsp;a&nbsp;list&nbsp;of&nbsp;available&nbsp;commands.</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>program</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>args</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>join</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"support variable js\"><span>process</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>exit</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"examples\">Examples</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;program&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>commander</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>version</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>0.1.0</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-C,&nbsp;--chdir&nbsp;&lt;path&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>change&nbsp;the&nbsp;working&nbsp;directory</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-c,&nbsp;--config&nbsp;&lt;path&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>set&nbsp;config&nbsp;path.&nbsp;defaults&nbsp;to&nbsp;./deploy.conf</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-T,&nbsp;--no-tests</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>ignore&nbsp;test&nbsp;hook</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>setup&nbsp;[env]</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>description</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>run&nbsp;setup&nbsp;commands&nbsp;for&nbsp;all&nbsp;envs</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>-s,&nbsp;--setup_mode&nbsp;[mode]</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Which&nbsp;setup&nbsp;mode&nbsp;to&nbsp;use</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>env</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>options</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;mode&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>options</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>setup_mode</span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>||</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>normal</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;env&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;env&nbsp;</span><span class=\"keyword operator logical js\"><span>||</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>all</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>setup&nbsp;for&nbsp;%s&nbsp;env(s)&nbsp;with&nbsp;%s&nbsp;mode</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;env</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;mode</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>exec&nbsp;&lt;cmd&gt;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>alias</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>ex</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>description</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>execute&nbsp;the&nbsp;given&nbsp;remote&nbsp;cmd</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>option</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>-e,&nbsp;--exec_mode&nbsp;&lt;mode&gt;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Which&nbsp;exec&nbsp;mode&nbsp;to&nbsp;use</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>cmd</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>options</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>exec&nbsp;&quot;%s&quot;&nbsp;using&nbsp;%s&nbsp;mode</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;cmd</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>options</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>exec_mode</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>on</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--help</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Examples:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;$&nbsp;deploy&nbsp;exec&nbsp;sequential</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;$&nbsp;deploy&nbsp;exec&nbsp;async</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>program</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>command</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>*</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>action</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>env</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>deploying&nbsp;&quot;%s&quot;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;env</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>program</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>argv</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>More Demos can be found in the <a href=\"https://github.com/tj/commander.js/tree/master/examples\">examples</a> directory.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT</p>\n"
      ],
      "contentsRaw": "# Commander.js\n\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n[![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).  \n  [API documentation](http://tj.github.com/commander.js/)\n\n\n## Installation\n\n    $ npm install commander --save\n\n## Option parsing\n\nOptions with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza with:');\nif (program.peppers) console.log('  - peppers');\nif (program.pineapple) console.log('  - pineapple');\nif (program.bbqSauce) console.log('  - bbq');\nconsole.log('  - %s cheese', program.cheese);\n```\n\nShort flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc.\n\nNote that multi-word options starting with `--no` prefix negate the boolean value of the following word. For example, `--no-sauce` sets the value of `program.sauce` to false.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza');\nif (program.sauce) console.log('  with sauce');\nelse console.log(' without sauce');\n```\n\n## Version option\n\nCalling the `version` implicitly adds the `-V` and `--version` options to the command.\nWhen either of these options is present, the command prints the version number and exits.\n\n    $ ./examples/pizza -V\n    0.0.1\n\nIf you want your program to respond to the `-v` option instead of the `-V` option, simply pass custom flags to the `version` method using the same syntax as the `option` method.\n\n```js\nprogram\n  .version('0.0.1', '-v, --version')\n```\n\nThe version flags can be named anything, but the long option is required.\n\n## Command-specific options\n\nYou can attach options to a command.\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmd) {\n    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split('..').map(Number);\n}\n\nfunction list(val) {\n  return val.split(',');\n}\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction increaseVerbosity(v, total) {\n  return total + 1;\n}\n\nprogram\n  .version('0.1.0')\n  .usage('[options] <file ...>')\n  .option('-i, --integer <n>', 'An integer argument', parseInt)\n  .option('-f, --float <n>', 'A float argument', parseFloat)\n  .option('-r, --range <a>..<b>', 'A range', range)\n  .option('-l, --list <items>', 'A list', list)\n  .option('-o, --optional [value]', 'An optional value')\n  .option('-c, --collect [value]', 'A repeatable value', collect, [])\n  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n  .parse(process.argv);\n\nconsole.log(' int: %j', program.integer);\nconsole.log(' float: %j', program.float);\nconsole.log(' optional: %j', program.optional);\nprogram.range = program.range || [];\nconsole.log(' range: %j..%j', program.range[0], program.range[1]);\nconsole.log(' list: %j', program.list);\nconsole.log(' collect: %j', program.collect);\nconsole.log(' verbosity: %j', program.verbose);\nconsole.log(' args: %j', program.args);\n```\n\n## Regular Expression\n```js\nprogram\n  .version('0.1.0')\n  .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n  .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)\n  .parse(process.argv);\n\nconsole.log(' size: %j', program.size);\nconsole.log(' drink: %j', program.drink);\n```\n\n## Variadic arguments\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append `...` to the argument name.  Here is an example:\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\n An `Array` is used for the value of a variadic argument.  This applies to `program.args` as well as the argument passed\n to your action as demonstrated above.\n\n## Specify the argument syntax\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n     cmdValue = cmd;\n     envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n   console.error('no command given!');\n   process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\nAngled brackets (e.g. `<cmd>`) indicate required input. Square brackets (e.g. `[env]`) indicate optional input.\n\n## Git-style sub-commands\n\n```js\n// file: ./examples/pm\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nWhen `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.  \nThe commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`.\n\nOptions can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the subcommand from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### `--harmony`\n\nYou can enable `--harmony` option in two ways:\n* Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern.\n* Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -h, --help           output usage information\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese [marble]\n  -C, --no-cheese      You do not want any cheese\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\nUsage: custom-help [options]\n\nOptions:\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n## .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nvar program = require('commander');\nvar colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n## .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n\n## Custom event listeners\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n```\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\nMIT",
      "metadata": {}
    },
    "README.es": {
      "reference": "README.es",
      "route": "README.es",
      "sourcePath": "react-json-blinkforms\\node_modules\\cacache\\README.es.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"cacache-npm-version-license-travis-appveyor-coverage-status\">cacache <a href=\"https://npm.im/cacache\"><img src=\"https://img.shields.io/npm/v/cacache.svg\" alt=\"npm version\"></a> <a href=\"https://npm.im/cacache\"><img src=\"https://img.shields.io/npm/l/cacache.svg\" alt=\"license\"></a> <a href=\"https://travis-ci.org/zkat/cacache\"><img src=\"https://img.shields.io/travis/zkat/cacache.svg\" alt=\"Travis\"></a> <a href=\"https://ci.appveyor.com/project/zkat/cacache\"><img src=\"https://ci.appveyor.com/api/projects/status/github/zkat/cacache?svg=true\" alt=\"AppVeyor\"></a> <a href=\"https://coveralls.io/github/zkat/cacache?branch=latest\"><img src=\"https://coveralls.io/repos/github/zkat/cacache/badge.svg?branch=latest\" alt=\"Coverage Status\"></a></h1>\n<p><a href=\"https://github.com/zkat/cacache\"><code>cacache</code></a> es una librería de Node.js para\nmanejar caches locales en disco, con acceso tanto con claves únicas como\ndirecciones de contenido (hashes/hacheos). Es súper rápida, excelente con el\nacceso concurrente, y jamás te dará datos incorrectos, aún si se corrompen o\nmanipulan directamente los ficheros del cache.</p>\n<p>El propósito original era reemplazar el caché local de\n<a href=\"https://npm.im/npm\">npm</a>, pero se puede usar por su propia cuenta.</p>\n<p><em>Traducciones: <a href=\"README.md\">English</a></em></p>\n<h2 id=\"instalaci-n\">Instalación</h2>\n<p><code>$ npm install --save cacache</code></p>\n<h2 id=\"-ndice\">Índice</h2>\n<ul>\n<li><a href=\"#ejemplo\">Ejemplo</a></li>\n<li><a href=\"#características\">Características</a></li>\n<li><a href=\"#cómo-contribuir\">Cómo Contribuir</a></li>\n<li><a href=\"#api\">API</a><ul>\n<li><a href=\"#localized-api\">Usando el API en español</a></li>\n<li>Leer<ul>\n<li><a href=\"#ls\"><code>ls</code></a></li>\n<li><a href=\"#ls-stream\"><code>ls.flujo</code></a></li>\n<li><a href=\"#get-data\"><code>saca</code></a></li>\n<li><a href=\"#get-stream\"><code>saca.flujo</code></a></li>\n<li><a href=\"#get-info\"><code>saca.info</code></a></li>\n<li><a href=\"#get-hasContent\"><code>saca.tieneDatos</code></a></li>\n</ul>\n</li>\n<li>Escribir<ul>\n<li><a href=\"#put-data\"><code>mete</code></a></li>\n<li><a href=\"#put-stream\"><code>mete.flujo</code></a></li>\n<li><a href=\"#put-options\">opciones para <code>mete*</code></a></li>\n<li><a href=\"#rm-all\"><code>rm.todo</code></a></li>\n<li><a href=\"#rm-entry\"><code>rm.entrada</code></a></li>\n<li><a href=\"#rm-content\"><code>rm.datos</code></a></li>\n</ul>\n</li>\n<li>Utilidades<ul>\n<li><a href=\"#set-locale\"><code>ponLenguaje</code></a></li>\n<li><a href=\"#clear-memoized\"><code>limpiaMemoizado</code></a></li>\n<li><a href=\"#tmp-mkdir\"><code>tmp.hazdir</code></a></li>\n<li><a href=\"#with-tmp\"><code>tmp.conTmp</code></a></li>\n</ul>\n</li>\n<li>Integridad<ul>\n<li><a href=\"#integrity\">Subresource Integrity</a></li>\n<li><a href=\"#verify\"><code>verifica</code></a></li>\n<li><a href=\"#verify-last-run\"><code>verifica.ultimaVez</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ejemplo\">Ejemplo</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;cacache&nbsp;=&nbsp;require(&#39;cacache/es&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;fs&nbsp;=&nbsp;require(&#39;fs&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;tarbol&nbsp;=&nbsp;&#39;/ruta/a/mi-tar.tgz&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;rutaCache&nbsp;=&nbsp;&#39;/tmp/my-toy-cache&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;clave&nbsp;=&nbsp;&#39;mi-clave-única-1234&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;¡Añádelo&nbsp;al&nbsp;caché!&nbsp;Usa&nbsp;`rutaCache`&nbsp;como&nbsp;raíz&nbsp;del&nbsp;caché.</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.mete(rutaCache,&nbsp;clave,&nbsp;&#39;10293801983029384&#39;).then(integrity&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(`Saved&nbsp;content&nbsp;to&nbsp;${rutaCache}.`)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;destino&nbsp;=&nbsp;&#39;/tmp/mytar.tgz&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Copia&nbsp;el&nbsp;contenido&nbsp;del&nbsp;caché&nbsp;a&nbsp;otro&nbsp;fichero,&nbsp;pero&nbsp;esta&nbsp;vez&nbsp;con&nbsp;flujos.</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.saca.flujo(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;rutaCache,&nbsp;clave</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).pipe(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;fs.createWriteStream(destino)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).on(&#39;finish&#39;,&nbsp;()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;extracción&nbsp;completada&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;La&nbsp;misma&nbsp;cosa,&nbsp;pero&nbsp;accesando&nbsp;el&nbsp;contenido&nbsp;directamente,&nbsp;sin&nbsp;tocar&nbsp;el&nbsp;índice.</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.saca.porHacheo(rutaCache,&nbsp;integridad).then(datos&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;fs.writeFile(destino,&nbsp;datos,&nbsp;err&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;datos&nbsp;del&nbsp;tarbol&nbsp;sacados&nbsp;basado&nbsp;en&nbsp;su&nbsp;sha512,&nbsp;y&nbsp;escrito&nbsp;a&nbsp;otro&nbsp;fichero&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;})</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h3 id=\"caracter-sticas\">Características</h3>\n<ul>\n<li>Extracción por clave o por dirección de contenido (shasum, etc)</li>\n<li>Usa el estándard de web, <a href=\"#integrity\">Subresource Integrity</a></li>\n<li>Compatible con multiples algoritmos - usa sha1, sha512, etc, en el mismo caché sin problema</li>\n<li>Entradas con contenido idéntico comparten ficheros</li>\n<li>Tolerancia de fallas (inmune a corrupción, ficheros parciales, carreras de proceso, etc)</li>\n<li>Verificación completa de datos cuando (escribiendo y leyendo)</li>\n<li>Concurrencia rápida, segura y &quot;lockless&quot;</li>\n<li>Compatible con <code>stream</code>s (flujos)</li>\n<li>Compatible con <code>Promise</code>s (promesas)</li>\n<li>Bastante rápida -- acceso, incluyendo verificación, en microsegundos</li>\n<li>Almacenaje de metadatos arbitrarios</li>\n<li>Colección de basura y verificación adicional fuera de banda</li>\n<li>Cobertura rigurosa de pruebas</li>\n<li>Probablente hay un &quot;Bloom filter&quot; por ahí en algún lado. Eso le mola a la gente, ¿Verdad? 🤔</li>\n</ul>\n<h3 id=\"c-mo-contribuir\">Cómo Contribuir</h3>\n<p>El equipo de cacache felizmente acepta contribuciones de código y otras maneras de participación. ¡Hay muchas formas diferentes de contribuir! La <a href=\"CONTRIBUTING.md\">Guía de Colaboradores</a> (en inglés) tiene toda la información que necesitas para cualquier tipo de contribución: todo desde cómo reportar errores hasta cómo someter parches con nuevas características. Con todo y eso, no se preocupe por si lo que haces está exáctamente correcto: no hay ningún problema en hacer preguntas si algo no está claro, o no lo encuentras.</p>\n<p>El equipo de cacache tiene miembros hispanohablantes: es completamente aceptable crear <code>issues</code> y <code>pull requests</code> en español/castellano.</p>\n<p>Todos los participantes en este proyecto deben obedecer el <a href=\"CODE_OF_CONDUCT.md\">Código de Conducta</a> (en inglés), y en general actuar de forma amable y respetuosa mientras participan en esta comunidad.</p>\n<p>Por favor refiérase al <a href=\"CHANGELOG.md\">Historial de Cambios</a> (en inglés) para detalles sobre cambios importantes incluídos en cada versión.</p>\n<p>Finalmente, cacache tiene un sistema de localización de lenguaje. Si te interesa añadir lenguajes o mejorar los que existen, mira en el directorio <code>./locales</code> para comenzar.</p>\n<p>Happy hacking!</p>\n<h3 id=\"api\">API</h3>\n<h4 id=\"-a-name-localized-api-a-usando-el-api-en-espa-ol\"><a name=\"localized-api\"></a> Usando el API en español</h4>\n<p>cacache incluye una traducción completa de su API al castellano, con las mismas\ncaracterísticas. Para usar el API como está documentado en este documento, usa\n<code>require(&#39;cacache/es&#39;)</code></p>\n<p>cacache también tiene otros lenguajes: encuéntralos bajo <code>./locales</code>, y podrás\nusar el API en ese lenguaje con <code>require(&#39;cacache/&lt;lenguaje&gt;&#39;)</code></p>\n<h4 id=\"-a-name-ls-a-cacache-ls-cache-promiseobject\"><a name=\"ls\"></a> <code>&gt; cacache.ls(cache) -&gt; Promise&lt;Object&gt;</code></h4>\n<p>Enumera todas las entradas en el caché, dentro de un solo objeto. Cada entrada\nen el objeto tendrá como clave la clave única usada para el índice, el valor\nsiendo un objeto de <a href=\"#get-info\"><code>saca.info</code></a>.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.ls(rutaCache).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&#39;my-thing&#39;:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;key:&nbsp;&#39;my-thing&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;integrity:&nbsp;&#39;sha512-BaSe64/EnCoDED+HAsh==&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;&#39;.testcache/content/deadbeef&#39;,&nbsp;//&nbsp;unido&nbsp;con&nbsp;`rutaCache`</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;time:&nbsp;12345698490,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;size:&nbsp;4023948,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;metadata:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;blah&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;version:&nbsp;&#39;1.2.3&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description:&nbsp;&#39;this&nbsp;was&nbsp;once&nbsp;a&nbsp;package&nbsp;but&nbsp;now&nbsp;it&nbsp;is&nbsp;my-thing&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;},</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&#39;other-thing&#39;:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;key:&nbsp;&#39;other-thing&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;integrity:&nbsp;&#39;sha1-ANothER+hasH=&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;&#39;.testcache/content/bada55&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;time:&nbsp;11992309289,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;size:&nbsp;111112</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div></pre><h4 id=\"-a-name-ls-stream-a-cacache-ls-flujo-cache-readable\"><a name=\"ls-stream\"></a> <code>&gt; cacache.ls.flujo(cache) -&gt; Readable</code></h4>\n<p>Enumera todas las entradas en el caché, emitiendo un objeto de\n<a href=\"#get-info\"><code>saca.info</code></a> por cada evento de <code>data</code> en el flujo.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.ls.flujo(rutaCache).on(&#39;data&#39;,&nbsp;console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;key:&nbsp;&#39;my-thing&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;integrity:&nbsp;&#39;sha512-BaSe64HaSh&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;path:&nbsp;&#39;.testcache/content/deadbeef&#39;,&nbsp;//&nbsp;unido&nbsp;con&nbsp;`rutaCache`</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;time:&nbsp;12345698490,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;size:&nbsp;13423,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;metadata:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;blah&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;version:&nbsp;&#39;1.2.3&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;description:&nbsp;&#39;this&nbsp;was&nbsp;once&nbsp;a&nbsp;package&nbsp;but&nbsp;now&nbsp;it&nbsp;is&nbsp;my-thing&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;key:&nbsp;&#39;other-thing&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;integrity:&nbsp;&#39;whirlpool-WoWSoMuchSupport&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;path:&nbsp;&#39;.testcache/content/bada55&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;time:&nbsp;11992309289,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;size:&nbsp;498023984029</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;...</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div></pre><h4 id=\"-a-name-get-data-a-cacache-saca-cache-clave-ops-promise-data-metadata-integrity-\"><a name=\"get-data\"></a> <code>&gt; cacache.saca(cache, clave, [ops]) -&gt; Promise({data, metadata, integrity})</code></h4>\n<p>Devuelve un objeto con los datos, hacheo de integridad y metadatos identificados\npor la <code>clave</code>. La propiedad <code>data</code> de este objeto será una instancia de\n<code>Buffer</code> con los datos almacenados en el caché. to do with it! cacache just\nwon&#39;t care.</p>\n<p><code>integrity</code> es un <code>string</code> de <a href=\"#integrity\">Subresource Integrity</a>. Dígase, un\n<code>string</code> que puede ser usado para verificar a la <code>data</code>, que tiene como formato\n<code>&lt;algoritmo&gt;-&lt;hacheo-integridad-base64&gt;</code>.</p>\n<p>So no existe ninguna entrada identificada por <code>clave</code>, o se los datos\nalmacenados localmente fallan verificación, el <code>Promise</code> fallará.</p>\n<p>Una sub-función, <code>saca.porHacheo</code>, tiene casi el mismo comportamiento, excepto\nque busca entradas usando el hacheo de integridad, sin tocar el índice general.\nEsta versión <em>sólo</em> devuelve <code>data</code>, sin ningún objeto conteniéndola.</p>\n<h5 id=\"nota\">Nota</h5>\n<p>Esta función lee la entrada completa a la memoria antes de devolverla. Si estás\nalmacenando datos Muy Grandes, es posible que <a href=\"#get-stream\"><code>saca.flujo</code></a> sea\nuna mejor solución.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Busca&nbsp;por&nbsp;clave</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cache.saca(rutaCache,&nbsp;&#39;my-thing&#39;).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;metadata:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;thingName:&nbsp;&#39;my&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;},</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;integrity:&nbsp;&#39;sha512-BaSe64HaSh&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;data:&nbsp;Buffer#&lt;deadbeef&gt;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;size:&nbsp;9320</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Busca&nbsp;por&nbsp;hacheo</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cache.saca.porHacheo(rutaCache,&nbsp;&#39;sha512-BaSe64HaSh&#39;).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Buffer#&lt;deadbeef&gt;</span></span></div></pre><h4 id=\"-a-name-get-stream-a-cacache-saca-flujo-cache-clave-ops-readable\"><a name=\"get-stream\"></a> <code>&gt; cacache.saca.flujo(cache, clave, [ops]) -&gt; Readable</code></h4>\n<p>Devuelve un <a href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Readable\nStream</a> de los datos\nalmacenados bajo <code>clave</code>.</p>\n<p>So no existe ninguna entrada identificada por <code>clave</code>, o se los datos\nalmacenados localmente fallan verificación, el <code>Promise</code> fallará.</p>\n<p><code>metadata</code> y <code>integrity</code> serán emitidos como eventos antes de que el flujo\ncierre.</p>\n<p>Una sub-función, <code>saca.flujo.porHacheo</code>, tiene casi el mismo comportamiento,\nexcepto que busca entradas usando el hacheo de integridad, sin tocar el índice\ngeneral. Esta versión no emite eventos de <code>metadata</code> o <code>integrity</code>.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Busca&nbsp;por&nbsp;clave</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cache.saca.flujo(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;rutaCache,&nbsp;&#39;my-thing&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).on(&#39;metadata&#39;,&nbsp;metadata&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;metadata:&#39;,&nbsp;metadata)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}).on(&#39;integrity&#39;,&nbsp;integrity&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;integrity:&#39;,&nbsp;integrity)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}).pipe(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;fs.createWriteStream(&#39;./x.tgz&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salidas:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>metadata:&nbsp;{&nbsp;...&nbsp;}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>integrity:&nbsp;&#39;sha512-SoMeDIGest+64==&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Busca&nbsp;por&nbsp;hacheo</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cache.saca.flujo.porHacheo(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;rutaCache,&nbsp;&#39;sha512-SoMeDIGest+64==&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).pipe(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;fs.createWriteStream(&#39;./x.tgz&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>)</span></span></div></pre><h4 id=\"-a-name-get-info-a-cacache-saca-info-cache-clave-promise\"><a name=\"get-info\"></a> <code>&gt; cacache.saca.info(cache, clave) -&gt; Promise</code></h4>\n<p>Busca la <code>clave</code> en el índice del caché, devolviendo información sobre la\nentrada si existe.</p>\n<h5 id=\"campos\">Campos</h5>\n<ul>\n<li><code>key</code> - Clave de la entrada. Igual al argumento <code>clave</code>.</li>\n<li><code>integrity</code> - <a href=\"#integrity\">hacheo de Subresource Integrity</a> del contenido al que se refiere esta entrada.</li>\n<li><code>path</code> - Dirección del fichero de datos almacenados, unida al argumento <code>cache</code>.</li>\n<li><code>time</code> - Hora de creación de la entrada</li>\n<li><code>metadata</code> - Metadatos asignados a esta entrada por el usuario</li>\n</ul>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.saca.info(rutaCache,&nbsp;&#39;my-thing&#39;).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;key:&nbsp;&#39;my-thing&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;integrity:&nbsp;&#39;sha256-MUSTVERIFY+ALL/THINGS==&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;path:&nbsp;&#39;.testcache/content/deadbeef&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;time:&nbsp;12345698490,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;size:&nbsp;849234,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;metadata:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;blah&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;version:&nbsp;&#39;1.2.3&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;description:&nbsp;&#39;this&nbsp;was&nbsp;once&nbsp;a&nbsp;package&nbsp;but&nbsp;now&nbsp;it&nbsp;is&nbsp;my-thing&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div></pre><h4 id=\"-a-name-get-hascontent-a-cacache-saca-tienedatos-cache-integrity-promise\"><a name=\"get-hasContent\"></a> <code>&gt; cacache.saca.tieneDatos(cache, integrity) -&gt; Promise</code></h4>\n<p>Busca un <a href=\"#integrity\">hacheo Subresource Integrity</a> en el caché. Si existe el\ncontenido asociado con <code>integrity</code>, devuelve un objeto con dos campos: el hacheo\n<em>específico</em> que se usó para la búsqueda, <code>sri</code>, y el tamaño total del\ncontenido, <code>size</code>. Si no existe ningún contenido asociado con <code>integrity</code>,\ndevuelve <code>false</code>.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.saca.tieneDatos(rutaCache,&nbsp;&#39;sha256-MUSTVERIFY+ALL/THINGS==&#39;).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;sri:&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;source:&nbsp;&#39;sha256-MUSTVERIFY+ALL/THINGS==&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;algorithm:&nbsp;&#39;sha256&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;digest:&nbsp;&#39;MUSTVERIFY+ALL/THINGS==&#39;,</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;[]</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;},</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;size:&nbsp;9001</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.saca.tieneDatos(rutaCache,&nbsp;&#39;sha521-NOT+IN/CACHE==&#39;).then(console.log)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>//&nbsp;Salida</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>false</span></span></div></pre><h4 id=\"-a-name-put-data-a-cacache-mete-cache-clave-datos-ops-promise\"><a name=\"put-data\"></a> <code>&gt; cacache.mete(cache, clave, datos, [ops]) -&gt; Promise</code></h4>\n<p>Inserta <code>datos</code> en el caché. El <code>Promise</code> devuelto se resuelve con un hacheo\n(generado conforme a <a href=\"#optsalgorithms\"><code>ops.algorithms</code></a>) después que la entrada\nhaya sido escrita en completo.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>fetch(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&#39;</span><span class=\"markup underline link https hyperlink\"><span>https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz</span></span><span>&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).then(datos&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;return&nbsp;cacache.mete(rutaCache,&nbsp;&#39;registry.npmjs.org|cacache@1.0.0&#39;,&nbsp;datos)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}).then(integridad&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;el&nbsp;hacheo&nbsp;de&nbsp;integridad&nbsp;es&#39;,&nbsp;integridad)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-put-stream-a-cacache-mete-flujo-cache-clave-ops-writable\"><a name=\"put-stream\"></a> <code>&gt; cacache.mete.flujo(cache, clave, [ops]) -&gt; Writable</code></h4>\n<p>Devuelve un <a href=\"https://nodejs.org/api/stream.html#stream_writable_streams\">Writable\nStream</a> que inserta\nal caché los datos escritos a él. Emite un evento <code>integrity</code> con el hacheo del\ncontenido escrito, cuando completa.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>request.get(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&#39;</span><span class=\"markup underline link https hyperlink\"><span>https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz</span></span><span>&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>).pipe(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;cacache.mete.flujo(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;rutaCache,&nbsp;&#39;registry.npmjs.org|cacache@1.0.0&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;).on(&#39;integrity&#39;,&nbsp;d&nbsp;=&gt;&nbsp;console.log(`integrity&nbsp;digest&nbsp;is&nbsp;${d}`))</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>)</span></span></div></pre><h4 id=\"-a-name-put-options-a-opciones-para-cacache-mete\"><a name=\"put-options\"></a> <code>&gt; opciones para cacache.mete</code></h4>\n<p>La funciones <code>cacache.mete</code> tienen un número de opciones en común.</p>\n<h5 id=\"ops-metadata\"><code>ops.metadata</code></h5>\n<p>Metadatos del usuario que se almacenarán con la entrada.</p>\n<h5 id=\"ops-size\"><code>ops.size</code></h5>\n<p>El tamaño declarado de los datos que se van a insertar. Si es proveído, cacache\nverificará que los datos escritos sean de ese tamaño, o si no, fallará con un\nerror con código <code>EBADSIZE</code>.</p>\n<h5 id=\"ops-integrity\"><code>ops.integrity</code></h5>\n<p>El hacheo de integridad de los datos siendo escritos.</p>\n<p>Si es proveído, y los datos escritos no le corresponden, la operación fallará\ncon un error con código <code>EINTEGRITY</code>.</p>\n<p><code>ops.algorithms</code> no tiene ningún efecto si esta opción está presente.</p>\n<h5 id=\"ops-algorithms\"><code>ops.algorithms</code></h5>\n<p>Por Defecto: <code>[&#39;sha512&#39;]</code></p>\n<p>Algoritmos que se deben usar cuando se calcule el hacheo de <a href=\"#integrity\">subresource\nintegrity</a> para los datos insertados. Puede usar cualquier algoritmo\nenumerado en <code>crypto.getHashes()</code>.</p>\n<p>Por el momento, sólo se acepta un algoritmo (dígase, un array con exáctamente un\nvalor). No tiene ningún efecto si <code>ops.integrity</code> también ha sido proveido.</p>\n<h5 id=\"ops-uid-ops-gid\"><code>ops.uid</code>/<code>ops.gid</code></h5>\n<p>Si están presentes, cacache hará todo lo posible para asegurarse que todos los\nficheros creados en el proceso de sus operaciones en el caché usen esta\ncombinación en particular.</p>\n<h5 id=\"ops-memoize\"><code>ops.memoize</code></h5>\n<p>Por Defecto: <code>null</code></p>\n<p>Si es verdad, cacache tratará de memoizar los datos de la entrada en memoria. La\npróxima vez que el proceso corriente trate de accesar los datos o entrada,\ncacache buscará en memoria antes de buscar en disco.</p>\n<p>Si <code>ops.memoize</code> es un objeto regular o un objeto como <code>Map</code> (es decir, un\nobjeto con métodos <code>get()</code> y <code>set()</code>), este objeto en sí sera usado en vez del\ncaché de memoria global. Esto permite tener lógica específica a tu aplicación\nencuanto al almacenaje en memoria de tus datos.</p>\n<p>Si quieres asegurarte que los datos se lean del disco en vez de memoria, usa\n<code>memoize: false</code> cuando uses funciones de <code>cacache.saca</code>.</p>\n<h4 id=\"-a-name-rm-all-a-cacache-rm-todo-cache-promise\"><a name=\"rm-all\"></a> <code>&gt; cacache.rm.todo(cache) -&gt; Promise</code></h4>\n<p>Borra el caché completo, incluyendo ficheros temporeros, ficheros de datos, y el\níndice del caché.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.rm.todo(rutaCache).then(()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;THE&nbsp;APOCALYPSE&nbsp;IS&nbsp;UPON&nbsp;US&nbsp;😱&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-rm-entry-a-cacache-rm-entrada-cache-clave-promise\"><a name=\"rm-entry\"></a> <code>&gt; cacache.rm.entrada(cache, clave) -&gt; Promise</code></h4>\n<p>Alias: <code>cacache.rm</code></p>\n<p>Borra la entrada <code>clave</code> del índuce. El contenido asociado con esta entrada\nseguirá siendo accesible por hacheo usando\n<a href=\"#get-stream\"><code>saca.flujo.porHacheo</code></a>.</p>\n<p>Para borrar el contenido en sí, usa <a href=\"#rm-content\"><code>rm.datos</code></a>. Si quieres hacer\nesto de manera más segura (pues ficheros de contenido pueden ser usados por\nmultiples entradas), usa <a href=\"#verify\"><code>verifica</code></a> para borrar huérfanos.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.rm.entrada(rutaCache,&nbsp;&#39;my-thing&#39;).then(()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;I&nbsp;did&nbsp;not&nbsp;like&nbsp;it&nbsp;anyway&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-rm-content-a-cacache-rm-datos-cache-integrity-promise\"><a name=\"rm-content\"></a> <code>&gt; cacache.rm.datos(cache, integrity) -&gt; Promise</code></h4>\n<p>Borra el contenido identificado por <code>integrity</code>. Cualquier entrada que se\nrefiera a este contenido quedarán huérfanas y se invalidarán si se tratan de\naccesar, al menos que contenido idéntico sea añadido bajo <code>integrity</code>.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.rm.datos(rutaCache,&nbsp;&#39;sha512-SoMeDIGest/IN+BaSE64==&#39;).then(()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;los&nbsp;datos&nbsp;para&nbsp;`mi-cosa`&nbsp;se&nbsp;borraron&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-set-locale-a-cacache-ponlenguaje-locale-\"><a name=\"set-locale\"></a> <code>&gt; cacache.ponLenguaje(locale)</code></h4>\n<p>Configura el lenguaje usado para mensajes y errores de cacache. La lista de\nlenguajes disponibles está en el directorio <code>./locales</code> del proyecto.</p>\n<p><em>Te interesa añadir más lenguajes? <a href=\"CONTRIBUTING.md\">Somete un PR</a>!</em></p>\n<h4 id=\"-a-name-clear-memoized-a-cacache-limpiamemoizado-\"><a name=\"clear-memoized\"></a> <code>&gt; cacache.limpiaMemoizado()</code></h4>\n<p>Completamente reinicializa el caché de memoria interno. Si estás usando tu\npropio objecto con <code>ops.memoize</code>, debes hacer esto de manera específica a él.</p>\n<h4 id=\"-a-name-tmp-mkdir-a-tmp-hazdir-cache-ops-promisepath\"><a name=\"tmp-mkdir\"></a> <code>&gt; tmp.hazdir(cache, ops) -&gt; Promise&lt;Path&gt;</code></h4>\n<p>Alias: <code>tmp.mkdir</code></p>\n<p>Devuelve un directorio único dentro del directorio <code>tmp</code> del caché.</p>\n<p>Una vez tengas el directorio, es responsabilidad tuya asegurarte que todos los\nficheros escrito a él sean creados usando los permisos y <code>uid</code>/<code>gid</code> concordante\ncon el caché. Si no, puedes pedirle a cacache que lo haga llamando a\n<a href=\"#tmp-fix\"><code>cacache.tmp.fix()</code></a>. Esta función arreglará todos los permisos en el\ndirectorio tmp.</p>\n<p>Si quieres que cacache limpie el directorio automáticamente cuando termines, usa\n<a href=\"#with-tpm\"><code>cacache.tmp.conTmp()</code></a>.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.tmp.mkdir(cache).then(dir&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;fs.writeFile(path.join(dir,&nbsp;&#39;blablabla&#39;),&nbsp;Buffer#&lt;1234&gt;,&nbsp;...)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-with-tmp-a-tmp-contmp-cache-ops-cb-promise\"><a name=\"with-tmp\"></a> <code>&gt; tmp.conTmp(cache, ops, cb) -&gt; Promise</code></h4>\n<p>Crea un directorio temporero con <a href=\"#tmp-mkdir\"><code>tmp.mkdir()</code></a> y ejecuta <code>cb</code> con\nél como primer argumento. El directorio creado será removido automáticamente\ncuando el valor devolvido por <code>cb()</code> se resuelva.</p>\n<p>Las mismas advertencias aplican en cuanto a manejando permisos para los ficheros\ndentro del directorio.</p>\n<h5 id=\"ejemplo\">Ejemplo</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.tmp.conTmp(cache,&nbsp;dir&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;return&nbsp;fs.writeFileAsync(path.join(dir,&nbsp;&#39;blablabla&#39;),&nbsp;Buffer#&lt;1234&gt;,&nbsp;...)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>}).then(()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;//&nbsp;`dir`&nbsp;no&nbsp;longer&nbsp;exists</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-integrity-a-hacheos-de-subresource-integrity\"><a name=\"integrity\"></a> Hacheos de Subresource Integrity</h4>\n<p>cacache usa strings que siguen la especificación de <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\">Subresource Integrity\nspec</a>.</p>\n<p>Es decir, donde quiera cacache espera un argumento o opción <code>integrity</code>, ese\nstring debería usar el formato <code>&lt;algoritmo&gt;-&lt;hacheo-base64&gt;</code>.</p>\n<p>Una variación importante sobre los hacheos que cacache acepta es que acepta el\nnombre de cualquier algoritmo aceptado por el proceso de Node.js donde se usa.\nPuedes usar <code>crypto.getHashes()</code> para ver cuales están disponibles.</p>\n<h5 id=\"generando-tus-propios-hacheos\">Generando tus propios hacheos</h5>\n<p>Si tienes un <code>shasum</code>, en general va a estar en formato de string hexadecimal\n(es decir, un <code>sha1</code> se vería como algo así:\n<code>5f5513f8822fdbe5145af33b64d8d970dcf95c6e</code>).</p>\n<p>Para ser compatible con cacache, necesitas convertir esto a su equivalente en\nsubresource integrity. Por ejemplo, el hacheo correspondiente al ejemplo\nanterior sería: <code>sha1-X1UT+IIv2+UUWvM7ZNjZcNz5XG4=</code>.</p>\n<p>Puedes usar código así para generarlo por tu cuenta:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;crypto&nbsp;=&nbsp;require(&#39;crypto&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;algoritmo&nbsp;=&nbsp;&#39;sha512&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;datos&nbsp;=&nbsp;&#39;foobarbaz&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;integrity&nbsp;=&nbsp;(</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;algorithm&nbsp;+</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&#39;-&#39;&nbsp;+</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;crypto.createHash(algoritmo).update(datos).digest(&#39;base64&#39;)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>)</span></span></div></pre><p>También puedes usar <a href=\"https://npm.im/ssri\"><code>ssri</code></a> para deferir el trabajo a otra\nlibrería que garantiza que todo esté correcto, pues maneja probablemente todas\nlas operaciones que tendrías que hacer con SRIs, incluyendo convirtiendo entre\nhexadecimal y el formato SRI.</p>\n<h4 id=\"-a-name-verify-a-cacache-verifica-cache-ops-promise\"><a name=\"verify\"></a> <code>&gt; cacache.verifica(cache, ops) -&gt; Promise</code></h4>\n<p>Examina y arregla tu caché:</p>\n<ul>\n<li>Limpia entradas inválidas, huérfanas y corrompidas</li>\n<li>Te deja filtrar cuales entradas retener, con tu propio filtro</li>\n<li>Reclama cualquier ficheros de contenido sin referencias en el índice</li>\n<li>Verifica integridad de todos los ficheros de contenido y remueve los malos</li>\n<li>Arregla permisos del caché</li>\n<li>Remieve el directorio <code>tmp</code> en el caché, y todo su contenido.</li>\n</ul>\n<p>Cuando termine, devuelve un objeto con varias estadísticas sobre el proceso de\nverificación, por ejemplo la cantidad de espacio de disco reclamado, el número\nde entradas válidas, número de entradas removidas, etc.</p>\n<h5 id=\"opciones\">Opciones</h5>\n<ul>\n<li><code>ops.uid</code> - uid para asignarle al caché y su contenido</li>\n<li><code>ops.gid</code> - gid para asignarle al caché y su contenido</li>\n<li><code>ops.filter</code> - recibe una entrada como argumento. Devuelve falso para removerla. Nota: es posible que esta función sea invocada con la misma entrada más de una vez.</li>\n</ul>\n<h5 id=\"example\">Example</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>echo&nbsp;somegarbage&nbsp;&gt;&gt;&nbsp;$RUTACACHE/content/deadbeef</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.verifica(rutaCache).then(stats&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;//&nbsp;deadbeef&nbsp;collected,&nbsp;because&nbsp;of&nbsp;invalid&nbsp;checksum.</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;console.log(&#39;cache&nbsp;is&nbsp;much&nbsp;nicer&nbsp;now!&nbsp;stats:&#39;,&nbsp;stats)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre><h4 id=\"-a-name-verify-last-run-a-cacache-verifica-ultimavez-cache-promise\"><a name=\"verify-last-run\"></a> <code>&gt; cacache.verifica.ultimaVez(cache) -&gt; Promise</code></h4>\n<p>Alias: <code>últimaVez</code></p>\n<p>Devuelve un <code>Date</code> que representa la última vez que <code>cacache.verifica</code> fue\nejecutada en <code>cache</code>.</p>\n<h5 id=\"example\">Example</h5>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>cacache.verifica(rutaCache).then(()&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;cacache.verifica.ultimaVez(rutaCache).then(última&nbsp;=&gt;&nbsp;{</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;La&nbsp;última&nbsp;vez&nbsp;que&nbsp;se&nbsp;usó&nbsp;cacache.verifica()&nbsp;fue&nbsp;&#39;&nbsp;+&nbsp;última)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;})</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>})</span></span></div></pre>"
      ],
      "contentsRaw": "# cacache [![npm version](https://img.shields.io/npm/v/cacache.svg)](https://npm.im/cacache) [![license](https://img.shields.io/npm/l/cacache.svg)](https://npm.im/cacache) [![Travis](https://img.shields.io/travis/zkat/cacache.svg)](https://travis-ci.org/zkat/cacache) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/cacache?svg=true)](https://ci.appveyor.com/project/zkat/cacache) [![Coverage Status](https://coveralls.io/repos/github/zkat/cacache/badge.svg?branch=latest)](https://coveralls.io/github/zkat/cacache?branch=latest)\n\n[`cacache`](https://github.com/zkat/cacache) es una librería de Node.js para\nmanejar caches locales en disco, con acceso tanto con claves únicas como\ndirecciones de contenido (hashes/hacheos). Es súper rápida, excelente con el\nacceso concurrente, y jamás te dará datos incorrectos, aún si se corrompen o\nmanipulan directamente los ficheros del cache.\n\nEl propósito original era reemplazar el caché local de\n[npm](https://npm.im/npm), pero se puede usar por su propia cuenta.\n\n_Traducciones: [English](README.md)_\n\n## Instalación\n\n`$ npm install --save cacache`\n\n## Índice\n\n* [Ejemplo](#ejemplo)\n* [Características](#características)\n* [Cómo Contribuir](#cómo-contribuir)\n* [API](#api)\n  * [Usando el API en español](#localized-api)\n  * Leer\n    * [`ls`](#ls)\n    * [`ls.flujo`](#ls-stream)\n    * [`saca`](#get-data)\n    * [`saca.flujo`](#get-stream)\n    * [`saca.info`](#get-info)\n    * [`saca.tieneDatos`](#get-hasContent)\n  * Escribir\n    * [`mete`](#put-data)\n    * [`mete.flujo`](#put-stream)\n    * [opciones para `mete*`](#put-options)\n    * [`rm.todo`](#rm-all)\n    * [`rm.entrada`](#rm-entry)\n    * [`rm.datos`](#rm-content)\n  * Utilidades\n    * [`ponLenguaje`](#set-locale)\n    * [`limpiaMemoizado`](#clear-memoized)\n    * [`tmp.hazdir`](#tmp-mkdir)\n    * [`tmp.conTmp`](#with-tmp)\n  * Integridad\n    * [Subresource Integrity](#integrity)\n    * [`verifica`](#verify)\n    * [`verifica.ultimaVez`](#verify-last-run)\n\n### Ejemplo\n\n```javascript\nconst cacache = require('cacache/es')\nconst fs = require('fs')\n\nconst tarbol = '/ruta/a/mi-tar.tgz'\nconst rutaCache = '/tmp/my-toy-cache'\nconst clave = 'mi-clave-única-1234'\n\n// ¡Añádelo al caché! Usa `rutaCache` como raíz del caché.\ncacache.mete(rutaCache, clave, '10293801983029384').then(integrity => {\n  console.log(`Saved content to ${rutaCache}.`)\n})\n\nconst destino = '/tmp/mytar.tgz'\n\n// Copia el contenido del caché a otro fichero, pero esta vez con flujos.\ncacache.saca.flujo(\n  rutaCache, clave\n).pipe(\n  fs.createWriteStream(destino)\n).on('finish', () => {\n  console.log('extracción completada')\n})\n\n// La misma cosa, pero accesando el contenido directamente, sin tocar el índice.\ncacache.saca.porHacheo(rutaCache, integridad).then(datos => {\n  fs.writeFile(destino, datos, err => {\n    console.log('datos del tarbol sacados basado en su sha512, y escrito a otro fichero')\n  })\n})\n```\n\n### Características\n\n* Extracción por clave o por dirección de contenido (shasum, etc)\n* Usa el estándard de web, [Subresource Integrity](#integrity)\n* Compatible con multiples algoritmos - usa sha1, sha512, etc, en el mismo caché sin problema\n* Entradas con contenido idéntico comparten ficheros\n* Tolerancia de fallas (inmune a corrupción, ficheros parciales, carreras de proceso, etc)\n* Verificación completa de datos cuando (escribiendo y leyendo)\n* Concurrencia rápida, segura y \"lockless\"\n* Compatible con `stream`s (flujos)\n* Compatible con `Promise`s (promesas)\n* Bastante rápida -- acceso, incluyendo verificación, en microsegundos\n* Almacenaje de metadatos arbitrarios\n* Colección de basura y verificación adicional fuera de banda\n* Cobertura rigurosa de pruebas\n* Probablente hay un \"Bloom filter\" por ahí en algún lado. Eso le mola a la gente, ¿Verdad? 🤔\n\n### Cómo Contribuir\n\nEl equipo de cacache felizmente acepta contribuciones de código y otras maneras de participación. ¡Hay muchas formas diferentes de contribuir! La [Guía de Colaboradores](CONTRIBUTING.md) (en inglés) tiene toda la información que necesitas para cualquier tipo de contribución: todo desde cómo reportar errores hasta cómo someter parches con nuevas características. Con todo y eso, no se preocupe por si lo que haces está exáctamente correcto: no hay ningún problema en hacer preguntas si algo no está claro, o no lo encuentras.\n\nEl equipo de cacache tiene miembros hispanohablantes: es completamente aceptable crear `issues` y `pull requests` en español/castellano.\n\nTodos los participantes en este proyecto deben obedecer el [Código de Conducta](CODE_OF_CONDUCT.md) (en inglés), y en general actuar de forma amable y respetuosa mientras participan en esta comunidad.\n\nPor favor refiérase al [Historial de Cambios](CHANGELOG.md) (en inglés) para detalles sobre cambios importantes incluídos en cada versión.\n\nFinalmente, cacache tiene un sistema de localización de lenguaje. Si te interesa añadir lenguajes o mejorar los que existen, mira en el directorio `./locales` para comenzar.\n\nHappy hacking!\n\n### API\n\n#### <a name=\"localized-api\"></a> Usando el API en español\n\ncacache incluye una traducción completa de su API al castellano, con las mismas\ncaracterísticas. Para usar el API como está documentado en este documento, usa\n`require('cacache/es')`\n\ncacache también tiene otros lenguajes: encuéntralos bajo `./locales`, y podrás\nusar el API en ese lenguaje con `require('cacache/<lenguaje>')`\n\n#### <a name=\"ls\"></a> `> cacache.ls(cache) -> Promise<Object>`\n\nEnumera todas las entradas en el caché, dentro de un solo objeto. Cada entrada\nen el objeto tendrá como clave la clave única usada para el índice, el valor\nsiendo un objeto de [`saca.info`](#get-info).\n\n##### Ejemplo\n\n```javascript\ncacache.ls(rutaCache).then(console.log)\n// Salida\n{\n  'my-thing': {\n    key: 'my-thing',\n    integrity: 'sha512-BaSe64/EnCoDED+HAsh=='\n    path: '.testcache/content/deadbeef', // unido con `rutaCache`\n    time: 12345698490,\n    size: 4023948,\n    metadata: {\n      name: 'blah',\n      version: '1.2.3',\n      description: 'this was once a package but now it is my-thing'\n    }\n  },\n  'other-thing': {\n    key: 'other-thing',\n    integrity: 'sha1-ANothER+hasH=',\n    path: '.testcache/content/bada55',\n    time: 11992309289,\n    size: 111112\n  }\n}\n```\n\n#### <a name=\"ls-stream\"></a> `> cacache.ls.flujo(cache) -> Readable`\n\nEnumera todas las entradas en el caché, emitiendo un objeto de\n[`saca.info`](#get-info) por cada evento de `data` en el flujo.\n\n##### Ejemplo\n\n```javascript\ncacache.ls.flujo(rutaCache).on('data', console.log)\n// Salida\n{\n  key: 'my-thing',\n  integrity: 'sha512-BaSe64HaSh',\n  path: '.testcache/content/deadbeef', // unido con `rutaCache`\n  time: 12345698490,\n  size: 13423,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n\n{\n  key: 'other-thing',\n  integrity: 'whirlpool-WoWSoMuchSupport',\n  path: '.testcache/content/bada55',\n  time: 11992309289,\n  size: 498023984029\n}\n\n{\n  ...\n}\n```\n\n#### <a name=\"get-data\"></a> `> cacache.saca(cache, clave, [ops]) -> Promise({data, metadata, integrity})`\n\nDevuelve un objeto con los datos, hacheo de integridad y metadatos identificados\npor la `clave`. La propiedad `data` de este objeto será una instancia de\n`Buffer` con los datos almacenados en el caché. to do with it! cacache just\nwon't care.\n\n`integrity` es un `string` de [Subresource Integrity](#integrity). Dígase, un\n`string` que puede ser usado para verificar a la `data`, que tiene como formato\n`<algoritmo>-<hacheo-integridad-base64>`.\n\nSo no existe ninguna entrada identificada por `clave`, o se los datos\nalmacenados localmente fallan verificación, el `Promise` fallará.\n\nUna sub-función, `saca.porHacheo`, tiene casi el mismo comportamiento, excepto\nque busca entradas usando el hacheo de integridad, sin tocar el índice general.\nEsta versión *sólo* devuelve `data`, sin ningún objeto conteniéndola.\n\n##### Nota\n\nEsta función lee la entrada completa a la memoria antes de devolverla. Si estás\nalmacenando datos Muy Grandes, es posible que [`saca.flujo`](#get-stream) sea\nuna mejor solución.\n\n##### Ejemplo\n\n```javascript\n// Busca por clave\ncache.saca(rutaCache, 'my-thing').then(console.log)\n// Salida:\n{\n  metadata: {\n    thingName: 'my'\n  },\n  integrity: 'sha512-BaSe64HaSh',\n  data: Buffer#<deadbeef>,\n  size: 9320\n}\n\n// Busca por hacheo\ncache.saca.porHacheo(rutaCache, 'sha512-BaSe64HaSh').then(console.log)\n// Salida:\nBuffer#<deadbeef>\n```\n\n#### <a name=\"get-stream\"></a> `> cacache.saca.flujo(cache, clave, [ops]) -> Readable`\n\nDevuelve un [Readable\nStream](https://nodejs.org/api/stream.html#stream_readable_streams) de los datos\nalmacenados bajo `clave`.\n\nSo no existe ninguna entrada identificada por `clave`, o se los datos\nalmacenados localmente fallan verificación, el `Promise` fallará.\n\n`metadata` y `integrity` serán emitidos como eventos antes de que el flujo\ncierre.\n\nUna sub-función, `saca.flujo.porHacheo`, tiene casi el mismo comportamiento,\nexcepto que busca entradas usando el hacheo de integridad, sin tocar el índice\ngeneral. Esta versión no emite eventos de `metadata` o `integrity`.\n\n##### Ejemplo\n\n```javascript\n// Busca por clave\ncache.saca.flujo(\n  rutaCache, 'my-thing'\n).on('metadata', metadata => {\n  console.log('metadata:', metadata)\n}).on('integrity', integrity => {\n  console.log('integrity:', integrity)\n}).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n// Salidas:\nmetadata: { ... }\nintegrity: 'sha512-SoMeDIGest+64=='\n\n// Busca por hacheo\ncache.saca.flujo.porHacheo(\n  rutaCache, 'sha512-SoMeDIGest+64=='\n).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n```\n\n#### <a name=\"get-info\"></a> `> cacache.saca.info(cache, clave) -> Promise`\n\nBusca la `clave` en el índice del caché, devolviendo información sobre la\nentrada si existe.\n\n##### Campos\n\n* `key` - Clave de la entrada. Igual al argumento `clave`.\n* `integrity` - [hacheo de Subresource Integrity](#integrity) del contenido al que se refiere esta entrada.\n* `path` - Dirección del fichero de datos almacenados, unida al argumento `cache`.\n* `time` - Hora de creación de la entrada\n* `metadata` - Metadatos asignados a esta entrada por el usuario\n\n##### Ejemplo\n\n```javascript\ncacache.saca.info(rutaCache, 'my-thing').then(console.log)\n\n// Salida\n{\n  key: 'my-thing',\n  integrity: 'sha256-MUSTVERIFY+ALL/THINGS=='\n  path: '.testcache/content/deadbeef',\n  time: 12345698490,\n  size: 849234,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n```\n\n#### <a name=\"get-hasContent\"></a> `> cacache.saca.tieneDatos(cache, integrity) -> Promise`\n\nBusca un [hacheo Subresource Integrity](#integrity) en el caché. Si existe el\ncontenido asociado con `integrity`, devuelve un objeto con dos campos: el hacheo\n_específico_ que se usó para la búsqueda, `sri`, y el tamaño total del\ncontenido, `size`. Si no existe ningún contenido asociado con `integrity`,\ndevuelve `false`.\n\n##### Ejemplo\n\n```javascript\ncacache.saca.tieneDatos(rutaCache, 'sha256-MUSTVERIFY+ALL/THINGS==').then(console.log)\n\n// Salida\n{\n  sri: {\n    source: 'sha256-MUSTVERIFY+ALL/THINGS==',\n    algorithm: 'sha256',\n    digest: 'MUSTVERIFY+ALL/THINGS==',\n    options: []\n  },\n  size: 9001\n}\n\ncacache.saca.tieneDatos(rutaCache, 'sha521-NOT+IN/CACHE==').then(console.log)\n\n// Salida\nfalse\n```\n\n#### <a name=\"put-data\"></a> `> cacache.mete(cache, clave, datos, [ops]) -> Promise`\n\nInserta `datos` en el caché. El `Promise` devuelto se resuelve con un hacheo\n(generado conforme a [`ops.algorithms`](#optsalgorithms)) después que la entrada\nhaya sido escrita en completo.\n\n##### Ejemplo\n\n```javascript\nfetch(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).then(datos => {\n  return cacache.mete(rutaCache, 'registry.npmjs.org|cacache@1.0.0', datos)\n}).then(integridad => {\n  console.log('el hacheo de integridad es', integridad)\n})\n```\n\n#### <a name=\"put-stream\"></a> `> cacache.mete.flujo(cache, clave, [ops]) -> Writable`\n\nDevuelve un [Writable\nStream](https://nodejs.org/api/stream.html#stream_writable_streams) que inserta\nal caché los datos escritos a él. Emite un evento `integrity` con el hacheo del\ncontenido escrito, cuando completa.\n\n##### Ejemplo\n\n```javascript\nrequest.get(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).pipe(\n  cacache.mete.flujo(\n    rutaCache, 'registry.npmjs.org|cacache@1.0.0'\n  ).on('integrity', d => console.log(`integrity digest is ${d}`))\n)\n```\n\n#### <a name=\"put-options\"></a> `> opciones para cacache.mete`\n\nLa funciones `cacache.mete` tienen un número de opciones en común.\n\n##### `ops.metadata`\n\nMetadatos del usuario que se almacenarán con la entrada.\n\n##### `ops.size`\n\nEl tamaño declarado de los datos que se van a insertar. Si es proveído, cacache\nverificará que los datos escritos sean de ese tamaño, o si no, fallará con un\nerror con código `EBADSIZE`.\n\n##### `ops.integrity`\n\nEl hacheo de integridad de los datos siendo escritos.\n\nSi es proveído, y los datos escritos no le corresponden, la operación fallará\ncon un error con código `EINTEGRITY`.\n\n`ops.algorithms` no tiene ningún efecto si esta opción está presente.\n\n##### `ops.algorithms`\n\nPor Defecto: `['sha512']`\n\nAlgoritmos que se deben usar cuando se calcule el hacheo de [subresource\nintegrity](#integrity) para los datos insertados. Puede usar cualquier algoritmo\nenumerado en `crypto.getHashes()`.\n\nPor el momento, sólo se acepta un algoritmo (dígase, un array con exáctamente un\nvalor). No tiene ningún efecto si `ops.integrity` también ha sido proveido.\n\n##### `ops.uid`/`ops.gid`\n\nSi están presentes, cacache hará todo lo posible para asegurarse que todos los\nficheros creados en el proceso de sus operaciones en el caché usen esta\ncombinación en particular.\n\n##### `ops.memoize`\n\nPor Defecto: `null`\n\nSi es verdad, cacache tratará de memoizar los datos de la entrada en memoria. La\npróxima vez que el proceso corriente trate de accesar los datos o entrada,\ncacache buscará en memoria antes de buscar en disco.\n\nSi `ops.memoize` es un objeto regular o un objeto como `Map` (es decir, un\nobjeto con métodos `get()` y `set()`), este objeto en sí sera usado en vez del\ncaché de memoria global. Esto permite tener lógica específica a tu aplicación\nencuanto al almacenaje en memoria de tus datos.\n\nSi quieres asegurarte que los datos se lean del disco en vez de memoria, usa\n`memoize: false` cuando uses funciones de `cacache.saca`.\n\n#### <a name=\"rm-all\"></a> `> cacache.rm.todo(cache) -> Promise`\n\nBorra el caché completo, incluyendo ficheros temporeros, ficheros de datos, y el\níndice del caché.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.todo(rutaCache).then(() => {\n  console.log('THE APOCALYPSE IS UPON US 😱')\n})\n```\n\n#### <a name=\"rm-entry\"></a> `> cacache.rm.entrada(cache, clave) -> Promise`\n\nAlias: `cacache.rm`\n\nBorra la entrada `clave` del índuce. El contenido asociado con esta entrada\nseguirá siendo accesible por hacheo usando\n[`saca.flujo.porHacheo`](#get-stream).\n\nPara borrar el contenido en sí, usa [`rm.datos`](#rm-content). Si quieres hacer\nesto de manera más segura (pues ficheros de contenido pueden ser usados por\nmultiples entradas), usa [`verifica`](#verify) para borrar huérfanos.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.entrada(rutaCache, 'my-thing').then(() => {\n  console.log('I did not like it anyway')\n})\n```\n\n#### <a name=\"rm-content\"></a> `> cacache.rm.datos(cache, integrity) -> Promise`\n\nBorra el contenido identificado por `integrity`. Cualquier entrada que se\nrefiera a este contenido quedarán huérfanas y se invalidarán si se tratan de\naccesar, al menos que contenido idéntico sea añadido bajo `integrity`.\n\n##### Ejemplo\n\n```javascript\ncacache.rm.datos(rutaCache, 'sha512-SoMeDIGest/IN+BaSE64==').then(() => {\n  console.log('los datos para `mi-cosa` se borraron')\n})\n```\n\n#### <a name=\"set-locale\"></a> `> cacache.ponLenguaje(locale)`\n\nConfigura el lenguaje usado para mensajes y errores de cacache. La lista de\nlenguajes disponibles está en el directorio `./locales` del proyecto.\n\n_Te interesa añadir más lenguajes? [Somete un PR](CONTRIBUTING.md)!_\n\n#### <a name=\"clear-memoized\"></a> `> cacache.limpiaMemoizado()`\n\nCompletamente reinicializa el caché de memoria interno. Si estás usando tu\npropio objecto con `ops.memoize`, debes hacer esto de manera específica a él.\n\n#### <a name=\"tmp-mkdir\"></a> `> tmp.hazdir(cache, ops) -> Promise<Path>`\n\nAlias: `tmp.mkdir`\n\nDevuelve un directorio único dentro del directorio `tmp` del caché.\n\nUna vez tengas el directorio, es responsabilidad tuya asegurarte que todos los\nficheros escrito a él sean creados usando los permisos y `uid`/`gid` concordante\ncon el caché. Si no, puedes pedirle a cacache que lo haga llamando a\n[`cacache.tmp.fix()`](#tmp-fix). Esta función arreglará todos los permisos en el\ndirectorio tmp.\n\nSi quieres que cacache limpie el directorio automáticamente cuando termines, usa\n[`cacache.tmp.conTmp()`](#with-tpm).\n\n##### Ejemplo\n\n```javascript\ncacache.tmp.mkdir(cache).then(dir => {\n  fs.writeFile(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n})\n```\n\n#### <a name=\"with-tmp\"></a> `> tmp.conTmp(cache, ops, cb) -> Promise`\n\nCrea un directorio temporero con [`tmp.mkdir()`](#tmp-mkdir) y ejecuta `cb` con\nél como primer argumento. El directorio creado será removido automáticamente\ncuando el valor devolvido por `cb()` se resuelva.\n\nLas mismas advertencias aplican en cuanto a manejando permisos para los ficheros\ndentro del directorio.\n\n##### Ejemplo\n\n```javascript\ncacache.tmp.conTmp(cache, dir => {\n  return fs.writeFileAsync(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n}).then(() => {\n  // `dir` no longer exists\n})\n```\n\n#### <a name=\"integrity\"></a> Hacheos de Subresource Integrity\n\ncacache usa strings que siguen la especificación de [Subresource Integrity\nspec](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n\nEs decir, donde quiera cacache espera un argumento o opción `integrity`, ese\nstring debería usar el formato `<algoritmo>-<hacheo-base64>`.\n\nUna variación importante sobre los hacheos que cacache acepta es que acepta el\nnombre de cualquier algoritmo aceptado por el proceso de Node.js donde se usa.\nPuedes usar `crypto.getHashes()` para ver cuales están disponibles.\n\n##### Generando tus propios hacheos\n\nSi tienes un `shasum`, en general va a estar en formato de string hexadecimal\n(es decir, un `sha1` se vería como algo así:\n`5f5513f8822fdbe5145af33b64d8d970dcf95c6e`).\n\nPara ser compatible con cacache, necesitas convertir esto a su equivalente en\nsubresource integrity. Por ejemplo, el hacheo correspondiente al ejemplo\nanterior sería: `sha1-X1UT+IIv2+UUWvM7ZNjZcNz5XG4=`.\n\nPuedes usar código así para generarlo por tu cuenta:\n\n```javascript\nconst crypto = require('crypto')\nconst algoritmo = 'sha512'\nconst datos = 'foobarbaz'\n\nconst integrity = (\n  algorithm +\n  '-' +\n  crypto.createHash(algoritmo).update(datos).digest('base64')\n)\n```\n\nTambién puedes usar [`ssri`](https://npm.im/ssri) para deferir el trabajo a otra\nlibrería que garantiza que todo esté correcto, pues maneja probablemente todas\nlas operaciones que tendrías que hacer con SRIs, incluyendo convirtiendo entre\nhexadecimal y el formato SRI.\n\n#### <a name=\"verify\"></a> `> cacache.verifica(cache, ops) -> Promise`\n\nExamina y arregla tu caché:\n\n* Limpia entradas inválidas, huérfanas y corrompidas\n* Te deja filtrar cuales entradas retener, con tu propio filtro\n* Reclama cualquier ficheros de contenido sin referencias en el índice\n* Verifica integridad de todos los ficheros de contenido y remueve los malos\n* Arregla permisos del caché\n* Remieve el directorio `tmp` en el caché, y todo su contenido.\n\nCuando termine, devuelve un objeto con varias estadísticas sobre el proceso de\nverificación, por ejemplo la cantidad de espacio de disco reclamado, el número\nde entradas válidas, número de entradas removidas, etc.\n\n##### Opciones\n\n* `ops.uid` - uid para asignarle al caché y su contenido\n* `ops.gid` - gid para asignarle al caché y su contenido\n* `ops.filter` - recibe una entrada como argumento. Devuelve falso para removerla. Nota: es posible que esta función sea invocada con la misma entrada más de una vez.\n\n##### Example\n\n```sh\necho somegarbage >> $RUTACACHE/content/deadbeef\n```\n\n```javascript\ncacache.verifica(rutaCache).then(stats => {\n  // deadbeef collected, because of invalid checksum.\n  console.log('cache is much nicer now! stats:', stats)\n})\n```\n\n#### <a name=\"verify-last-run\"></a> `> cacache.verifica.ultimaVez(cache) -> Promise`\n\nAlias: `últimaVez`\n\nDevuelve un `Date` que representa la última vez que `cacache.verifica` fue\nejecutada en `cache`.\n\n##### Example\n\n```javascript\ncacache.verifica(rutaCache).then(() => {\n  cacache.verifica.ultimaVez(rutaCache).then(última => {\n    console.log('La última vez que se usó cacache.verifica() fue ' + última)\n  })\n})\n```",
      "metadata": {}
    },
    "contributing": {
      "reference": "contributing",
      "route": "contributing",
      "sourcePath": "react-json-blinkforms\\node_modules\\clipboard\\contributing.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"contributing-guide\">Contributing guide</h1>\n<p>Want to contribute to Clipboard.js? Awesome!\nThere are many ways you can contribute, see below.</p>\n<h2 id=\"opening-issues\">Opening issues</h2>\n<p>Open an issue to report bugs or to propose new features.</p>\n<ul>\n<li><p>Reporting bugs: describe the bug as clearly as you can, including steps to reproduce, what happened and what you were expecting to happen. Also include browser version, OS and other related software&#39;s (npm, Node.js, etc) versions when applicable.</p>\n</li>\n<li><p>Proposing features: explain the proposed feature, what it should do, why it is useful, how users should use it. Give us as much info as possible so it will be easier to discuss, access and implement the proposed feature. When you&#39;re unsure about a certain aspect of the feature, feel free to leave it open for others to discuss and find an appropriate solution.</p>\n</li>\n</ul>\n<h2 id=\"proposing-pull-requests\">Proposing pull requests</h2>\n<p>Pull requests are very welcome. Note that if you are going to propose drastic changes, be sure to open an issue for discussion first, to make sure that your PR will be accepted before you spend effort coding it.</p>\n<p>Fork the Clipboard.js repository, clone it locally and create a branch for your proposed bug fix or new feature. Avoid working directly on the master branch.</p>\n<p>Implement your bug fix or feature, write tests to cover it and make sure all tests are passing (run a final <code>npm test</code> to make sure everything is correct). Then commit your changes, push your bug fix/feature branch to the origin (your forked repo) and open a pull request to the upstream (the repository you originally forked)&#39;s master branch.</p>\n<h2 id=\"documentation\">Documentation</h2>\n<p>Documentation is extremely important and takes a fair deal of time and effort to write and keep updated. Please submit any and all improvements you can make to the repository&#39;s docs.</p>\n<h2 id=\"known-issues\">Known issues</h2>\n<p>If you&#39;re using npm@3 you&#39;ll probably face some issues related to peerDependencies.\n<a href=\"https://github.com/npm/npm/issues/9204\">https://github.com/npm/npm/issues/9204</a></p>\n"
      ],
      "contentsRaw": "# Contributing guide\n\nWant to contribute to Clipboard.js? Awesome!\nThere are many ways you can contribute, see below.\n\n## Opening issues\n\nOpen an issue to report bugs or to propose new features.\n\n- Reporting bugs: describe the bug as clearly as you can, including steps to reproduce, what happened and what you were expecting to happen. Also include browser version, OS and other related software's (npm, Node.js, etc) versions when applicable.\n\n- Proposing features: explain the proposed feature, what it should do, why it is useful, how users should use it. Give us as much info as possible so it will be easier to discuss, access and implement the proposed feature. When you're unsure about a certain aspect of the feature, feel free to leave it open for others to discuss and find an appropriate solution.\n\n## Proposing pull requests\n\nPull requests are very welcome. Note that if you are going to propose drastic changes, be sure to open an issue for discussion first, to make sure that your PR will be accepted before you spend effort coding it.\n\nFork the Clipboard.js repository, clone it locally and create a branch for your proposed bug fix or new feature. Avoid working directly on the master branch.\n\nImplement your bug fix or feature, write tests to cover it and make sure all tests are passing (run a final `npm test` to make sure everything is correct). Then commit your changes, push your bug fix/feature branch to the origin (your forked repo) and open a pull request to the upstream (the repository you originally forked)'s master branch.\n\n## Documentation\n\nDocumentation is extremely important and takes a fair deal of time and effort to write and keep updated. Please submit any and all improvements you can make to the repository's docs.\n\n## Known issues\nIf you're using npm@3 you'll probably face some issues related to peerDependencies.\nhttps://github.com/npm/npm/issues/9204",
      "metadata": {}
    },
    "README.ru": {
      "reference": "README.ru",
      "route": "README.ru",
      "sourcePath": "react-json-blinkforms\\node_modules\\svgo\\README.ru.md",
      "title": "(untitled)",
      "contents": [
        "<p><a href=\"https://github.com/svg/svgo/blob/master/README.md\">english</a> | <strong>русский</strong></p>\n<hr>\n<p><img src=\"https://svg.github.io/svgo-logo.svg\" width=\"200\" height=\"200\" alt=\"logo\"/></p>\n<h2 id=\"svgo-npm-version-build-status-coverage-status\">SVGO <a href=\"https://npmjs.org/package/svgo\"><img src=\"https://badge.fury.io/js/svgo.svg\" alt=\"NPM version\"></a> <a href=\"https://travis-ci.org/svg/svgo\"><img src=\"https://secure.travis-ci.org/svg/svgo.svg\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/r/svg/svgo?branch=master\"><img src=\"https://img.shields.io/coveralls/svg/svgo.svg\" alt=\"Coverage Status\"></a></h2>\n<p><strong>SVG</strong> <strong>O</strong>ptimizer – это инструмент для оптимизации векторной графики в формате SVG, написанный на Node.js.\n<img src=\"https://mc.yandex.ru/watch/18431326\" alt=\"\"></p>\n<h2 id=\"-\">Зачем?</h2>\n<p>SVG-файлы, особенно экспортированные из редакторов, содержат много избыточной и бесполезной информации, комментариев, скрытых элементов, неоптимальные или стандартные значения и другой мусор, удаление которого безопасно и не влияет на конечный вид изображения.</p>\n<h2 id=\"-\">Возможности</h2>\n<p>SVGO имеет расширяемую архитектуру, в которой почти каждая оптимизация является отдельным расширением.</p>\n<p>Что у нас есть:</p>\n<table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/cleanupAttrs.js\">cleanupAttrs</a></td>\n<td>удаление переносов строк и лишних пробелов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/inlineStyles.js\">inlineStyles</a></td>\n<td>перенос стилей из элементов <code>&lt;style&gt;</code> в атрибуты <code>style</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeDoctype.js\">removeDoctype</a></td>\n<td>удаление doctype</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeXMLProcInst.js\">removeXMLProcInst</a></td>\n<td>удаление XML-инструкций</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeComments.js\">removeComments</a></td>\n<td>удаление комментариев</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeMetadata.js\">removeMetadata</a></td>\n<td>удаление <code>&lt;metadata&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeTitle.js\">removeTitle</a></td>\n<td>удаление <code>&lt;title&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeDesc.js\">removeDesc</a></td>\n<td>удаление <code>&lt;desc&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeUselessDefs.js\">removeUselessDefs</a></td>\n<td>удаление элементов в <code>&lt;defs&gt;</code> без <code>id</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeXMLNS.js\">removeXMLNS</a></td>\n<td>удаление атрибута xmlns (для заинлайненных svg, выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeEditorsNSData.js\">removeEditorsNSData</a></td>\n<td>удаление пространств имён различных редакторов, их элементов и атрибутов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeEmptyAttrs.js\">removeEmptyAttrs</a></td>\n<td>удаление пустых атрибутов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeHiddenElems.js\">removeHiddenElems</a></td>\n<td>удаление скрытых элементов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeEmptyText.js\">removeEmptyText</a></td>\n<td>удаление пустых текстовых элементов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeEmptyContainers.js\">removeEmptyContainers</a></td>\n<td>удаление пустых элементов-контейнеров</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeViewBox.js\">removeViewBox</a></td>\n<td>удаление атрибута <code>viewBox</code>, когда это возможно</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/cleanupEnableBackground.js\">cleanupEnableBackground</a></td>\n<td>удаление или оптимизация атрибута <code>enable-background</code>, когда это возможно</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/minifyStyles.js\">minifyStyles</a></td>\n<td>уменьшает содержимое элементов <code>&lt;style&gt;</code> с помощью <a href=\"https://github.com/css/csso\">CSSO</a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/convertStyleToAttrs.js\">convertStyleToAttrs</a></td>\n<td>конвертирование стилей в атрибуте <code>style</code> в отдельные svg-атрибуты</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/convertColors.js\">convertColors</a></td>\n<td>конвертирование цветовых значений: из <code>rgb()</code> в <code>#rrggbb</code>, из <code>#rrggbb</code> в <code>#rgb</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/convertPathData.js\">convertPathData</a></td>\n<td>конвертирование данных Path в относительные или абсолютные координаты, смотря что</td>\n<td>короче; конвертирование одних типов сегментов в другие; удаление ненужных разделителей; умное округление и тому подобное</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/convertTransform.js\">convertTransform</a></td>\n<td>схлопывание нескольких трансформаций в одну, конвертирование матриц в короткие алиасы</td>\n<td>и многое другое</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeUnknownsAndDefaults.js\">removeUnknownsAndDefaults</a></td>\n<td>удаление неизвестных элементов, контента и атрибутов</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeNonInheritableGroupAttrs.js\">removeNonInheritableGroupAttrs</a></td>\n<td>удаление ненаследуемых &quot;презентационных&quot; атрибутов групп</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js\">removeUselessStrokeAndFill</a></td>\n<td>удаление неиспользуемых атрибутов stroke-<em> и fill-</em></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeUnusedNS.js\">removeUnusedNS</a></td>\n<td>удаление  деклараций неиспользуемых пространств имён</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/prefixIds.js\">prefixIds</a></td>\n<td>добавляет префикс в ID или классы в виде имени файла или произвольной строки</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/cleanupIDs.js\">cleanupIDs</a></td>\n<td>удаление неиспользуемых и сокращение используемых ID</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js\">cleanupNumericValues</a></td>\n<td>округление дробных чисел до заданной точности, удаление <code>px</code> как единицы</td>\n<td>измерения по-умолчанию</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/cleanupListOfValues.js\">cleanupListOfValues</a></td>\n<td>округление числовых значений в атрибутах со списком чисел, таких как <code>viewBox</code></td>\n<td>или <code>enableBackground</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/moveElemsAttrsToGroup.js\">moveElemsAttrsToGroup</a></td>\n<td>перемещение совпадающих атрибутов у всех элементов внутри группы <code>&lt;g&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/moveGroupAttrsToElems.js\">moveGroupAttrsToElems</a></td>\n<td>перемещение некоторых атрибутов группы на элементы внутри</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/collapseGroups.js\">collapseGroups</a></td>\n<td>схлопывание бесполезных групп <code>&lt;g&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeRasterImages.js\">removeRasterImages</a></td>\n<td>удаление растровых изображений (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/mergePaths.js\">mergePaths</a></td>\n<td>склеивание нескольких Path в одну кривую</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js\">convertShapeToPath</a></td>\n<td>конвертирование простых форм в Path</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/sortAttrs.js\">sortAttrs</a></td>\n<td>сортировка атрибутов элементов для удобочитаемости (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js\">removeDimensions</a></td>\n<td>удаляет атрибуты width/height при наличии viewBox (противоречит removeViewBox — плагин должен быть выключен) (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeAttrs.js\">removeAttrs</a></td>\n<td>удаляет атрибуты по указанному паттерну (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeAttributesBySelector.js\">removeAttributesBySelector</a></td>\n<td>удаляет атрибуты по CSS-селектору (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeElementsByAttr.js\">removeElementsByAttr</a></td>\n<td>удаляет элементы по указанным ID или классам (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/addClassesToSVGElement.js\">addClassesToSVGElement</a></td>\n<td>добавляет имена классов корневому элементу <code>&lt;svg&gt;</code> (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/addAttributesToSVGElement.js\">addAttributesToSVGElement</a></td>\n<td>добавляет атрибуты корневому элементу <code>&lt;svg&gt;</code> (выключено</td>\n<td>по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeOffCanvasPaths.js\">removeOffCanvasPaths</a></td>\n<td>удаляет элементы вне отрисовываемой области (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeStyleElement.js\">removeStyleElement</a></td>\n<td>удаляет элементы <code>&lt;style&gt;</code> (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/removeScriptElement.js\">removeScriptElement</a></td>\n<td>удаляет элементы <code>&lt;script&gt;</code> (выключено по умолчанию)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/svg/svgo/blob/master/plugins/reusePaths.js\">reusePaths</a></td>\n<td>Заменяет дублирующиеся элементы <path> ссылками <use> (выключено по умолчанию)</td>\n</tr>\n</tbody>\n</table>\n<p>Хотите узнать принципы работы и как написать свой плагин? <a href=\"https://github.com/svg/svgo/blob/master/docs/how-it-works/ru.md\">Конечно же, да!</a></p>\n<h2 id=\"-\">Как использовать</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>$&nbsp;[sudo]&nbsp;npm&nbsp;install&nbsp;-g&nbsp;svgo</span></span></div></pre><h2 id=\"-\">Выполнение:</h2>\n<h3 id=\"-\">Командная строка</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Запуск</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>svgo</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other constant tsx\"><span>OPTIONS</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other constant tsx\"><span>ARGS</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Параметры</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>h</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>help</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Помощь</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>v</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Версия</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>программы</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>i</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>INPUT</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>input</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>INPUT</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Входной</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>файл</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>-</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>STDIN</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>s</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>STRING</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>string</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>STRING</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Входная</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>строка</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>SVG</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>f</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>FOLDER</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>folder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>FOLDER</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Входная</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>папка</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>оптимизирует</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>и</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>перезаписывает</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>все</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>файлы</span></span><span>&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>*</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>svg</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>o</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>OUTPUT</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>output</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>OUTPUT</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Выходной</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>файл</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>или</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>папка</span></span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>совпадает</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>с</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>входным</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>по</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>умолчанию</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>-</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>STDOUT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>p</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>PRECISION</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>precision</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>PRECISION</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Число</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>цифр</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>после</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>запятой</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>переопределяет</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>параметры</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагинов</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>config</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>CONFIG</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Файл</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>конфигурации</span></span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>или</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>строка</span></span><span>&nbsp;</span><span class=\"support constant json tsx\"><span>JSON</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>расширения</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>и</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>замены</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>настроек</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>disable</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>PLUGIN</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Выключение</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагина</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>по</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>имени</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>--disable=PLUGIN1,PLUGIN2</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>отключения</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>нескольких</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагинов</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>enable</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>PLUGIN</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Включение</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагина</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>по</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>имени</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>--enable=PLUGIN3,PLUGIN4</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>отключения</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>нескольких</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагинов</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>datauri</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>DATAURI</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Результат</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>в</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>виде</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>строки</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Data</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>URI</span></span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>base64</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>URI</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>encoded</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>или</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>unencoded</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>multipass</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Оптимизация</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>в</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>несколько</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>проходов</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>применения</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>всех</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>возможных</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>оптимизаций</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>pretty</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Удобочитаемое</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>форматирование</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>SVG</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>indent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"variable other constant tsx\"><span>INDENT</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Размер</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>отступа</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>для</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>удобочитаемого</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>форматирования</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>r</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>recursive</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Совместно</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>с</span></span><span>&nbsp;</span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>-f</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span>&nbsp;</span><span class=\"variable other property tsx\"><span>Рекурсивно</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>обрабатывать</span></span><span>&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>*</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>svg</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>файлы</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>в</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>папках</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>q</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>quiet</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Подавляет</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>вывод</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>информации</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>выводятся</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>только</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>сообщения</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>об</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>ошибках</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>show</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>plugins</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Доступные</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>плагины</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Аргументы</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"variable other constant tsx\"><span>INPUT</span></span><span>&nbsp;:&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Аналогично</span></span><span>&nbsp;</span><span class=\"keyword operator decrement tsx\"><span>--</span></span><span class=\"variable other readwrite tsx\"><span>input</span></span></span></div></pre><ul>\n<li><p>с файлами:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;test.svg</span></span></div></pre><p>  или:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;*.svg</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;test.svg&nbsp;-o&nbsp;test.min.svg</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;test.svg&nbsp;other.svg&nbsp;third.svg</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;test.svg&nbsp;other.svg&nbsp;third.svg&nbsp;-o&nbsp;test.min.svg&nbsp;-o&nbsp;other.min.svg&nbsp;-o&nbsp;third.min.svg</span></span></div></pre></li>\n<li><p>со STDIN / STDOUT:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;cat&nbsp;test.svg&nbsp;|&nbsp;svgo&nbsp;-i&nbsp;-&nbsp;-o&nbsp;-&nbsp;&gt;&nbsp;test.min.svg</span></span></div></pre></li>\n<li><p>с папками</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;-f&nbsp;../path/to/folder/with/svg/files</span></span></div></pre><p>  или:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;-f&nbsp;../path/to/folder/with/svg/files&nbsp;-o&nbsp;../path/to/folder/with/svg/output</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;*.svg&nbsp;-o&nbsp;../path/to/folder/with/svg/output</span></span></div></pre></li>\n<li><p>со строками:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;-s&nbsp;&#39;&lt;svg&nbsp;version=&quot;1.1&quot;&gt;test&lt;/svg&gt;&#39;&nbsp;-o&nbsp;test.min.svg</span></span></div></pre><p>  или даже с Data URI base64:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;-s&nbsp;&#39;data:image/svg+xml;base64,…&#39;&nbsp;-o&nbsp;test.min.svg</span></span></div></pre></li>\n<li><p>с SVGZ:</p>\n<p>  из <code>.svgz</code> в <code>.svg</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;gunzip&nbsp;-c&nbsp;test.svgz&nbsp;|&nbsp;svgo&nbsp;-i&nbsp;-&nbsp;-o&nbsp;test.min.svg</span></span></div></pre><p>  из <code>.svg</code> в <code>.svgz</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;$&nbsp;svgo&nbsp;test.svg&nbsp;-o&nbsp;-&nbsp;|&nbsp;gzip&nbsp;-cfq9&nbsp;&gt;&nbsp;test.svgz</span></span></div></pre></li>\n</ul>\n<h3 id=\"-svgo\">Другие способы использования SVGO</h3>\n<ul>\n<li>в виде веб-приложения - <a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a></li>\n<li>как модуль Node.js – <a href=\"https://github.com/svg/svgo/tree/master/examples\">examples</a></li>\n<li>как таск для Grunt – <a href=\"https://github.com/sindresorhus/grunt-svgmin\">grunt-svgmin</a></li>\n<li>как таск для Gulp – <a href=\"https://github.com/ben-eb/gulp-svgmin\">gulp-svgmin</a></li>\n<li>как таск для Mimosa – <a href=\"https://github.com/dbashford/mimosa-minify-svg\">mimosa-minify-svg</a></li>\n<li>как действие папки в OSX – <a href=\"https://github.com/svg/svgo-osx-folder-action\">svgo-osx-folder-action</a></li>\n<li>через загрузчик webpack – <a href=\"https://github.com/tcoopman/image-webpack-loader\">image-webpack-loader</a></li>\n<li>с помощью бота в Telegram – <a href=\"https://github.com/maksugr/svgo_bot\">svgo_bot</a></li>\n<li>как плагин PostCSS - <a href=\"https://github.com/ben-eb/postcss-svgo\">postcss-svgo</a></li>\n<li>как плагин для Inkscape – <a href=\"https://github.com/konsumer/inkscape-svgo\">inkscape-svgo</a></li>\n<li>как плагин для Sketch - <a href=\"https://github.com/BohemianCoding/svgo-compressor\">svgo-compressor</a></li>\n<li>в виде приложения macOS - <a href=\"https://image-shrinker.com\">Image Shrinker</a></li>\n<li>как плагин для Rollup - <a href=\"https://github.com/porsager/rollup-plugin-svgo\">rollup-plugin-svgo</a></li>\n</ul>\n<h2 id=\"-\">Лицензия и копирайты</h2>\n<p>Данное программное обеспечение выпускается под <a href=\"https://github.com/svg/svgo/blob/master/LICENSE\">лицензией MIT</a>.</p>\n<p>Логотип – <a href=\"http://xizzzy.ru/\">Егор Большаков</a>.</p>\n"
      ],
      "contentsRaw": "[english](https://github.com/svg/svgo/blob/master/README.md) | **русский**\n- - -\n\n<img src=\"https://svg.github.io/svgo-logo.svg\" width=\"200\" height=\"200\" alt=\"logo\"/>\n\n## SVGO [![NPM version](https://badge.fury.io/js/svgo.svg)](https://npmjs.org/package/svgo) [![Build Status](https://secure.travis-ci.org/svg/svgo.svg)](https://travis-ci.org/svg/svgo) [![Coverage Status](https://img.shields.io/coveralls/svg/svgo.svg)](https://coveralls.io/r/svg/svgo?branch=master)\n\n**SVG** **O**ptimizer – это инструмент для оптимизации векторной графики в формате SVG, написанный на Node.js.\n![](https://mc.yandex.ru/watch/18431326)\n\n## Зачем?\n\nSVG-файлы, особенно экспортированные из редакторов, содержат много избыточной и бесполезной информации, комментариев, скрытых элементов, неоптимальные или стандартные значения и другой мусор, удаление которого безопасно и не влияет на конечный вид изображения.\n\n## Возможности\n\nSVGO имеет расширяемую архитектуру, в которой почти каждая оптимизация является отдельным расширением.\n\nЧто у нас есть:\n\n| Plugin | Description |\n| ------ | ----------- |\n| [cleanupAttrs](https://github.com/svg/svgo/blob/master/plugins/cleanupAttrs.js) | удаление переносов строк и лишних пробелов |\n| [inlineStyles](https://github.com/svg/svgo/blob/master/plugins/inlineStyles.js) | перенос стилей из элементов `<style>` в атрибуты `style` |\n| [removeDoctype](https://github.com/svg/svgo/blob/master/plugins/removeDoctype.js) | удаление doctype |\n| [removeXMLProcInst](https://github.com/svg/svgo/blob/master/plugins/removeXMLProcInst.js) | удаление XML-инструкций |\n| [removeComments](https://github.com/svg/svgo/blob/master/plugins/removeComments.js) | удаление комментариев |\n| [removeMetadata](https://github.com/svg/svgo/blob/master/plugins/removeMetadata.js) | удаление `<metadata>` |\n| [removeTitle](https://github.com/svg/svgo/blob/master/plugins/removeTitle.js) | удаление `<title>` |\n| [removeDesc](https://github.com/svg/svgo/blob/master/plugins/removeDesc.js) | удаление `<desc>` |\n| [removeUselessDefs](https://github.com/svg/svgo/blob/master/plugins/removeUselessDefs.js) | удаление элементов в `<defs>` без `id` |\n| [removeXMLNS](https://github.com/svg/svgo/blob/master/plugins/removeXMLNS.js) | удаление атрибута xmlns (для заинлайненных svg, выключено по умолчанию) |\n| [removeEditorsNSData](https://github.com/svg/svgo/blob/master/plugins/removeEditorsNSData.js) | удаление пространств имён различных редакторов, их элементов и атрибутов |\n| [removeEmptyAttrs](https://github.com/svg/svgo/blob/master/plugins/removeEmptyAttrs.js) | удаление пустых атрибутов |\n| [removeHiddenElems](https://github.com/svg/svgo/blob/master/plugins/removeHiddenElems.js) | удаление скрытых элементов |\n| [removeEmptyText](https://github.com/svg/svgo/blob/master/plugins/removeEmptyText.js) | удаление пустых текстовых элементов |\n| [removeEmptyContainers](https://github.com/svg/svgo/blob/master/plugins/removeEmptyContainers.js) | удаление пустых элементов-контейнеров |\n| [removeViewBox](https://github.com/svg/svgo/blob/master/plugins/removeViewBox.js) | удаление атрибута `viewBox`, когда это возможно |\n| [cleanupEnableBackground](https://github.com/svg/svgo/blob/master/plugins/cleanupEnableBackground.js) | удаление или оптимизация атрибута `enable-background`, когда это возможно |\n| [minifyStyles](https://github.com/svg/svgo/blob/master/plugins/minifyStyles.js) | уменьшает содержимое элементов `<style>` с помощью [CSSO](https://github.com/css/csso). |\n| [convertStyleToAttrs](https://github.com/svg/svgo/blob/master/plugins/convertStyleToAttrs.js) | конвертирование стилей в атрибуте `style` в отдельные svg-атрибуты |\n| [convertColors](https://github.com/svg/svgo/blob/master/plugins/convertColors.js) | конвертирование цветовых значений: из `rgb()` в `#rrggbb`, из `#rrggbb` в `#rgb` |\n| [convertPathData](https://github.com/svg/svgo/blob/master/plugins/convertPathData.js) | конвертирование данных Path в относительные или абсолютные координаты, смотря что  |короче; конвертирование одних типов сегментов в другие; удаление ненужных разделителей; умное округление и тому подобное\n| [convertTransform](https://github.com/svg/svgo/blob/master/plugins/convertTransform.js) | схлопывание нескольких трансформаций в одну, конвертирование матриц в короткие алиасы  |и многое другое\n| [removeUnknownsAndDefaults](https://github.com/svg/svgo/blob/master/plugins/removeUnknownsAndDefaults.js) | удаление неизвестных элементов, контента и атрибутов |\n| [removeNonInheritableGroupAttrs](https://github.com/svg/svgo/blob/master/plugins/removeNonInheritableGroupAttrs.js) | удаление ненаследуемых \"презентационных\" атрибутов групп |\n| [removeUselessStrokeAndFill](https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js) | удаление неиспользуемых атрибутов stroke-* и fill-* |\n| [removeUnusedNS](https://github.com/svg/svgo/blob/master/plugins/removeUnusedNS.js) | удаление  деклараций неиспользуемых пространств имён |\n| [prefixIds](https://github.com/svg/svgo/blob/master/plugins/prefixIds.js) | добавляет префикс в ID или классы в виде имени файла или произвольной строки |\n| [cleanupIDs](https://github.com/svg/svgo/blob/master/plugins/cleanupIDs.js) | удаление неиспользуемых и сокращение используемых ID |\n| [cleanupNumericValues](https://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js) | округление дробных чисел до заданной точности, удаление `px` как единицы  |измерения по-умолчанию\n| [cleanupListOfValues](https://github.com/svg/svgo/blob/master/plugins/cleanupListOfValues.js) | округление числовых значений в атрибутах со списком чисел, таких как `viewBox`  |или `enableBackground`\n| [moveElemsAttrsToGroup](https://github.com/svg/svgo/blob/master/plugins/moveElemsAttrsToGroup.js) | перемещение совпадающих атрибутов у всех элементов внутри группы `<g>` |\n| [moveGroupAttrsToElems](https://github.com/svg/svgo/blob/master/plugins/moveGroupAttrsToElems.js) | перемещение некоторых атрибутов группы на элементы внутри |\n| [collapseGroups](https://github.com/svg/svgo/blob/master/plugins/collapseGroups.js) | схлопывание бесполезных групп `<g>` |\n| [removeRasterImages](https://github.com/svg/svgo/blob/master/plugins/removeRasterImages.js) | удаление растровых изображений (выключено по умолчанию) |\n| [mergePaths](https://github.com/svg/svgo/blob/master/plugins/mergePaths.js) | склеивание нескольких Path в одну кривую |\n| [convertShapeToPath](https://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js) | конвертирование простых форм в Path |\n| [sortAttrs](https://github.com/svg/svgo/blob/master/plugins/sortAttrs.js) | сортировка атрибутов элементов для удобочитаемости (выключено по умолчанию) |\n| [removeDimensions](https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js) | удаляет атрибуты width/height при наличии viewBox (противоречит removeViewBox — плагин должен быть выключен) (выключено по умолчанию) |\n| [removeAttrs](https://github.com/svg/svgo/blob/master/plugins/removeAttrs.js) | удаляет атрибуты по указанному паттерну (выключено по умолчанию) |\n| [removeAttributesBySelector](https://github.com/svg/svgo/blob/master/plugins/removeAttributesBySelector.js) | удаляет атрибуты по CSS-селектору (выключено по умолчанию) |\n| [removeElementsByAttr](https://github.com/svg/svgo/blob/master/plugins/removeElementsByAttr.js) | удаляет элементы по указанным ID или классам (выключено по умолчанию) |\n| [addClassesToSVGElement](https://github.com/svg/svgo/blob/master/plugins/addClassesToSVGElement.js) | добавляет имена классов корневому элементу `<svg>` (выключено по умолчанию) |\n| [addAttributesToSVGElement](https://github.com/svg/svgo/blob/master/plugins/addAttributesToSVGElement.js) | добавляет атрибуты корневому элементу `<svg>` (выключено  |по умолчанию)\n| [removeOffCanvasPaths](https://github.com/svg/svgo/blob/master/plugins/removeOffCanvasPaths.js) | удаляет элементы вне отрисовываемой области (выключено по умолчанию) |\n| [removeStyleElement](https://github.com/svg/svgo/blob/master/plugins/removeStyleElement.js) | удаляет элементы `<style>` (выключено по умолчанию) |\n| [removeScriptElement](https://github.com/svg/svgo/blob/master/plugins/removeScriptElement.js) | удаляет элементы `<script>` (выключено по умолчанию) |\n| [reusePaths](https://github.com/svg/svgo/blob/master/plugins/reusePaths.js) | Заменяет дублирующиеся элементы <path> ссылками <use> (выключено по умолчанию) |\n\nХотите узнать принципы работы и как написать свой плагин? [Конечно же, да!](https://github.com/svg/svgo/blob/master/docs/how-it-works/ru.md)\n\n\n## Как использовать\n\n```sh\n$ [sudo] npm install -g svgo\n```\n\n## Выполнение:\n\n### Командная строка\n\n```\nЗапуск:\n  svgo [OPTIONS] [ARGS]\n\nПараметры:\n  -h, --help : Помощь\n  -v, --version : Версия программы\n  -i INPUT, --input=INPUT : Входной файл, \"-\" для STDIN\n  -s STRING, --string=STRING : Входная строка SVG\n  -f FOLDER, --folder=FOLDER : Входная папка, оптимизирует и перезаписывает все файлы *.svg\n  -o OUTPUT, --output=OUTPUT : Выходной файл или папка (совпадает с входным по умолчанию), \"-\" для STDOUT\n  -p PRECISION, --precision=PRECISION : Число цифр после запятой, переопределяет параметры плагинов\n  --config=CONFIG : Файл конфигурации (или строка JSON) для расширения и замены настроек\n  --disable=PLUGIN : Выключение плагина по имени, \"--disable=PLUGIN1,PLUGIN2\" для отключения нескольких плагинов\n  --enable=PLUGIN : Включение плагина по имени, \"--enable=PLUGIN3,PLUGIN4\" для отключения нескольких плагинов\n  --datauri=DATAURI : Результат в виде строки Data URI (base64, URI encoded или unencoded)\n  --multipass : Оптимизация в несколько проходов для применения всех возможных оптимизаций\n  --pretty : Удобочитаемое форматирование SVG\n  --indent=INDENT : Размер отступа для удобочитаемого форматирования\n  -r, --recursive : Совместно с '-f'. Рекурсивно обрабатывать *.svg файлы в папках.\n  -q, --quiet : Подавляет вывод информации, выводятся только сообщения об ошибках\n  --show-plugins : Доступные плагины\n\nАргументы:\n  INPUT : Аналогично --input\n```\n\n* с файлами:\n\n    ```sh\n    $ svgo test.svg\n    ```\n\n    или:\n\n    ```sh\n    $ svgo *.svg\n    ```\n\n    ```sh\n    $ svgo test.svg -o test.min.svg\n    ```\n\n    ```sh\n    $ svgo test.svg other.svg third.svg\n    ```\n\n    ```sh\n    $ svgo test.svg other.svg third.svg -o test.min.svg -o other.min.svg -o third.min.svg\n    ```\n\n* со STDIN / STDOUT:\n\n    ```sh\n    $ cat test.svg | svgo -i - -o - > test.min.svg\n    ```\n\n* с папками\n\n    ```sh\n    $ svgo -f ../path/to/folder/with/svg/files\n    ```\n\n    или:\n\n    ```sh\n    $ svgo -f ../path/to/folder/with/svg/files -o ../path/to/folder/with/svg/output\n    ```\n\n    ```sh\n    $ svgo *.svg -o ../path/to/folder/with/svg/output\n    ```\n\n* со строками:\n\n    ```sh\n    $ svgo -s '<svg version=\"1.1\">test</svg>' -o test.min.svg\n    ```\n\n    или даже с Data URI base64:\n\n    ```sh\n    $ svgo -s 'data:image/svg+xml;base64,…' -o test.min.svg\n    ```\n\n* с SVGZ:\n\n    из `.svgz` в `.svg`:\n\n    ```sh\n    $ gunzip -c test.svgz | svgo -i - -o test.min.svg\n    ```\n\n    из `.svg` в `.svgz`:\n\n    ```sh\n    $ svgo test.svg -o - | gzip -cfq9 > test.svgz\n    ```\n\n### Другие способы использования SVGO\n\n* в виде веб-приложения - [SVGOMG](https://jakearchibald.github.io/svgomg/)\n* как модуль Node.js – [examples](https://github.com/svg/svgo/tree/master/examples)\n* как таск для Grunt – [grunt-svgmin](https://github.com/sindresorhus/grunt-svgmin)\n* как таск для Gulp – [gulp-svgmin](https://github.com/ben-eb/gulp-svgmin)\n* как таск для Mimosa – [mimosa-minify-svg](https://github.com/dbashford/mimosa-minify-svg)\n* как действие папки в OSX – [svgo-osx-folder-action](https://github.com/svg/svgo-osx-folder-action)\n* через загрузчик webpack – [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)\n* с помощью бота в Telegram – [svgo_bot](https://github.com/maksugr/svgo_bot)\n* как плагин PostCSS - [postcss-svgo](https://github.com/ben-eb/postcss-svgo)\n* как плагин для Inkscape – [inkscape-svgo](https://github.com/konsumer/inkscape-svgo)\n* как плагин для Sketch - [svgo-compressor](https://github.com/BohemianCoding/svgo-compressor)\n* в виде приложения macOS - [Image Shrinker](https://image-shrinker.com)\n* как плагин для Rollup - [rollup-plugin-svgo](https://github.com/porsager/rollup-plugin-svgo)\n\n## Лицензия и копирайты\n\nДанное программное обеспечение выпускается под [лицензией MIT](https://github.com/svg/svgo/blob/master/LICENSE).\n\nЛоготип – [Егор Большаков](http://xizzzy.ru/).",
      "metadata": {}
    },
    "ast": {
      "reference": "ast",
      "route": "ast",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\ast.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"ast-format\">AST format</h1>\n<p>CSSTree&#39;s AST consists of nodes (leafs). Each node is an object with a set of properties that depends on node&#39;s type. Nodes can refers to other nodes and contain a list of nested nodes.</p>\n<p>Interactively explore the AST with <a href=\"https://astexplorer.net/#/gist/244e2fb4da940df52bf0f4b94277db44/e79aff44611020b22cfd9708f3a99ce09b7d67a8\">AST Explorer</a>.</p>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#example\">Example</a></li>\n<li><a href=\"#common-nodes-properties\">Common node&#39;s properties</a><ul>\n<li><a href=\"#type\">type</a></li>\n<li><a href=\"#loc\">loc</a></li>\n<li><a href=\"#children\">children</a></li>\n</ul>\n</li>\n<li><a href=\"#node-types\">Node types</a><ul>\n<li><a href=\"#anplusb\">AnPlusB</a></li>\n<li><a href=\"#atrule\">Atrule</a></li>\n<li><a href=\"#atruleprelude\">AtrulePrelude</a></li>\n<li><a href=\"#attributeselector\">AttributeSelector</a></li>\n<li><a href=\"#block\">Block</a></li>\n<li><a href=\"#brackets\">Brackets</a></li>\n<li><a href=\"#cdc\">CDC</a></li>\n<li><a href=\"#cdo\">CDO</a></li>\n<li><a href=\"#classselector\">ClassSelector</a></li>\n<li><a href=\"#combinator\">Combinator</a></li>\n<li><a href=\"#comment\">Comment</a></li>\n<li><a href=\"#declaration\">Declaration</a></li>\n<li><a href=\"#declarationlist\">DeclarationList</a></li>\n<li><a href=\"#dimension\">Dimension</a></li>\n<li><a href=\"#function\">Function</a></li>\n<li><a href=\"#hexcolor\">HexColor</a></li>\n<li><a href=\"#idselector\">IdSelector</a></li>\n<li><a href=\"#identifier\">Identifier</a></li>\n<li><a href=\"#mediafeature\">MediaFeature</a></li>\n<li><a href=\"#mediaquery\">MediaQuery</a></li>\n<li><a href=\"#mediaquerylist\">MediaQueryList</a></li>\n<li><a href=\"#nth\">Nth</a></li>\n<li><a href=\"#number\">Number</a></li>\n<li><a href=\"#operator\">Operator</a></li>\n<li><a href=\"#parentheses\">Parentheses</a></li>\n<li><a href=\"#percentage\">Percentage</a></li>\n<li><a href=\"#pseudoclassselector\">PseudoClassSelector</a></li>\n<li><a href=\"#pseudoelementselector\">PseudoElementSelector</a></li>\n<li><a href=\"#ratio\">Ratio</a></li>\n<li><a href=\"#raw\">Raw</a></li>\n<li><a href=\"#rule\">Rule</a></li>\n<li><a href=\"#selector\">Selector</a></li>\n<li><a href=\"#selectorlist\">SelectorList</a></li>\n<li><a href=\"#string\">String</a></li>\n<li><a href=\"#stylesheet\">StyleSheet</a></li>\n<li><a href=\"#typeselector\">TypeSelector</a></li>\n<li><a href=\"#unicoderange\">UnicodeRange</a></li>\n<li><a href=\"#url\">Url</a></li>\n<li><a href=\"#value\">Value</a></li>\n<li><a href=\"#whitespace\">WhiteSpace</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"example\">Example</h2>\n<p>Assume we have a CSS:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span class=\"entity name tag css\"><span>body</span></span><span>&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span class=\"meta property-list css\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name css\"><span class=\"support type property-name css\"><span>color</span></span></span><span class=\"meta property-value css\"><span class=\"punctuation separator key-value css\"><span>:</span></span><span>&nbsp;</span><span class=\"support constant color w3c-standard-color-name css\"><span>red</span></span><span class=\"punctuation terminator rule css\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span class=\"meta property-list css\"><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><p>An AST for this CSS might look like:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>StyleSheet</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Rule</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prelude</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>SelectorList</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Selector</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>TypeSelector</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>body</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;block</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Block</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;important</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;property</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>color</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Value</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Identifier</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>red</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><blockquote>\n<p>NOTE: The example uses arrays for the values of the property <code>children</code>. In fact, the values of this property are instances of the <a href=\"List.md\"><code>List</code></a> class.</p>\n</blockquote>\n<p>An AST structure (i.e. details level, include positions or not) is depend on options passed to parser. See <a href=\"parsing.md\">Parsing CSS into AST</a> for details.</p>\n<h2 id=\"common-node-s-properties\">Common node&#39;s properties</h2>\n<p>All nodes have the following properties.</p>\n<h3 id=\"type\">type</h3>\n<p>Type: <code>String</code></p>\n<p>Indicates the type of a node. The possible values are the ones listed in the <a href=\"#node-types\">Node types</a> below.</p>\n<h3 id=\"loc\">loc</h3>\n<p>Type: <code>Object</code> or <code>null</code></p>\n<p>Information about the position in the source string that corresponds to the node. It has the following structure:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;source</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;start</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;end</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Number</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p>The <code>source</code> property contains value of <code>options.filename</code> if passed to <code>csstree.parse()</code>, otherwise <code>&quot;&lt;unknown&gt;&quot;</code>.</p>\n<p>The <code>offset</code> number is zero-based, indicates the index in a source string passed to the parser.</p>\n<p>The <code>line</code> and <code>column</code> numbers are 1-based: the first line is <code>1</code> and the first column of a line is <code>1</code>.</p>\n<p>The <code>loc</code> property lets you know from which source file the node comes from (if available) and what part of that file was parsed into the node. By default parser doesn&#39;t include <code>loc</code> data into the AST (sets <code>null</code> for this property), you should pass <code>options.positions</code> equal to <code>true</code> to make <code>loc</code> filled.</p>\n<h3 id=\"children\">children</h3>\n<p>Type: <code>List</code> or <code>null</code>  </p>\n<p>Only certain types of nodes can contain this property, such as <a href=\"#stylesheet\"><code>StyleSheet</code></a> or <a href=\"#block\"><code>Block</code></a>. However, this is the only property that can store a list of nested nodes.</p>\n<p>Most node types always store an instance of the <code>List</code> in this property, even if there is no nested nodes (the list is empty). Only some node types, such as <code>PseudoClassSelector</code> and <code>PseudoElementSelector</code>, can store a <code>null</code> instead of a list. This is due to the fact that in the absence of a list such node types is represent a pseudo-selector, and in the presence of a list, a functional pseudo-selector. See definition of each node type for details.</p>\n<h2 id=\"node-types\">Node types</h2>\n<blockquote>\n<p>NOTE: Despite every node has a <code>loc</code> property, this property is excluded from definitions to reduce a noise.</p>\n</blockquote>\n<!-- node types -->\n<h3 id=\"anplusb\">AnPlusB</h3>\n<p>Used for <a href=\"https://drafts.csswg.org/css-syntax/#anb-microsyntax\">the An+B microsyntax</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>AnPlusB</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;a</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;b</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p><code>a</code> or <code>b</code> fields may have no value (equals to <code>null</code>) but not both at the same time. Parser normalizes <code>a</code> value to store a valid integer, i.e. parser will store <code>-1</code> for <code>-n</code> and <code>1</code> for <code>n</code>.</p>\n<h3 id=\"atrule\">Atrule</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Atrule</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;prelude</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>AtrulePrelude</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Raw</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;block</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Block</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"atruleprelude\">AtrulePrelude</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>AtrulePrelude</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"attributeselector\">AttributeSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>AttributeSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Identifier</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;matcher</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"support class js\"><span>String</span></span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Identifier</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;flags</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"block\">Block</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Block</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"brackets\">Brackets</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Brackets</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"cdc\">CDC</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>CDC</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"cdo\">CDO</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>CDO</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"classselector\">ClassSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ClassSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"combinator\">Combinator</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Combinator</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"comment\">Comment</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Comment</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"declaration\">Declaration</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Declaration</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;important</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Boolean</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;property</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Value</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Raw</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"declarationlist\">DeclarationList</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>DeclarationList</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"dimension\">Dimension</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Dimension</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;unit</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"function\">Function</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Function</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"hexcolor\">HexColor</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>HexColor</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"idselector\">IdSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>IdSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"identifier\">Identifier</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Identifier</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"mediafeature\">MediaFeature</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>MediaFeature</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Identifier</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"support class js\"><span>Number</span></span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Dimension</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Ratio</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"mediaquery\">MediaQuery</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>MediaQuery</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"mediaquerylist\">MediaQueryList</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>MediaQueryList</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"nth\">Nth</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Nth</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;nth</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>AnPlusB</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Identifier</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;selector</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>SelectorList</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"number\">Number</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Number</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"operator\">Operator</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Operator</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"parentheses\">Parentheses</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Parentheses</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"percentage\">Percentage</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Percentage</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"pseudoclassselector\">PseudoClassSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>PseudoClassSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"pseudoelementselector\">PseudoElementSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>PseudoElementSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"ratio\">Ratio</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Ratio</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;left</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;right</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"raw\">Raw</h3>\n<p>A sequence of any characters. This node type is used for unparsed fragments of CSS, e.g. due to parse error or parser settings, and for quirk parts like content of some functions, such as <code>url()</code> or <code>expression()</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Raw</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"rule\">Rule</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Rule</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;prelude</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>SelectorList</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Raw</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;block</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Block</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"selector\">Selector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Selector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"selectorlist\">SelectorList</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>SelectorList</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"string\">String</h3>\n<p>A sequence of characters enclosed in double quotes or single quotes.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>String</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"stylesheet\">StyleSheet</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>StyleSheet</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"typeselector\">TypeSelector</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>TypeSelector</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"unicoderange\">UnicodeRange</h3>\n<p>Used for <a href=\"https://drafts.csswg.org/css-syntax/#urange\">the Unicode-Range microsyntax</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>UnicodeRange</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"url\">Url</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Url</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"support class js\"><span>String</span></span><span class=\"keyword operator comparison js\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"keyword operator bitwise js\"><span>|</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>Raw</span><span class=\"keyword operator comparison js\"><span>&gt;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"value\">Value</h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Value</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;List</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"whitespace\">WhiteSpace</h3>\n<p>A sequence of one or more white spaces, i.e. <code></code> (space), <code>\\t</code>, <code>\\r</code>, <code>\\n</code> and <code>\\f</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>WhiteSpace</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"support class js\"><span>String</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><!-- /node types -->"
      ],
      "contentsRaw": "# AST format\n\nCSSTree's AST consists of nodes (leafs). Each node is an object with a set of properties that depends on node's type. Nodes can refers to other nodes and contain a list of nested nodes.\n\nInteractively explore the AST with [AST Explorer](https://astexplorer.net/#/gist/244e2fb4da940df52bf0f4b94277db44/e79aff44611020b22cfd9708f3a99ce09b7d67a8).\n\n<!-- MarkdownTOC -->\n\n- [Example](#example)\n- [Common node's properties](#common-nodes-properties)\n    - [type](#type)\n    - [loc](#loc)\n    - [children](#children)\n- [Node types](#node-types)\n    - [AnPlusB](#anplusb)\n    - [Atrule](#atrule)\n    - [AtrulePrelude](#atruleprelude)\n    - [AttributeSelector](#attributeselector)\n    - [Block](#block)\n    - [Brackets](#brackets)\n    - [CDC](#cdc)\n    - [CDO](#cdo)\n    - [ClassSelector](#classselector)\n    - [Combinator](#combinator)\n    - [Comment](#comment)\n    - [Declaration](#declaration)\n    - [DeclarationList](#declarationlist)\n    - [Dimension](#dimension)\n    - [Function](#function)\n    - [HexColor](#hexcolor)\n    - [IdSelector](#idselector)\n    - [Identifier](#identifier)\n    - [MediaFeature](#mediafeature)\n    - [MediaQuery](#mediaquery)\n    - [MediaQueryList](#mediaquerylist)\n    - [Nth](#nth)\n    - [Number](#number)\n    - [Operator](#operator)\n    - [Parentheses](#parentheses)\n    - [Percentage](#percentage)\n    - [PseudoClassSelector](#pseudoclassselector)\n    - [PseudoElementSelector](#pseudoelementselector)\n    - [Ratio](#ratio)\n    - [Raw](#raw)\n    - [Rule](#rule)\n    - [Selector](#selector)\n    - [SelectorList](#selectorlist)\n    - [String](#string)\n    - [StyleSheet](#stylesheet)\n    - [TypeSelector](#typeselector)\n    - [UnicodeRange](#unicoderange)\n    - [Url](#url)\n    - [Value](#value)\n    - [WhiteSpace](#whitespace)\n\n<!-- /MarkdownTOC -->\n\n## Example\n\nAssume we have a CSS:\n\n```css\nbody {\n    color: red;\n}\n```\n\nAn AST for this CSS might look like:\n\n```js\n{\n    type: 'StyleSheet',\n    loc: null,\n    children: [\n        {\n            type: 'Rule',\n            loc: null,\n            prelude: {\n                type: 'SelectorList',\n                loc: null,\n                children: [\n                    {\n                        type: 'Selector',\n                        loc: null,\n                        children: [\n                            {\n                                type: 'TypeSelector',\n                                loc: null,\n                                name: 'body'\n                            }\n                        ]\n                    }\n                ]\n            },\n            block: {\n                type: 'Block',\n                loc: null,\n                children: [\n                    {\n                        type: 'Declaration',\n                        loc: null,\n                        important: false,\n                        property: 'color',\n                        value: {\n                            type: 'Value',\n                            loc: null,\n                            children: [\n                                {\n                                    type: 'Identifier',\n                                    loc: null,\n                                    name: 'red'\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}\n```\n\n> NOTE: The example uses arrays for the values of the property `children`. In fact, the values of this property are instances of the [`List`](List.md) class.\n\nAn AST structure (i.e. details level, include positions or not) is depend on options passed to parser. See [Parsing CSS into AST](parsing.md) for details.\n\n## Common node's properties\n\nAll nodes have the following properties.\n\n### type\n\nType: `String`\n\nIndicates the type of a node. The possible values are the ones listed in the [Node types](#node-types) below.\n\n### loc\n\nType: `Object` or `null`\n\nInformation about the position in the source string that corresponds to the node. It has the following structure:\n\n```js\n{\n    source: String,\n    start: {\n        offset: Number,\n        line: Number,\n        column: Number\n    },\n    end: {\n        offset: Number,\n        line: Number,\n        column: Number\n    }\n}\n```\n\nThe `source` property contains value of `options.filename` if passed to `csstree.parse()`, otherwise `\"<unknown>\"`.\n\nThe `offset` number is zero-based, indicates the index in a source string passed to the parser.\n\nThe `line` and `column` numbers are 1-based: the first line is `1` and the first column of a line is `1`.\n\nThe `loc` property lets you know from which source file the node comes from (if available) and what part of that file was parsed into the node. By default parser doesn't include `loc` data into the AST (sets `null` for this property), you should pass `options.positions` equal to `true` to make `loc` filled.\n\n### children\n\nType: `List` or `null`  \n\nOnly certain types of nodes can contain this property, such as [`StyleSheet`](#stylesheet) or [`Block`](#block). However, this is the only property that can store a list of nested nodes.\n\nMost node types always store an instance of the `List` in this property, even if there is no nested nodes (the list is empty). Only some node types, such as `PseudoClassSelector` and `PseudoElementSelector`, can store a `null` instead of a list. This is due to the fact that in the absence of a list such node types is represent a pseudo-selector, and in the presence of a list, a functional pseudo-selector. See definition of each node type for details.\n\n## Node types\n\n> NOTE: Despite every node has a `loc` property, this property is excluded from definitions to reduce a noise.\n\n<!-- node types -->\n\n### AnPlusB\n\nUsed for [the An+B microsyntax](https://drafts.csswg.org/css-syntax/#anb-microsyntax).\n\n```js\n{\n    type: \"AnPlusB\",\n    a: String | null,\n    b: String | null\n}\n```\n\n`a` or `b` fields may have no value (equals to `null`) but not both at the same time. Parser normalizes `a` value to store a valid integer, i.e. parser will store `-1` for `-n` and `1` for `n`.\n\n### Atrule\n\n```js\n{\n    type: \"Atrule\",\n    name: String,\n    prelude: <AtrulePrelude> | <Raw> | null,\n    block: <Block> | null\n}\n```\n\n### AtrulePrelude\n\n```js\n{\n    type: \"AtrulePrelude\",\n    children: List\n}\n```\n\n### AttributeSelector\n\n```js\n{\n    type: \"AttributeSelector\",\n    name: <Identifier>,\n    matcher: String | null,\n    value: <String> | <Identifier> | null,\n    flags: String | null\n}\n```\n\n### Block\n\n```js\n{\n    type: \"Block\",\n    children: List\n}\n```\n\n### Brackets\n\n```js\n{\n    type: \"Brackets\",\n    children: List\n}\n```\n\n### CDC\n\n```js\n{\n    type: \"CDC\"\n}\n```\n\n### CDO\n\n```js\n{\n    type: \"CDO\"\n}\n```\n\n### ClassSelector\n\n```js\n{\n    type: \"ClassSelector\",\n    name: String\n}\n```\n\n### Combinator\n\n```js\n{\n    type: \"Combinator\",\n    name: String\n}\n```\n\n### Comment\n\n```js\n{\n    type: \"Comment\",\n    value: String\n}\n```\n\n### Declaration\n\n```js\n{\n    type: \"Declaration\",\n    important: Boolean | String,\n    property: String,\n    value: <Value> | <Raw>\n}\n```\n\n### DeclarationList\n\n```js\n{\n    type: \"DeclarationList\",\n    children: List\n}\n```\n\n### Dimension\n\n```js\n{\n    type: \"Dimension\",\n    value: String,\n    unit: String\n}\n```\n\n### Function\n\n```js\n{\n    type: \"Function\",\n    name: String,\n    children: List\n}\n```\n\n### HexColor\n\n```js\n{\n    type: \"HexColor\",\n    value: String\n}\n```\n\n### IdSelector\n\n```js\n{\n    type: \"IdSelector\",\n    name: String\n}\n```\n\n### Identifier\n\n```js\n{\n    type: \"Identifier\",\n    name: String\n}\n```\n\n### MediaFeature\n\n```js\n{\n    type: \"MediaFeature\",\n    name: String,\n    value: <Identifier> | <Number> | <Dimension> | <Ratio> | null\n}\n```\n\n### MediaQuery\n\n```js\n{\n    type: \"MediaQuery\",\n    children: List\n}\n```\n\n### MediaQueryList\n\n```js\n{\n    type: \"MediaQueryList\",\n    children: List\n}\n```\n\n### Nth\n\n```js\n{\n    type: \"Nth\",\n    nth: <AnPlusB> | <Identifier>,\n    selector: <SelectorList> | null\n}\n```\n\n### Number\n\n```js\n{\n    type: \"Number\",\n    value: String\n}\n```\n\n### Operator\n\n```js\n{\n    type: \"Operator\",\n    value: String\n}\n```\n\n### Parentheses\n\n```js\n{\n    type: \"Parentheses\",\n    children: List\n}\n```\n\n### Percentage\n\n```js\n{\n    type: \"Percentage\",\n    value: String\n}\n```\n\n### PseudoClassSelector\n\n```js\n{\n    type: \"PseudoClassSelector\",\n    name: String,\n    children: List | null\n}\n```\n\n### PseudoElementSelector\n\n```js\n{\n    type: \"PseudoElementSelector\",\n    name: String,\n    children: List | null\n}\n```\n\n### Ratio\n\n```js\n{\n    type: \"Ratio\",\n    left: String,\n    right: String\n}\n```\n\n### Raw\n\nA sequence of any characters. This node type is used for unparsed fragments of CSS, e.g. due to parse error or parser settings, and for quirk parts like content of some functions, such as `url()` or `expression()`.\n\n```js\n{\n    type: \"Raw\",\n    value: String\n}\n```\n\n### Rule\n\n```js\n{\n    type: \"Rule\",\n    prelude: <SelectorList> | <Raw>,\n    block: <Block>\n}\n```\n\n### Selector\n\n```js\n{\n    type: \"Selector\",\n    children: List\n}\n```\n\n### SelectorList\n\n```js\n{\n    type: \"SelectorList\",\n    children: List\n}\n```\n\n### String\n\nA sequence of characters enclosed in double quotes or single quotes.\n\n```js\n{\n    type: \"String\",\n    value: String\n}\n```\n\n### StyleSheet\n\n```js\n{\n    type: \"StyleSheet\",\n    children: List\n}\n```\n\n### TypeSelector\n\n```js\n{\n    type: \"TypeSelector\",\n    name: String\n}\n```\n\n### UnicodeRange\n\nUsed for [the Unicode-Range microsyntax](https://drafts.csswg.org/css-syntax/#urange).\n\n```js\n{\n    type: \"UnicodeRange\",\n    value: String\n}\n```\n\n### Url\n\n```js\n{\n    type: \"Url\",\n    value: <String> | <Raw>\n}\n```\n\n### Value\n\n```js\n{\n    type: \"Value\",\n    children: List\n}\n```\n\n### WhiteSpace\n\nA sequence of one or more white spaces, i.e. ` ` (space), `\\t`, `\\r`, `\\n` and `\\f`.\n\n```js\n{\n    type: \"WhiteSpace\",\n    value: String\n}\n```\n\n<!-- /node types -->",
      "metadata": {}
    },
    "generate": {
      "reference": "generate",
      "route": "generate",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\generate.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"translate-ast-to-string\">Translate AST to string</h1>\n<h2 id=\"generate-ast-options-\">generate(ast[, options])</h2>\n<p>Generates a CSS string for given AST.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;generate&nbsp;with&nbsp;default&nbsp;settings</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;generate&nbsp;with&nbsp;options</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;sourceMap</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Options (optional):</p>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#sourcemap\">sourceMap</a></li>\n<li><a href=\"#decorator\">decorator</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<h3 id=\"sourcemap\">sourceMap</h3>\n<p>Type: <code>boolean</code><br>Default: <code>false</code></p>\n<p>Generates a source map (nodes should contain positions in <code>loc</code> property). Note, that an object instead of string is returned in that case.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.test&nbsp;{&nbsp;color:&nbsp;red&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;filename</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>my.css</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;positions</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;result&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;sourceMap</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{&nbsp;css:&nbsp;&#39;.test{color:red}&#39;,&nbsp;map:&nbsp;SourceMapGenerator&nbsp;{}&nbsp;}</span></span></span></div></pre><h3 id=\"decorator\">decorator</h3>\n<p>Type: <code>function</code><br>Default: none</p>\n<p>A function that a handlers used by a generator. TBD</p>\n"
      ],
      "contentsRaw": "# Translate AST to string\n\n## generate(ast[, options])\n\nGenerates a CSS string for given AST.\n\n```js\n// generate with default settings\ncsstree.generate(ast);\n\n// generate with options\ncsstree.generate(ast, {\n    sourceMap: true\n});\n```\n\nOptions (optional):\n\n<!-- MarkdownTOC -->\n\n- [sourceMap](#sourcemap)\n- [decorator](#decorator)\n\n<!-- /MarkdownTOC -->\n\n### sourceMap\n\nType: `boolean`  \nDefault: `false`\n\nGenerates a source map (nodes should contain positions in `loc` property). Note, that an object instead of string is returned in that case.\n\n```js\nvar ast = csstree.parse('.test { color: red }', {\n    filename: 'my.css',\n    positions: true\n});\n\nvar result = csstree.generate(ast, { sourceMap: true });\n// { css: '.test{color:red}', map: SourceMapGenerator {} }\n```\n\n### decorator\n\nType: `function`  \nDefault: none\n\nA function that a handlers used by a generator. TBD",
      "metadata": {}
    },
    "Lexer": {
      "reference": "Lexer",
      "route": "Lexer",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\Lexer.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"lexer\">Lexer</h1>\n<blockquote>\n<p>To be done</p>\n</blockquote>\n"
      ],
      "contentsRaw": "# Lexer\n\n> To be done",
      "metadata": {}
    },
    "List": {
      "reference": "List",
      "route": "List",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\List.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"list\">List</h1>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#static-methods\">Static methods</a><ul>\n<li><a href=\"#listcreateitem\">List.createItem</a></li>\n</ul>\n</li>\n<li><a href=\"#properties\">Properties</a><ul>\n<li><a href=\"#listhead\">List#head</a></li>\n<li><a href=\"#listtail\">List#tail</a></li>\n<li><a href=\"#listcursor\">List#cursor</a></li>\n</ul>\n</li>\n<li><a href=\"#methods\">Methods</a><ul>\n<li><a href=\"#listcreateitem-1\">List#createItem()</a></li>\n<li><a href=\"#listupdatecursors\">List#updateCursors()</a></li>\n<li><a href=\"#listgetsize\">List#getSize()</a></li>\n<li><a href=\"#listfromarray\">List#fromArray()</a></li>\n<li><a href=\"#listtoarray\">List#toArray()</a></li>\n<li><a href=\"#listtojson\">List#toJSON()</a></li>\n<li><a href=\"#listisempty\">List#isEmpty()</a></li>\n<li><a href=\"#listfirst\">List#first()</a></li>\n<li><a href=\"#listlast\">List#last()</a></li>\n<li><a href=\"#listeach\">List#each()</a></li>\n<li><a href=\"#listforeach\">List#forEach()</a></li>\n<li><a href=\"#listeachright\">List#eachRight()</a></li>\n<li><a href=\"#listforeachright\">List#forEachRight()</a></li>\n<li><a href=\"#listnextuntil\">List#nextUntil()</a></li>\n<li><a href=\"#listprevuntil\">List#prevUntil()</a></li>\n<li><a href=\"#listsome\">List#some()</a></li>\n<li><a href=\"#listmap\">List#map()</a></li>\n<li><a href=\"#listfilter\">List#filter()</a></li>\n<li><a href=\"#listclear\">List#clear()</a></li>\n<li><a href=\"#listcopy\">List#copy()</a></li>\n<li><a href=\"#listprepend\">List#prepend()</a></li>\n<li><a href=\"#listprependdata\">List#prependData()</a></li>\n<li><a href=\"#listappend\">List#append()</a></li>\n<li><a href=\"#listappenddata\">List#appendData()</a></li>\n<li><a href=\"#listinsert\">List#insert()</a></li>\n<li><a href=\"#listinsertdata\">List#insertData()</a></li>\n<li><a href=\"#listremove\">List#remove()</a></li>\n<li><a href=\"#listpush\">List#push()</a></li>\n<li><a href=\"#listpop\">List#pop()</a></li>\n<li><a href=\"#listunshift\">List#unshift()</a></li>\n<li><a href=\"#listshift\">List#shift()</a></li>\n<li><a href=\"#listprependlist\">List#prependList()</a></li>\n<li><a href=\"#listappendlist\">List#appendList()</a></li>\n<li><a href=\"#listinsertlist\">List#insertList()</a></li>\n<li><a href=\"#listreplace\">List#replace()</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"static-methods\">Static methods</h2>\n<h3 id=\"list-createitem\">List.createItem</h3>\n<h2 id=\"properties\">Properties</h2>\n<h3 id=\"list-head\">List#head</h3>\n<h3 id=\"list-tail\">List#tail</h3>\n<h3 id=\"list-cursor\">List#cursor</h3>\n<h2 id=\"methods\">Methods</h2>\n<h3 id=\"list-createitem-\">List#createItem()</h3>\n<h3 id=\"list-updatecursors-\">List#updateCursors()</h3>\n<h3 id=\"list-getsize-\">List#getSize()</h3>\n<h3 id=\"list-fromarray-\">List#fromArray()</h3>\n<h3 id=\"list-toarray-\">List#toArray()</h3>\n<h3 id=\"list-tojson-\">List#toJSON()</h3>\n<h3 id=\"list-isempty-\">List#isEmpty()</h3>\n<h3 id=\"list-first-\">List#first()</h3>\n<h3 id=\"list-last-\">List#last()</h3>\n<h3 id=\"list-each-\">List#each()</h3>\n<h3 id=\"list-foreach-\">List#forEach()</h3>\n<h3 id=\"list-eachright-\">List#eachRight()</h3>\n<h3 id=\"list-foreachright-\">List#forEachRight()</h3>\n<h3 id=\"list-nextuntil-\">List#nextUntil()</h3>\n<h3 id=\"list-prevuntil-\">List#prevUntil()</h3>\n<h3 id=\"list-some-\">List#some()</h3>\n<h3 id=\"list-map-\">List#map()</h3>\n<h3 id=\"list-filter-\">List#filter()</h3>\n<h3 id=\"list-clear-\">List#clear()</h3>\n<h3 id=\"list-copy-\">List#copy()</h3>\n<h3 id=\"list-prepend-\">List#prepend()</h3>\n<h3 id=\"list-prependdata-\">List#prependData()</h3>\n<h3 id=\"list-append-\">List#append()</h3>\n<h3 id=\"list-appenddata-\">List#appendData()</h3>\n<h3 id=\"list-insert-\">List#insert()</h3>\n<h3 id=\"list-insertdata-\">List#insertData()</h3>\n<h3 id=\"list-remove-\">List#remove()</h3>\n<h3 id=\"list-push-\">List#push()</h3>\n<h3 id=\"list-pop-\">List#pop()</h3>\n<h3 id=\"list-unshift-\">List#unshift()</h3>\n<h3 id=\"list-shift-\">List#shift()</h3>\n<h3 id=\"list-prependlist-\">List#prependList()</h3>\n<h3 id=\"list-appendlist-\">List#appendList()</h3>\n<h3 id=\"list-insertlist-\">List#insertList()</h3>\n<h3 id=\"list-replace-\">List#replace()</h3>\n"
      ],
      "contentsRaw": "# List\n\n<!-- MarkdownTOC -->\n\n- [Static methods](#static-methods)\n    - [List.createItem](#listcreateitem)\n- [Properties](#properties)\n    - [List#head](#listhead)\n    - [List#tail](#listtail)\n    - [List#cursor](#listcursor)\n- [Methods](#methods)\n    - [List#createItem\\(\\)](#listcreateitem-1)\n    - [List#updateCursors\\(\\)](#listupdatecursors)\n    - [List#getSize\\(\\)](#listgetsize)\n    - [List#fromArray\\(\\)](#listfromarray)\n    - [List#toArray\\(\\)](#listtoarray)\n    - [List#toJSON\\(\\)](#listtojson)\n    - [List#isEmpty\\(\\)](#listisempty)\n    - [List#first\\(\\)](#listfirst)\n    - [List#last\\(\\)](#listlast)\n    - [List#each\\(\\)](#listeach)\n    - [List#forEach\\(\\)](#listforeach)\n    - [List#eachRight\\(\\)](#listeachright)\n    - [List#forEachRight\\(\\)](#listforeachright)\n    - [List#nextUntil\\(\\)](#listnextuntil)\n    - [List#prevUntil\\(\\)](#listprevuntil)\n    - [List#some\\(\\)](#listsome)\n    - [List#map\\(\\)](#listmap)\n    - [List#filter\\(\\)](#listfilter)\n    - [List#clear\\(\\)](#listclear)\n    - [List#copy\\(\\)](#listcopy)\n    - [List#prepend\\(\\)](#listprepend)\n    - [List#prependData\\(\\)](#listprependdata)\n    - [List#append\\(\\)](#listappend)\n    - [List#appendData\\(\\)](#listappenddata)\n    - [List#insert\\(\\)](#listinsert)\n    - [List#insertData\\(\\)](#listinsertdata)\n    - [List#remove\\(\\)](#listremove)\n    - [List#push\\(\\)](#listpush)\n    - [List#pop\\(\\)](#listpop)\n    - [List#unshift\\(\\)](#listunshift)\n    - [List#shift\\(\\)](#listshift)\n    - [List#prependList\\(\\)](#listprependlist)\n    - [List#appendList\\(\\)](#listappendlist)\n    - [List#insertList\\(\\)](#listinsertlist)\n    - [List#replace\\(\\)](#listreplace)\n\n<!-- /MarkdownTOC -->\n\n## Static methods\n\n### List.createItem\n\n## Properties\n\n### List#head\n\n### List#tail\n\n### List#cursor\n\n## Methods\n\n### List#createItem()\n\n### List#updateCursors()\n\n### List#getSize()\n\n### List#fromArray()\n\n### List#toArray()\n\n### List#toJSON()\n\n### List#isEmpty()\n\n### List#first()\n\n### List#last()\n\n### List#each()\n\n### List#forEach()\n\n### List#eachRight()\n\n### List#forEachRight()\n\n### List#nextUntil()\n\n### List#prevUntil()\n\n### List#some()\n\n### List#map()\n\n### List#filter()\n\n### List#clear()\n\n### List#copy()\n\n### List#prepend()\n\n### List#prependData()\n\n### List#append()\n\n### List#appendData()\n\n### List#insert()\n\n### List#insertData()\n\n### List#remove()\n\n### List#push()\n\n### List#pop()\n\n### List#unshift()\n\n### List#shift()\n\n### List#prependList()\n\n### List#appendList()\n\n### List#insertList()\n\n### List#replace()",
      "metadata": {}
    },
    "parsing": {
      "reference": "parsing",
      "route": "parsing",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\parsing.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"parsing-css-into-ast\">Parsing CSS into AST</h1>\n<blockquote>\n<p>NOTE: Currenly parser omits redundant separators, spaces and comments (except exclamation comments, i.e. <code>/*! comment */</code>) on AST build.</p>\n</blockquote>\n<h2 id=\"parse-source-options-\">parse(source[, options])</h2>\n<p>Parses CSS into AST.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;simple&nbsp;parsing&nbsp;with&nbsp;no&nbsp;options</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.example&nbsp;{&nbsp;color:&nbsp;red&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;parse&nbsp;with&nbsp;options</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.foo.bar</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;context</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>selector</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;positions</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Options (optional):</p>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#context\">context</a></li>\n<li><a href=\"#atrule\">atrule</a></li>\n<li><a href=\"#positions\">positions</a></li>\n<li><a href=\"#onparseerror\">onParseError</a></li>\n<li><a href=\"#filename\">filename</a></li>\n<li><a href=\"#offset\">offset</a></li>\n<li><a href=\"#line\">line</a></li>\n<li><a href=\"#column\">column</a></li>\n<li><a href=\"#parseatruleprelude\">parseAtrulePrelude</a></li>\n<li><a href=\"#parseruleprelude\">parseRulePrelude</a></li>\n<li><a href=\"#parsevalue\">parseValue</a></li>\n<li><a href=\"#parsecustomproperty\">parseCustomProperty</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<h3 id=\"context\">context</h3>\n<p>Type: <code>string</code><br>Default: <code>&#39;stylesheet&#39;</code></p>\n<p>Defines what part of CSS is parsing.</p>\n<p>Contexts:</p>\n<ul>\n<li><code>stylesheet</code> (default) – regular stylesheet, should be suitable in most cases</li>\n<li><code>atrule</code> – at-rule (e.g. <code>@media screen, print { ... }</code>)</li>\n<li><code>atrulePrelude</code> – at-rule prelude (<code>screen, print</code> for example above)</li>\n<li><code>mediaQueryList</code> – used to parse comma separated media query list</li>\n<li><code>mediaQuery</code> – used to parse media query</li>\n<li><code>rule</code> – rule (e.g. <code>.foo, .bar:hover { color: red; border: 1px solid black; }</code>)</li>\n<li><code>selectorList</code> – selector group (<code>.foo, .bar:hover</code> for rule example)</li>\n<li><code>selector</code> – selector (<code>.foo</code> or <code>.bar:hover</code> for rule example)</li>\n<li><code>block</code> – block with curly braces (<code>{ color: red; border: 1px solid black; }</code> for rule example)</li>\n<li><code>declarationList</code> – block content w/o curly braces (<code>color: red; border: 1px solid black;</code> for rule example), useful for parsing HTML <code>style</code> attribute value</li>\n<li><code>declaration</code> – declaration (<code>color: red</code> or <code>border: 1px solid black</code> for rule example)</li>\n<li><code>value</code> – declaration value (<code>red</code> or <code>1px solid black</code> for rule example)</li>\n</ul>\n<h3 id=\"atrule\">atrule</h3>\n<p>Type: <code>string</code> or <code>null</code><br>Default: <code>null</code></p>\n<p>Using for <code>atrulePrelude</code> context to apply atrule specific parse rules.</p>\n<h3 id=\"positions\">positions</h3>\n<p>Type: <code>boolean</code><br>Default: <code>false</code></p>\n<p>Specify to store locations of node content in original source. Location is storing as <code>loc</code> field of nodes. <code>loc</code> property is always <code>null</code> when option is <code>false</code>. The structure of <code>loc</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>loc</span></span><span>:&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>source</span></span><span>:&nbsp;</span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>value&nbsp;of&nbsp;`filename`&nbsp;option&nbsp;or&nbsp;`&lt;unknown&gt;`</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>start</span></span><span>:&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>offset</span></span><span>:</span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line:&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>,</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column:&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;end:&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>offset</span></span><span>:</span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>,</span></span></span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line:&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>,</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column:&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>number</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div></pre><h3 id=\"onparseerror\">onParseError</h3>\n<p>Type: <code>function(error, fallbackNode)</code> or <code>null</code><br>Default: <code>null</code></p>\n<p>Parsing is tolerant by default, i.e. any text may to be parsed with no an raised exception. However, mistakes in CSS may make it imposible to parse some part, e.g. a selector or declaration. In that case bad content is wrapping into a <code>Raw</code> node and <code>onParseError</code> is invoking.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>example&nbsp;{&nbsp;foo;&nbsp;bar:&nbsp;1!&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>onParseError</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>error</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>error</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>formattedMessage</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Parse&nbsp;error:&nbsp;Colon&nbsp;is&nbsp;expected</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;|example&nbsp;{&nbsp;foo;&nbsp;bar:&nbsp;1!&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;--------------------^</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Parse&nbsp;error:&nbsp;Identifier&nbsp;is&nbsp;expected</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;|example&nbsp;{&nbsp;foo;&nbsp;bar:&nbsp;1!&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;------------------------------^</span></span></span></div></pre><h3 id=\"filename\">filename</h3>\n<p>Type: <code>string</code><br>Default: <code>&#39;&lt;unknown&gt;&#39;</code></p>\n<p>Filename of source. This value adds to <code>loc</code> as <code>source</code> property when <code>positions</code> option is <code>true</code>. Using for source map generation.</p>\n<h3 id=\"offset\">offset</h3>\n<p>Type: <code>number</code><br>Default: <code>0</code></p>\n<p>Start offset. Useful when parsing a fragment of CSS to store a correct positions for node&#39;s <code>loc</code> property.</p>\n<h3 id=\"line\">line</h3>\n<p>Type: <code>number</code><br>Default: <code>1</code></p>\n<p>Start line number. Useful when parsing fragment of CSS to store correct positions in node&#39;s <code>loc</code> property.</p>\n<h3 id=\"column\">column</h3>\n<p>Type: <code>number</code><br>Default: <code>1</code></p>\n<p>Start column number. Useful when parsing fragment of CSS to store correct positions in node&#39;s <code>loc</code> property.</p>\n<h3 id=\"parseatruleprelude\">parseAtrulePrelude</h3>\n<p>Type: <code>boolean</code><br>Default: <code>true</code></p>\n<p>Defines to parse a at-rule prelude in details (represents as <code>AtruleExpresion</code>, <code>MediaQueryList</code> or <code>SelectorList</code> if any). Otherwise represents prelude as <code>Raw</code> node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>@example&nbsp;1&nbsp;2;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Atrule&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;prelude&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;AtrulePrelude&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&quot;type&quot;:&nbsp;&quot;Number&quot;,&nbsp;&quot;value&quot;:&nbsp;&quot;1&quot;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&quot;type&quot;:&nbsp;&quot;WhiteSpace&quot;,&nbsp;&quot;value&quot;:&nbsp;&quot;&nbsp;&quot;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&quot;type&quot;:&nbsp;&quot;Number&quot;,&nbsp;&quot;value&quot;:&nbsp;&quot;2&quot;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;block&quot;:&nbsp;null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>@example&nbsp;1&nbsp;2;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;parseAtrulePrelude</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Atrule&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;prelude&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Raw&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;1&nbsp;2&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;block&quot;:&nbsp;null</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div></pre><h3 id=\"parseruleprelude\">parseRulePrelude</h3>\n<p>Type: <code>boolean</code><br>Default: <code>true</code></p>\n<p>Defines to parse a rule prelude in details or left unparsed (represents as <code>Raw</code> node).</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.foo&nbsp;{}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Rule&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;prelude&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;SelectorList&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Selector&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&quot;type&quot;:&nbsp;&quot;ClassSelector&quot;,&nbsp;&quot;name&quot;:&nbsp;&quot;foo&quot;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;block&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Block&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.foo&nbsp;{}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;parseRulePrelude</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Rule&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;prelude&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Raw&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;.foo&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;block&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Block&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div></pre><h3 id=\"parsevalue\">parseValue</h3>\n<p>Type: <code>boolean</code><br>Default: <code>true</code></p>\n<p>Defines to parse a declaration value in details (represents as <code>Value</code>). Otherwise represents value as <code>Raw</code> node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>color:&nbsp;#aabbcc</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;context</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Declaration&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;important&quot;:&nbsp;false,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;property&quot;:&nbsp;&quot;color&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Value&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;HexColor&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;aabbcc&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>color:&nbsp;#aabbcc</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;context</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;parseValue</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Declaration&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;important&quot;:&nbsp;false,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;property&quot;:&nbsp;&quot;color&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Raw&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;&nbsp;#aabbcc&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div></pre><h3 id=\"parsecustomproperty\">parseCustomProperty</h3>\n<p>Type: <code>boolean</code><br>Default: <code>false</code></p>\n<p>Defines to parse a custom property value and a <code>var()</code> fallback in details (represents as <code>Value</code>). Otherwise represents value as <code>Raw</code> node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--custom:&nbsp;#aabbcc</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;context</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Declaration&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;important&quot;:&nbsp;false,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;property&quot;:&nbsp;&quot;--custom&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Raw&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;&nbsp;#aabbcc&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--custom:&nbsp;#aabbcc</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;context</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;parseCustomProperty</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Declaration&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;important&quot;:&nbsp;false,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;property&quot;:&nbsp;&quot;--custom&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;Value&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;children&quot;:&nbsp;[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;HexColor&quot;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;value&quot;:&nbsp;&quot;aabbcc&quot;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div></pre>"
      ],
      "contentsRaw": "# Parsing CSS into AST\n\n> NOTE: Currenly parser omits redundant separators, spaces and comments (except exclamation comments, i.e. `/*! comment */`) on AST build.\n\n## parse(source[, options])\n\nParses CSS into AST.\n\n```js\n// simple parsing with no options\nvar ast = csstree.parse('.example { color: red }');\n\n// parse with options\nvar ast = csstree.parse('.foo.bar', {\n    context: 'selector',\n    positions: true\n});\n```\n\nOptions (optional):\n\n<!-- MarkdownTOC -->\n\n- [context](#context)\n- [atrule](#atrule)\n- [positions](#positions)\n- [onParseError](#onparseerror)\n- [filename](#filename)\n- [offset](#offset)\n- [line](#line)\n- [column](#column)\n- [parseAtrulePrelude](#parseatruleprelude)\n- [parseRulePrelude](#parseruleprelude)\n- [parseValue](#parsevalue)\n- [parseCustomProperty](#parsecustomproperty)\n\n<!-- /MarkdownTOC -->\n\n### context\n\nType: `string`  \nDefault: `'stylesheet'`\n\nDefines what part of CSS is parsing.\n\nContexts:\n\n- `stylesheet` (default) – regular stylesheet, should be suitable in most cases\n- `atrule` – at-rule (e.g. `@media screen, print { ... }`)\n- `atrulePrelude` – at-rule prelude (`screen, print` for example above)\n- `mediaQueryList` – used to parse comma separated media query list\n- `mediaQuery` – used to parse media query\n- `rule` – rule (e.g. `.foo, .bar:hover { color: red; border: 1px solid black; }`)\n- `selectorList` – selector group (`.foo, .bar:hover` for rule example)\n- `selector` – selector (`.foo` or `.bar:hover` for rule example)\n- `block` – block with curly braces (`{ color: red; border: 1px solid black; }` for rule example)\n- `declarationList` – block content w/o curly braces (`color: red; border: 1px solid black;` for rule example), useful for parsing HTML `style` attribute value\n- `declaration` – declaration (`color: red` or `border: 1px solid black` for rule example)\n- `value` – declaration value (`red` or `1px solid black` for rule example)\n\n### atrule\n\nType: `string` or `null`  \nDefault: `null`\n\nUsing for `atrulePrelude` context to apply atrule specific parse rules.\n\n### positions\n\nType: `boolean`  \nDefault: `false`\n\nSpecify to store locations of node content in original source. Location is storing as `loc` field of nodes. `loc` property is always `null` when option is `false`. The structure of `loc`:\n\n```\nloc: {\n    source: 'value of `filename` option or `<unknown>`',\n    start: {\n        offset: <number>,\n        line: <number>,\n        column: <number>\n    },\n    end: {\n        offset: <number>,\n        line: <number>,\n        column: <number>\n    }\n}\n```\n\n### onParseError\n\nType: `function(error, fallbackNode)` or `null`  \nDefault: `null`\n\nParsing is tolerant by default, i.e. any text may to be parsed with no an raised exception. However, mistakes in CSS may make it imposible to parse some part, e.g. a selector or declaration. In that case bad content is wrapping into a `Raw` node and `onParseError` is invoking.\n\n```js\ncsstree.parse('example { foo; bar: 1! }', {\n    onParseError: function(error) {\n        console.log(error.formattedMessage);\n    }\n});\n// Parse error: Colon is expected\n//     1 |example { foo; bar: 1! }\n// --------------------^\n// Parse error: Identifier is expected\n//     1 |example { foo; bar: 1! }\n// ------------------------------^\n```\n\n### filename\n\nType: `string`  \nDefault: `'<unknown>'`\n\nFilename of source. This value adds to `loc` as `source` property when `positions` option is `true`. Using for source map generation.\n\n### offset\n\nType: `number`  \nDefault: `0`\n\nStart offset. Useful when parsing a fragment of CSS to store a correct positions for node's `loc` property.\n\n### line\n\nType: `number`  \nDefault: `1`\n\nStart line number. Useful when parsing fragment of CSS to store correct positions in node's `loc` property.\n\n### column\n\nType: `number`  \nDefault: `1`\n\nStart column number. Useful when parsing fragment of CSS to store correct positions in node's `loc` property.\n\n### parseAtrulePrelude\n\nType: `boolean`  \nDefault: `true`\n\nDefines to parse a at-rule prelude in details (represents as `AtruleExpresion`, `MediaQueryList` or `SelectorList` if any). Otherwise represents prelude as `Raw` node.\n\n```js\ncsstree.parse('@example 1 2;');\n// {\n//     \"type\": \"Atrule\",\n//     \"prelude\": {\n//         \"type\": \"AtrulePrelude\",\n//         \"children\": [\n//             { \"type\": \"Number\", \"value\": \"1\" },\n//             { \"type\": \"WhiteSpace\", \"value\": \" \" },\n//             { \"type\": \"Number\", \"value\": \"2\" }\n//         ]\n//     },\n//     \"block\": null\n// }\n\ncsstree.parse('@example 1 2;', { parseAtrulePrelude: false });\n// {\n//     \"type\": \"Atrule\",\n//     \"prelude\": {\n//         \"type\": \"Raw\",\n//         \"value\": \"1 2\"\n//     },\n//     \"block\": null\n// }\n```\n\n### parseRulePrelude\n\nType: `boolean`  \nDefault: `true`\n\nDefines to parse a rule prelude in details or left unparsed (represents as `Raw` node).\n\n```js\ncsstree.parse('.foo {}');\n// {\n//     \"type\": \"Rule\",\n//     \"prelude\": {\n//         \"type\": \"SelectorList\",\n//         \"children\": [\n//             {\n//                 \"type\": \"Selector\",\n//                 \"children\": [\n//                     { \"type\": \"ClassSelector\", \"name\": \"foo\" }\n//                 ]\n//             }\n//         ]\n//     },\n//     \"block\": {\n//         \"type\": \"Block\",\n//         \"children\": []\n//     }\n// }\n\ncsstree.parse('.foo {}', { parseRulePrelude: false });\n// {\n//     \"type\": \"Rule\",\n//     \"prelude\": {\n//         \"type\": \"Raw\",\n//         \"value\": \".foo\"\n//     },\n//     \"block\": {\n//         \"type\": \"Block\",\n//         \"children\": []\n//     }\n// }\n```\n\n### parseValue\n\nType: `boolean`  \nDefault: `true`\n\nDefines to parse a declaration value in details (represents as `Value`). Otherwise represents value as `Raw` node.\n\n```js\ncsstree.parse('color: #aabbcc', { context: 'declaration' });\n// {\n//     \"type\": \"Declaration\",\n//     \"important\": false,\n//     \"property\": \"color\",\n//     \"value\": {\n//         \"type\": \"Value\",\n//         \"children\": [\n//             {\n//                 \"type\": \"HexColor\",\n//                 \"value\": \"aabbcc\"\n//             }\n//         ]\n//     }\n// }\n\ncsstree.parse('color: #aabbcc', { context: 'declaration', parseValue: false });\n// {\n//     \"type\": \"Declaration\",\n//     \"important\": false,\n//     \"property\": \"color\",\n//     \"value\": {\n//         \"type\": \"Raw\",\n//         \"value\": \" #aabbcc\"\n//     }\n// }\n```\n\n### parseCustomProperty\n\nType: `boolean`  \nDefault: `false`\n\nDefines to parse a custom property value and a `var()` fallback in details (represents as `Value`). Otherwise represents value as `Raw` node.\n\n```js\ncsstree.parse('--custom: #aabbcc', { context: 'declaration' });\n// {\n//     \"type\": \"Declaration\",\n//     \"important\": false,\n//     \"property\": \"--custom\",\n//     \"value\": {\n//         \"type\": \"Raw\",\n//         \"value\": \" #aabbcc\"\n//     }\n// }\n\ncsstree.parse('--custom: #aabbcc', { context: 'declaration', parseCustomProperty: true });\n// {\n//     \"type\": \"Declaration\",\n//     \"important\": false,\n//     \"property\": \"--custom\",\n//     \"value\": {\n//         \"type\": \"Value\",\n//         \"children\": [\n//             {\n//                 \"type\": \"HexColor\",\n//                 \"value\": \"aabbcc\"\n//             }\n//         ]\n//     }\n// }\n```",
      "metadata": {}
    },
    "supported": {
      "reference": "supported",
      "route": "supported",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\supported.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"supported-syntaxes\">Supported syntaxes</h1>\n<blockquote>\n<p>⚠️ This is a basic implementation of support reference. Further improvements are pending. See comments on each section for details.</p>\n</blockquote>\n<blockquote>\n<p>⚠️ This page is auto-generated. Please, don&#39;t update any content between special comments.</p>\n</blockquote>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#atrules\">Atrules</a></li>\n<li><a href=\"#functional-pseudos\">Functional pseudos</a></li>\n<li><a href=\"#properties\">Properties</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"atrules\">Atrules</h2>\n<p>At-rules with a custom parsing rules. In fact, any at-rule is supported but prelude and block are parsing with default rules. Validation support isn&#39;t supported for at-rules at the moment.</p>\n<!-- gen:atrule -->\n<ul>\n<li><code>@font-face</code></li>\n<li><code>@import</code></li>\n<li><code>@media</code></li>\n<li><code>@page</code></li>\n<li><code>@supports</code></li>\n</ul>\n<!-- /gen:atrule -->\n<h2 id=\"functional-pseudos\">Functional pseudos</h2>\n<p>Functional pseudos with a custom parsing rule. Non-listed functional pseudos don&#39;t parse a content inside parentheses and represent it as a <code>Raw</code> node if any. There is no difference between pseudo class and pseudo element on parsing, like no validation for functional pseudos is supported at the moment.</p>\n<!-- gen:pseudo -->\n<ul>\n<li><code>:dir()</code></li>\n<li><code>:has()</code></li>\n<li><code>:lang()</code></li>\n<li><code>:matches()</code></li>\n<li><code>:not()</code></li>\n<li><code>:nth-child()</code></li>\n<li><code>:nth-last-child()</code></li>\n<li><code>:nth-last-of-type()</code></li>\n<li><code>:nth-of-type()</code></li>\n<li><code>:slotted()</code></li>\n</ul>\n<!-- /gen:pseudo -->\n<h2 id=\"properties\">Properties</h2>\n<p>Support for a property means CSSTree has a grammar for such property, so its value can be checked (validated) for complience to spec or browser inplementations (for non-standart properties). The validation doesn&#39;t perform on parsing stage and should be done as a separate step using Lexer API. In other words any property value can be parsed with default parsing rules, but validation is possible for listed properties only.</p>\n<!-- gen:properties -->\n<ul>\n<li><code>-moz-appearance</code></li>\n<li><code>-moz-background-clip</code></li>\n<li><code>-moz-binding</code></li>\n<li><code>-moz-border-bottom-colors</code></li>\n<li><code>-moz-border-left-colors</code></li>\n<li><code>-moz-border-radius-bottomleft</code></li>\n<li><code>-moz-border-radius-bottomright</code></li>\n<li><code>-moz-border-radius-topleft</code></li>\n<li><code>-moz-border-radius-topright</code></li>\n<li><code>-moz-border-right-colors</code></li>\n<li><code>-moz-border-top-colors</code></li>\n<li><code>-moz-context-properties</code></li>\n<li><code>-moz-float-edge</code></li>\n<li><code>-moz-force-broken-image-icon</code></li>\n<li><code>-moz-image-region</code></li>\n<li><code>-moz-orient</code></li>\n<li><code>-moz-osx-font-smoothing</code></li>\n<li><code>-moz-outline-radius</code></li>\n<li><code>-moz-outline-radius-bottomleft</code></li>\n<li><code>-moz-outline-radius-bottomright</code></li>\n<li><code>-moz-outline-radius-topleft</code></li>\n<li><code>-moz-outline-radius-topright</code></li>\n<li><code>-moz-stack-sizing</code></li>\n<li><code>-moz-text-blink</code></li>\n<li><code>-moz-user-focus</code></li>\n<li><code>-moz-user-input</code></li>\n<li><code>-moz-user-modify</code></li>\n<li><code>-moz-user-select</code></li>\n<li><code>-moz-window-dragging</code></li>\n<li><code>-moz-window-shadow</code></li>\n<li><code>-ms-accelerator</code></li>\n<li><code>-ms-block-progression</code></li>\n<li><code>-ms-content-zoom-chaining</code></li>\n<li><code>-ms-content-zoom-limit</code></li>\n<li><code>-ms-content-zoom-limit-max</code></li>\n<li><code>-ms-content-zoom-limit-min</code></li>\n<li><code>-ms-content-zoom-snap</code></li>\n<li><code>-ms-content-zoom-snap-points</code></li>\n<li><code>-ms-content-zoom-snap-type</code></li>\n<li><code>-ms-content-zooming</code></li>\n<li><code>-ms-filter</code></li>\n<li><code>-ms-flex-align</code></li>\n<li><code>-ms-flex-item-align</code></li>\n<li><code>-ms-flex-line-pack</code></li>\n<li><code>-ms-flex-negative</code></li>\n<li><code>-ms-flex-order</code></li>\n<li><code>-ms-flex-pack</code></li>\n<li><code>-ms-flex-positive</code></li>\n<li><code>-ms-flex-preferred-size</code></li>\n<li><code>-ms-flow-from</code></li>\n<li><code>-ms-flow-into</code></li>\n<li><code>-ms-grid-column-align</code></li>\n<li><code>-ms-grid-row-align</code></li>\n<li><code>-ms-high-contrast-adjust</code></li>\n<li><code>-ms-hyphenate-limit-chars</code></li>\n<li><code>-ms-hyphenate-limit-lines</code></li>\n<li><code>-ms-hyphenate-limit-zone</code></li>\n<li><code>-ms-ime-align</code></li>\n<li><code>-ms-interpolation-mode</code></li>\n<li><code>-ms-overflow-style</code></li>\n<li><code>-ms-scroll-chaining</code></li>\n<li><code>-ms-scroll-limit</code></li>\n<li><code>-ms-scroll-limit-x-max</code></li>\n<li><code>-ms-scroll-limit-x-min</code></li>\n<li><code>-ms-scroll-limit-y-max</code></li>\n<li><code>-ms-scroll-limit-y-min</code></li>\n<li><code>-ms-scroll-rails</code></li>\n<li><code>-ms-scroll-snap-points-x</code></li>\n<li><code>-ms-scroll-snap-points-y</code></li>\n<li><code>-ms-scroll-snap-type</code></li>\n<li><code>-ms-scroll-snap-x</code></li>\n<li><code>-ms-scroll-snap-y</code></li>\n<li><code>-ms-scroll-translation</code></li>\n<li><code>-ms-scrollbar-3dlight-color</code></li>\n<li><code>-ms-scrollbar-arrow-color</code></li>\n<li><code>-ms-scrollbar-base-color</code></li>\n<li><code>-ms-scrollbar-darkshadow-color</code></li>\n<li><code>-ms-scrollbar-face-color</code></li>\n<li><code>-ms-scrollbar-highlight-color</code></li>\n<li><code>-ms-scrollbar-shadow-color</code></li>\n<li><code>-ms-scrollbar-track-color</code></li>\n<li><code>-ms-text-autospace</code></li>\n<li><code>-ms-touch-select</code></li>\n<li><code>-ms-user-select</code></li>\n<li><code>-ms-wrap-flow</code></li>\n<li><code>-ms-wrap-margin</code></li>\n<li><code>-ms-wrap-through</code></li>\n<li><code>-webkit-appearance</code></li>\n<li><code>-webkit-background-clip</code></li>\n<li><code>-webkit-border-before</code></li>\n<li><code>-webkit-border-before-color</code></li>\n<li><code>-webkit-border-before-style</code></li>\n<li><code>-webkit-border-before-width</code></li>\n<li><code>-webkit-box-reflect</code></li>\n<li><code>-webkit-column-break-after</code></li>\n<li><code>-webkit-column-break-before</code></li>\n<li><code>-webkit-column-break-inside</code></li>\n<li><code>-webkit-font-smoothing</code></li>\n<li><code>-webkit-line-clamp</code></li>\n<li><code>-webkit-mask</code></li>\n<li><code>-webkit-mask-attachment</code></li>\n<li><code>-webkit-mask-box-image</code></li>\n<li><code>-webkit-mask-clip</code></li>\n<li><code>-webkit-mask-composite</code></li>\n<li><code>-webkit-mask-image</code></li>\n<li><code>-webkit-mask-origin</code></li>\n<li><code>-webkit-mask-position</code></li>\n<li><code>-webkit-mask-position-x</code></li>\n<li><code>-webkit-mask-position-y</code></li>\n<li><code>-webkit-mask-repeat</code></li>\n<li><code>-webkit-mask-repeat-x</code></li>\n<li><code>-webkit-mask-repeat-y</code></li>\n<li><code>-webkit-mask-size</code></li>\n<li><code>-webkit-overflow-scrolling</code></li>\n<li><code>-webkit-print-color-adjust</code></li>\n<li><code>-webkit-tap-highlight-color</code></li>\n<li><code>-webkit-text-fill-color</code></li>\n<li><code>-webkit-text-security</code></li>\n<li><code>-webkit-text-stroke</code></li>\n<li><code>-webkit-text-stroke-color</code></li>\n<li><code>-webkit-text-stroke-width</code></li>\n<li><code>-webkit-touch-callout</code></li>\n<li><code>-webkit-user-drag</code></li>\n<li><code>-webkit-user-modify</code></li>\n<li><code>-webkit-user-select</code></li>\n<li><code>align-content</code></li>\n<li><code>align-items</code></li>\n<li><code>align-self</code></li>\n<li><code>alignment-baseline</code></li>\n<li><code>all</code></li>\n<li><code>animation</code></li>\n<li><code>animation-delay</code></li>\n<li><code>animation-direction</code></li>\n<li><code>animation-duration</code></li>\n<li><code>animation-fill-mode</code></li>\n<li><code>animation-iteration-count</code></li>\n<li><code>animation-name</code></li>\n<li><code>animation-play-state</code></li>\n<li><code>animation-timing-function</code></li>\n<li><code>appearance</code></li>\n<li><code>azimuth</code></li>\n<li><code>backdrop-filter</code></li>\n<li><code>backface-visibility</code></li>\n<li><code>background</code></li>\n<li><code>background-attachment</code></li>\n<li><code>background-blend-mode</code></li>\n<li><code>background-clip</code></li>\n<li><code>background-color</code></li>\n<li><code>background-image</code></li>\n<li><code>background-origin</code></li>\n<li><code>background-position</code></li>\n<li><code>background-position-x</code></li>\n<li><code>background-position-y</code></li>\n<li><code>background-repeat</code></li>\n<li><code>background-size</code></li>\n<li><code>baseline-shift</code></li>\n<li><code>behavior</code></li>\n<li><code>block-overflow</code></li>\n<li><code>block-size</code></li>\n<li><code>border</code></li>\n<li><code>border-block-end</code></li>\n<li><code>border-block-end-color</code></li>\n<li><code>border-block-end-style</code></li>\n<li><code>border-block-end-width</code></li>\n<li><code>border-block-start</code></li>\n<li><code>border-block-start-color</code></li>\n<li><code>border-block-start-style</code></li>\n<li><code>border-block-start-width</code></li>\n<li><code>border-bottom</code></li>\n<li><code>border-bottom-color</code></li>\n<li><code>border-bottom-left-radius</code></li>\n<li><code>border-bottom-right-radius</code></li>\n<li><code>border-bottom-style</code></li>\n<li><code>border-bottom-width</code></li>\n<li><code>border-collapse</code></li>\n<li><code>border-color</code></li>\n<li><code>border-image</code></li>\n<li><code>border-image-outset</code></li>\n<li><code>border-image-repeat</code></li>\n<li><code>border-image-slice</code></li>\n<li><code>border-image-source</code></li>\n<li><code>border-image-width</code></li>\n<li><code>border-inline-end</code></li>\n<li><code>border-inline-end-color</code></li>\n<li><code>border-inline-end-style</code></li>\n<li><code>border-inline-end-width</code></li>\n<li><code>border-inline-start</code></li>\n<li><code>border-inline-start-color</code></li>\n<li><code>border-inline-start-style</code></li>\n<li><code>border-inline-start-width</code></li>\n<li><code>border-left</code></li>\n<li><code>border-left-color</code></li>\n<li><code>border-left-style</code></li>\n<li><code>border-left-width</code></li>\n<li><code>border-radius</code></li>\n<li><code>border-right</code></li>\n<li><code>border-right-color</code></li>\n<li><code>border-right-style</code></li>\n<li><code>border-right-width</code></li>\n<li><code>border-spacing</code></li>\n<li><code>border-style</code></li>\n<li><code>border-top</code></li>\n<li><code>border-top-color</code></li>\n<li><code>border-top-left-radius</code></li>\n<li><code>border-top-right-radius</code></li>\n<li><code>border-top-style</code></li>\n<li><code>border-top-width</code></li>\n<li><code>border-width</code></li>\n<li><code>bottom</code></li>\n<li><code>box-align</code></li>\n<li><code>box-decoration-break</code></li>\n<li><code>box-direction</code></li>\n<li><code>box-flex</code></li>\n<li><code>box-flex-group</code></li>\n<li><code>box-lines</code></li>\n<li><code>box-ordinal-group</code></li>\n<li><code>box-orient</code></li>\n<li><code>box-pack</code></li>\n<li><code>box-shadow</code></li>\n<li><code>box-sizing</code></li>\n<li><code>break-after</code></li>\n<li><code>break-before</code></li>\n<li><code>break-inside</code></li>\n<li><code>caption-side</code></li>\n<li><code>caret-color</code></li>\n<li><code>clear</code></li>\n<li><code>clip</code></li>\n<li><code>clip-path</code></li>\n<li><code>clip-rule</code></li>\n<li><code>color</code></li>\n<li><code>color-adjust</code></li>\n<li><code>column-count</code></li>\n<li><code>column-fill</code></li>\n<li><code>column-gap</code></li>\n<li><code>column-rule</code></li>\n<li><code>column-rule-color</code></li>\n<li><code>column-rule-style</code></li>\n<li><code>column-rule-width</code></li>\n<li><code>column-span</code></li>\n<li><code>column-width</code></li>\n<li><code>columns</code></li>\n<li><code>contain</code></li>\n<li><code>content</code></li>\n<li><code>counter-increment</code></li>\n<li><code>counter-reset</code></li>\n<li><code>cue</code></li>\n<li><code>cue-after</code></li>\n<li><code>cue-before</code></li>\n<li><code>cursor</code></li>\n<li><code>direction</code></li>\n<li><code>display</code></li>\n<li><code>dominant-baseline</code></li>\n<li><code>empty-cells</code></li>\n<li><code>fill</code></li>\n<li><code>fill-opacity</code></li>\n<li><code>fill-rule</code></li>\n<li><code>filter</code></li>\n<li><code>flex</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex-direction</code></li>\n<li><code>flex-flow</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>flex-wrap</code></li>\n<li><code>float</code></li>\n<li><code>font</code></li>\n<li><code>font-family</code></li>\n<li><code>font-feature-settings</code></li>\n<li><code>font-kerning</code></li>\n<li><code>font-language-override</code></li>\n<li><code>font-optical-sizing</code></li>\n<li><code>font-size</code></li>\n<li><code>font-size-adjust</code></li>\n<li><code>font-stretch</code></li>\n<li><code>font-style</code></li>\n<li><code>font-synthesis</code></li>\n<li><code>font-variant</code></li>\n<li><code>font-variant-alternates</code></li>\n<li><code>font-variant-caps</code></li>\n<li><code>font-variant-east-asian</code></li>\n<li><code>font-variant-ligatures</code></li>\n<li><code>font-variant-numeric</code></li>\n<li><code>font-variant-position</code></li>\n<li><code>font-variation-settings</code></li>\n<li><code>font-weight</code></li>\n<li><code>gap</code></li>\n<li><code>glyph-orientation-horizontal</code></li>\n<li><code>glyph-orientation-vertical</code></li>\n<li><code>grid</code></li>\n<li><code>grid-area</code></li>\n<li><code>grid-auto-columns</code></li>\n<li><code>grid-auto-flow</code></li>\n<li><code>grid-auto-rows</code></li>\n<li><code>grid-column</code></li>\n<li><code>grid-column-end</code></li>\n<li><code>grid-column-gap</code></li>\n<li><code>grid-column-start</code></li>\n<li><code>grid-gap</code></li>\n<li><code>grid-row</code></li>\n<li><code>grid-row-end</code></li>\n<li><code>grid-row-gap</code></li>\n<li><code>grid-row-start</code></li>\n<li><code>grid-template</code></li>\n<li><code>grid-template-areas</code></li>\n<li><code>grid-template-columns</code></li>\n<li><code>grid-template-rows</code></li>\n<li><code>hanging-punctuation</code></li>\n<li><code>height</code></li>\n<li><code>hyphens</code></li>\n<li><code>image-orientation</code></li>\n<li><code>image-rendering</code></li>\n<li><code>image-resolution</code></li>\n<li><code>ime-mode</code></li>\n<li><code>initial-letter</code></li>\n<li><code>initial-letter-align</code></li>\n<li><code>inline-size</code></li>\n<li><code>isolation</code></li>\n<li><code>justify-content</code></li>\n<li><code>justify-items</code></li>\n<li><code>justify-self</code></li>\n<li><code>kerning</code></li>\n<li><code>left</code></li>\n<li><code>letter-spacing</code></li>\n<li><code>line-break</code></li>\n<li><code>line-clamp</code></li>\n<li><code>line-height</code></li>\n<li><code>line-height-step</code></li>\n<li><code>list-style</code></li>\n<li><code>list-style-image</code></li>\n<li><code>list-style-position</code></li>\n<li><code>list-style-type</code></li>\n<li><code>margin</code></li>\n<li><code>margin-block-end</code></li>\n<li><code>margin-block-start</code></li>\n<li><code>margin-bottom</code></li>\n<li><code>margin-inline-end</code></li>\n<li><code>margin-inline-start</code></li>\n<li><code>margin-left</code></li>\n<li><code>margin-right</code></li>\n<li><code>margin-top</code></li>\n<li><code>marker</code></li>\n<li><code>marker-end</code></li>\n<li><code>marker-mid</code></li>\n<li><code>marker-start</code></li>\n<li><code>mask</code></li>\n<li><code>mask-border</code></li>\n<li><code>mask-border-mode</code></li>\n<li><code>mask-border-outset</code></li>\n<li><code>mask-border-repeat</code></li>\n<li><code>mask-border-slice</code></li>\n<li><code>mask-border-source</code></li>\n<li><code>mask-border-width</code></li>\n<li><code>mask-clip</code></li>\n<li><code>mask-composite</code></li>\n<li><code>mask-image</code></li>\n<li><code>mask-mode</code></li>\n<li><code>mask-origin</code></li>\n<li><code>mask-position</code></li>\n<li><code>mask-repeat</code></li>\n<li><code>mask-size</code></li>\n<li><code>mask-type</code></li>\n<li><code>max-block-size</code></li>\n<li><code>max-height</code></li>\n<li><code>max-inline-size</code></li>\n<li><code>max-lines</code></li>\n<li><code>max-width</code></li>\n<li><code>min-block-size</code></li>\n<li><code>min-height</code></li>\n<li><code>min-inline-size</code></li>\n<li><code>min-width</code></li>\n<li><code>mix-blend-mode</code></li>\n<li><code>object-fit</code></li>\n<li><code>object-position</code></li>\n<li><code>offset</code></li>\n<li><code>offset-anchor</code></li>\n<li><code>offset-block-end</code></li>\n<li><code>offset-block-start</code></li>\n<li><code>offset-distance</code></li>\n<li><code>offset-inline-end</code></li>\n<li><code>offset-inline-start</code></li>\n<li><code>offset-path</code></li>\n<li><code>offset-position</code></li>\n<li><code>offset-rotate</code></li>\n<li><code>opacity</code></li>\n<li><code>order</code></li>\n<li><code>orphans</code></li>\n<li><code>outline</code></li>\n<li><code>outline-color</code></li>\n<li><code>outline-offset</code></li>\n<li><code>outline-style</code></li>\n<li><code>outline-width</code></li>\n<li><code>overflow</code></li>\n<li><code>overflow-anchor</code></li>\n<li><code>overflow-block</code></li>\n<li><code>overflow-clip-box</code></li>\n<li><code>overflow-inline</code></li>\n<li><code>overflow-wrap</code></li>\n<li><code>overflow-x</code></li>\n<li><code>overflow-y</code></li>\n<li><code>overscroll-behavior</code></li>\n<li><code>overscroll-behavior-x</code></li>\n<li><code>overscroll-behavior-y</code></li>\n<li><code>padding</code></li>\n<li><code>padding-block-end</code></li>\n<li><code>padding-block-start</code></li>\n<li><code>padding-bottom</code></li>\n<li><code>padding-inline-end</code></li>\n<li><code>padding-inline-start</code></li>\n<li><code>padding-left</code></li>\n<li><code>padding-right</code></li>\n<li><code>padding-top</code></li>\n<li><code>page-break-after</code></li>\n<li><code>page-break-before</code></li>\n<li><code>page-break-inside</code></li>\n<li><code>paint-order</code></li>\n<li><code>pause</code></li>\n<li><code>pause-after</code></li>\n<li><code>pause-before</code></li>\n<li><code>perspective</code></li>\n<li><code>perspective-origin</code></li>\n<li><code>place-content</code></li>\n<li><code>pointer-events</code></li>\n<li><code>position</code></li>\n<li><code>quotes</code></li>\n<li><code>resize</code></li>\n<li><code>rest</code></li>\n<li><code>rest-after</code></li>\n<li><code>rest-before</code></li>\n<li><code>right</code></li>\n<li><code>rotate</code></li>\n<li><code>row-gap</code></li>\n<li><code>ruby-align</code></li>\n<li><code>ruby-merge</code></li>\n<li><code>ruby-position</code></li>\n<li><code>scale</code></li>\n<li><code>scroll-behavior</code></li>\n<li><code>scroll-snap-coordinate</code></li>\n<li><code>scroll-snap-destination</code></li>\n<li><code>scroll-snap-points-x</code></li>\n<li><code>scroll-snap-points-y</code></li>\n<li><code>scroll-snap-type</code></li>\n<li><code>scroll-snap-type-x</code></li>\n<li><code>scroll-snap-type-y</code></li>\n<li><code>shape-image-threshold</code></li>\n<li><code>shape-margin</code></li>\n<li><code>shape-outside</code></li>\n<li><code>shape-rendering</code></li>\n<li><code>speak</code></li>\n<li><code>speak-as</code></li>\n<li><code>src</code></li>\n<li><code>stroke</code></li>\n<li><code>stroke-dasharray</code></li>\n<li><code>stroke-dashoffset</code></li>\n<li><code>stroke-linecap</code></li>\n<li><code>stroke-linejoin</code></li>\n<li><code>stroke-miterlimit</code></li>\n<li><code>stroke-opacity</code></li>\n<li><code>stroke-width</code></li>\n<li><code>tab-size</code></li>\n<li><code>table-layout</code></li>\n<li><code>text-align</code></li>\n<li><code>text-align-last</code></li>\n<li><code>text-anchor</code></li>\n<li><code>text-combine-upright</code></li>\n<li><code>text-decoration</code></li>\n<li><code>text-decoration-color</code></li>\n<li><code>text-decoration-line</code></li>\n<li><code>text-decoration-skip</code></li>\n<li><code>text-decoration-skip-ink</code></li>\n<li><code>text-decoration-style</code></li>\n<li><code>text-emphasis</code></li>\n<li><code>text-emphasis-color</code></li>\n<li><code>text-emphasis-position</code></li>\n<li><code>text-emphasis-style</code></li>\n<li><code>text-indent</code></li>\n<li><code>text-justify</code></li>\n<li><code>text-orientation</code></li>\n<li><code>text-overflow</code></li>\n<li><code>text-rendering</code></li>\n<li><code>text-shadow</code></li>\n<li><code>text-size-adjust</code></li>\n<li><code>text-transform</code></li>\n<li><code>text-underline-position</code></li>\n<li><code>top</code></li>\n<li><code>touch-action</code></li>\n<li><code>transform</code></li>\n<li><code>transform-box</code></li>\n<li><code>transform-origin</code></li>\n<li><code>transform-style</code></li>\n<li><code>transition</code></li>\n<li><code>transition-delay</code></li>\n<li><code>transition-duration</code></li>\n<li><code>transition-property</code></li>\n<li><code>transition-timing-function</code></li>\n<li><code>translate</code></li>\n<li><code>unicode-bidi</code></li>\n<li><code>unicode-range</code></li>\n<li><code>user-select</code></li>\n<li><code>vertical-align</code></li>\n<li><code>visibility</code></li>\n<li><code>voice-balance</code></li>\n<li><code>voice-duration</code></li>\n<li><code>voice-family</code></li>\n<li><code>voice-pitch</code></li>\n<li><code>voice-range</code></li>\n<li><code>voice-rate</code></li>\n<li><code>voice-stress</code></li>\n<li><code>voice-volume</code></li>\n<li><code>white-space</code></li>\n<li><code>widows</code></li>\n<li><code>width</code></li>\n<li><code>will-change</code></li>\n<li><code>word-break</code></li>\n<li><code>word-spacing</code></li>\n<li><code>word-wrap</code></li>\n<li><code>writing-mode</code></li>\n<li><code>z-index</code></li>\n<li><code>zoom</code></li>\n</ul>\n<!-- /gen:properties -->"
      ],
      "contentsRaw": "# Supported syntaxes\n\n> ⚠️ This is a basic implementation of support reference. Further improvements are pending. See comments on each section for details.\n\n> ⚠️ This page is auto-generated. Please, don't update any content between special comments.\n\n<!-- MarkdownTOC -->\n\n- [Atrules](#atrules)\n- [Functional pseudos](#functional-pseudos)\n- [Properties](#properties)\n\n<!-- /MarkdownTOC -->\n\n## Atrules\n\nAt-rules with a custom parsing rules. In fact, any at-rule is supported but prelude and block are parsing with default rules. Validation support isn't supported for at-rules at the moment.\n\n<!-- gen:atrule -->\n\n- `@font-face`\n- `@import`\n- `@media`\n- `@page`\n- `@supports`\n\n<!-- /gen:atrule -->\n\n## Functional pseudos\n\nFunctional pseudos with a custom parsing rule. Non-listed functional pseudos don't parse a content inside parentheses and represent it as a `Raw` node if any. There is no difference between pseudo class and pseudo element on parsing, like no validation for functional pseudos is supported at the moment.\n\n<!-- gen:pseudo -->\n\n- `:dir()`\n- `:has()`\n- `:lang()`\n- `:matches()`\n- `:not()`\n- `:nth-child()`\n- `:nth-last-child()`\n- `:nth-last-of-type()`\n- `:nth-of-type()`\n- `:slotted()`\n\n<!-- /gen:pseudo -->\n\n## Properties\n\nSupport for a property means CSSTree has a grammar for such property, so its value can be checked (validated) for complience to spec or browser inplementations (for non-standart properties). The validation doesn't perform on parsing stage and should be done as a separate step using Lexer API. In other words any property value can be parsed with default parsing rules, but validation is possible for listed properties only.\n\n<!-- gen:properties -->\n\n- `-moz-appearance`\n- `-moz-background-clip`\n- `-moz-binding`\n- `-moz-border-bottom-colors`\n- `-moz-border-left-colors`\n- `-moz-border-radius-bottomleft`\n- `-moz-border-radius-bottomright`\n- `-moz-border-radius-topleft`\n- `-moz-border-radius-topright`\n- `-moz-border-right-colors`\n- `-moz-border-top-colors`\n- `-moz-context-properties`\n- `-moz-float-edge`\n- `-moz-force-broken-image-icon`\n- `-moz-image-region`\n- `-moz-orient`\n- `-moz-osx-font-smoothing`\n- `-moz-outline-radius`\n- `-moz-outline-radius-bottomleft`\n- `-moz-outline-radius-bottomright`\n- `-moz-outline-radius-topleft`\n- `-moz-outline-radius-topright`\n- `-moz-stack-sizing`\n- `-moz-text-blink`\n- `-moz-user-focus`\n- `-moz-user-input`\n- `-moz-user-modify`\n- `-moz-user-select`\n- `-moz-window-dragging`\n- `-moz-window-shadow`\n- `-ms-accelerator`\n- `-ms-block-progression`\n- `-ms-content-zoom-chaining`\n- `-ms-content-zoom-limit`\n- `-ms-content-zoom-limit-max`\n- `-ms-content-zoom-limit-min`\n- `-ms-content-zoom-snap`\n- `-ms-content-zoom-snap-points`\n- `-ms-content-zoom-snap-type`\n- `-ms-content-zooming`\n- `-ms-filter`\n- `-ms-flex-align`\n- `-ms-flex-item-align`\n- `-ms-flex-line-pack`\n- `-ms-flex-negative`\n- `-ms-flex-order`\n- `-ms-flex-pack`\n- `-ms-flex-positive`\n- `-ms-flex-preferred-size`\n- `-ms-flow-from`\n- `-ms-flow-into`\n- `-ms-grid-column-align`\n- `-ms-grid-row-align`\n- `-ms-high-contrast-adjust`\n- `-ms-hyphenate-limit-chars`\n- `-ms-hyphenate-limit-lines`\n- `-ms-hyphenate-limit-zone`\n- `-ms-ime-align`\n- `-ms-interpolation-mode`\n- `-ms-overflow-style`\n- `-ms-scroll-chaining`\n- `-ms-scroll-limit`\n- `-ms-scroll-limit-x-max`\n- `-ms-scroll-limit-x-min`\n- `-ms-scroll-limit-y-max`\n- `-ms-scroll-limit-y-min`\n- `-ms-scroll-rails`\n- `-ms-scroll-snap-points-x`\n- `-ms-scroll-snap-points-y`\n- `-ms-scroll-snap-type`\n- `-ms-scroll-snap-x`\n- `-ms-scroll-snap-y`\n- `-ms-scroll-translation`\n- `-ms-scrollbar-3dlight-color`\n- `-ms-scrollbar-arrow-color`\n- `-ms-scrollbar-base-color`\n- `-ms-scrollbar-darkshadow-color`\n- `-ms-scrollbar-face-color`\n- `-ms-scrollbar-highlight-color`\n- `-ms-scrollbar-shadow-color`\n- `-ms-scrollbar-track-color`\n- `-ms-text-autospace`\n- `-ms-touch-select`\n- `-ms-user-select`\n- `-ms-wrap-flow`\n- `-ms-wrap-margin`\n- `-ms-wrap-through`\n- `-webkit-appearance`\n- `-webkit-background-clip`\n- `-webkit-border-before`\n- `-webkit-border-before-color`\n- `-webkit-border-before-style`\n- `-webkit-border-before-width`\n- `-webkit-box-reflect`\n- `-webkit-column-break-after`\n- `-webkit-column-break-before`\n- `-webkit-column-break-inside`\n- `-webkit-font-smoothing`\n- `-webkit-line-clamp`\n- `-webkit-mask`\n- `-webkit-mask-attachment`\n- `-webkit-mask-box-image`\n- `-webkit-mask-clip`\n- `-webkit-mask-composite`\n- `-webkit-mask-image`\n- `-webkit-mask-origin`\n- `-webkit-mask-position`\n- `-webkit-mask-position-x`\n- `-webkit-mask-position-y`\n- `-webkit-mask-repeat`\n- `-webkit-mask-repeat-x`\n- `-webkit-mask-repeat-y`\n- `-webkit-mask-size`\n- `-webkit-overflow-scrolling`\n- `-webkit-print-color-adjust`\n- `-webkit-tap-highlight-color`\n- `-webkit-text-fill-color`\n- `-webkit-text-security`\n- `-webkit-text-stroke`\n- `-webkit-text-stroke-color`\n- `-webkit-text-stroke-width`\n- `-webkit-touch-callout`\n- `-webkit-user-drag`\n- `-webkit-user-modify`\n- `-webkit-user-select`\n- `align-content`\n- `align-items`\n- `align-self`\n- `alignment-baseline`\n- `all`\n- `animation`\n- `animation-delay`\n- `animation-direction`\n- `animation-duration`\n- `animation-fill-mode`\n- `animation-iteration-count`\n- `animation-name`\n- `animation-play-state`\n- `animation-timing-function`\n- `appearance`\n- `azimuth`\n- `backdrop-filter`\n- `backface-visibility`\n- `background`\n- `background-attachment`\n- `background-blend-mode`\n- `background-clip`\n- `background-color`\n- `background-image`\n- `background-origin`\n- `background-position`\n- `background-position-x`\n- `background-position-y`\n- `background-repeat`\n- `background-size`\n- `baseline-shift`\n- `behavior`\n- `block-overflow`\n- `block-size`\n- `border`\n- `border-block-end`\n- `border-block-end-color`\n- `border-block-end-style`\n- `border-block-end-width`\n- `border-block-start`\n- `border-block-start-color`\n- `border-block-start-style`\n- `border-block-start-width`\n- `border-bottom`\n- `border-bottom-color`\n- `border-bottom-left-radius`\n- `border-bottom-right-radius`\n- `border-bottom-style`\n- `border-bottom-width`\n- `border-collapse`\n- `border-color`\n- `border-image`\n- `border-image-outset`\n- `border-image-repeat`\n- `border-image-slice`\n- `border-image-source`\n- `border-image-width`\n- `border-inline-end`\n- `border-inline-end-color`\n- `border-inline-end-style`\n- `border-inline-end-width`\n- `border-inline-start`\n- `border-inline-start-color`\n- `border-inline-start-style`\n- `border-inline-start-width`\n- `border-left`\n- `border-left-color`\n- `border-left-style`\n- `border-left-width`\n- `border-radius`\n- `border-right`\n- `border-right-color`\n- `border-right-style`\n- `border-right-width`\n- `border-spacing`\n- `border-style`\n- `border-top`\n- `border-top-color`\n- `border-top-left-radius`\n- `border-top-right-radius`\n- `border-top-style`\n- `border-top-width`\n- `border-width`\n- `bottom`\n- `box-align`\n- `box-decoration-break`\n- `box-direction`\n- `box-flex`\n- `box-flex-group`\n- `box-lines`\n- `box-ordinal-group`\n- `box-orient`\n- `box-pack`\n- `box-shadow`\n- `box-sizing`\n- `break-after`\n- `break-before`\n- `break-inside`\n- `caption-side`\n- `caret-color`\n- `clear`\n- `clip`\n- `clip-path`\n- `clip-rule`\n- `color`\n- `color-adjust`\n- `column-count`\n- `column-fill`\n- `column-gap`\n- `column-rule`\n- `column-rule-color`\n- `column-rule-style`\n- `column-rule-width`\n- `column-span`\n- `column-width`\n- `columns`\n- `contain`\n- `content`\n- `counter-increment`\n- `counter-reset`\n- `cue`\n- `cue-after`\n- `cue-before`\n- `cursor`\n- `direction`\n- `display`\n- `dominant-baseline`\n- `empty-cells`\n- `fill`\n- `fill-opacity`\n- `fill-rule`\n- `filter`\n- `flex`\n- `flex-basis`\n- `flex-direction`\n- `flex-flow`\n- `flex-grow`\n- `flex-shrink`\n- `flex-wrap`\n- `float`\n- `font`\n- `font-family`\n- `font-feature-settings`\n- `font-kerning`\n- `font-language-override`\n- `font-optical-sizing`\n- `font-size`\n- `font-size-adjust`\n- `font-stretch`\n- `font-style`\n- `font-synthesis`\n- `font-variant`\n- `font-variant-alternates`\n- `font-variant-caps`\n- `font-variant-east-asian`\n- `font-variant-ligatures`\n- `font-variant-numeric`\n- `font-variant-position`\n- `font-variation-settings`\n- `font-weight`\n- `gap`\n- `glyph-orientation-horizontal`\n- `glyph-orientation-vertical`\n- `grid`\n- `grid-area`\n- `grid-auto-columns`\n- `grid-auto-flow`\n- `grid-auto-rows`\n- `grid-column`\n- `grid-column-end`\n- `grid-column-gap`\n- `grid-column-start`\n- `grid-gap`\n- `grid-row`\n- `grid-row-end`\n- `grid-row-gap`\n- `grid-row-start`\n- `grid-template`\n- `grid-template-areas`\n- `grid-template-columns`\n- `grid-template-rows`\n- `hanging-punctuation`\n- `height`\n- `hyphens`\n- `image-orientation`\n- `image-rendering`\n- `image-resolution`\n- `ime-mode`\n- `initial-letter`\n- `initial-letter-align`\n- `inline-size`\n- `isolation`\n- `justify-content`\n- `justify-items`\n- `justify-self`\n- `kerning`\n- `left`\n- `letter-spacing`\n- `line-break`\n- `line-clamp`\n- `line-height`\n- `line-height-step`\n- `list-style`\n- `list-style-image`\n- `list-style-position`\n- `list-style-type`\n- `margin`\n- `margin-block-end`\n- `margin-block-start`\n- `margin-bottom`\n- `margin-inline-end`\n- `margin-inline-start`\n- `margin-left`\n- `margin-right`\n- `margin-top`\n- `marker`\n- `marker-end`\n- `marker-mid`\n- `marker-start`\n- `mask`\n- `mask-border`\n- `mask-border-mode`\n- `mask-border-outset`\n- `mask-border-repeat`\n- `mask-border-slice`\n- `mask-border-source`\n- `mask-border-width`\n- `mask-clip`\n- `mask-composite`\n- `mask-image`\n- `mask-mode`\n- `mask-origin`\n- `mask-position`\n- `mask-repeat`\n- `mask-size`\n- `mask-type`\n- `max-block-size`\n- `max-height`\n- `max-inline-size`\n- `max-lines`\n- `max-width`\n- `min-block-size`\n- `min-height`\n- `min-inline-size`\n- `min-width`\n- `mix-blend-mode`\n- `object-fit`\n- `object-position`\n- `offset`\n- `offset-anchor`\n- `offset-block-end`\n- `offset-block-start`\n- `offset-distance`\n- `offset-inline-end`\n- `offset-inline-start`\n- `offset-path`\n- `offset-position`\n- `offset-rotate`\n- `opacity`\n- `order`\n- `orphans`\n- `outline`\n- `outline-color`\n- `outline-offset`\n- `outline-style`\n- `outline-width`\n- `overflow`\n- `overflow-anchor`\n- `overflow-block`\n- `overflow-clip-box`\n- `overflow-inline`\n- `overflow-wrap`\n- `overflow-x`\n- `overflow-y`\n- `overscroll-behavior`\n- `overscroll-behavior-x`\n- `overscroll-behavior-y`\n- `padding`\n- `padding-block-end`\n- `padding-block-start`\n- `padding-bottom`\n- `padding-inline-end`\n- `padding-inline-start`\n- `padding-left`\n- `padding-right`\n- `padding-top`\n- `page-break-after`\n- `page-break-before`\n- `page-break-inside`\n- `paint-order`\n- `pause`\n- `pause-after`\n- `pause-before`\n- `perspective`\n- `perspective-origin`\n- `place-content`\n- `pointer-events`\n- `position`\n- `quotes`\n- `resize`\n- `rest`\n- `rest-after`\n- `rest-before`\n- `right`\n- `rotate`\n- `row-gap`\n- `ruby-align`\n- `ruby-merge`\n- `ruby-position`\n- `scale`\n- `scroll-behavior`\n- `scroll-snap-coordinate`\n- `scroll-snap-destination`\n- `scroll-snap-points-x`\n- `scroll-snap-points-y`\n- `scroll-snap-type`\n- `scroll-snap-type-x`\n- `scroll-snap-type-y`\n- `shape-image-threshold`\n- `shape-margin`\n- `shape-outside`\n- `shape-rendering`\n- `speak`\n- `speak-as`\n- `src`\n- `stroke`\n- `stroke-dasharray`\n- `stroke-dashoffset`\n- `stroke-linecap`\n- `stroke-linejoin`\n- `stroke-miterlimit`\n- `stroke-opacity`\n- `stroke-width`\n- `tab-size`\n- `table-layout`\n- `text-align`\n- `text-align-last`\n- `text-anchor`\n- `text-combine-upright`\n- `text-decoration`\n- `text-decoration-color`\n- `text-decoration-line`\n- `text-decoration-skip`\n- `text-decoration-skip-ink`\n- `text-decoration-style`\n- `text-emphasis`\n- `text-emphasis-color`\n- `text-emphasis-position`\n- `text-emphasis-style`\n- `text-indent`\n- `text-justify`\n- `text-orientation`\n- `text-overflow`\n- `text-rendering`\n- `text-shadow`\n- `text-size-adjust`\n- `text-transform`\n- `text-underline-position`\n- `top`\n- `touch-action`\n- `transform`\n- `transform-box`\n- `transform-origin`\n- `transform-style`\n- `transition`\n- `transition-delay`\n- `transition-duration`\n- `transition-property`\n- `transition-timing-function`\n- `translate`\n- `unicode-bidi`\n- `unicode-range`\n- `user-select`\n- `vertical-align`\n- `visibility`\n- `voice-balance`\n- `voice-duration`\n- `voice-family`\n- `voice-pitch`\n- `voice-range`\n- `voice-rate`\n- `voice-stress`\n- `voice-volume`\n- `white-space`\n- `widows`\n- `width`\n- `will-change`\n- `word-break`\n- `word-spacing`\n- `word-wrap`\n- `writing-mode`\n- `z-index`\n- `zoom`\n\n<!-- /gen:properties -->",
      "metadata": {}
    },
    "syntax": {
      "reference": "syntax",
      "route": "syntax",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss\\docs\\syntax.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"how-to-write-custom-syntax\">How to Write Custom Syntax</h1>\n<p>PostCSS can transform styles in any syntax, and is not limited to just CSS.\nBy writing a custom syntax, you can transform styles in any desired format.</p>\n<p>Writing a custom syntax is much harder than writing a PostCSS plugin, but\nit is an awesome adventure.</p>\n<p>There are 3 types of PostCSS syntax packages:</p>\n<ul>\n<li><strong>Parser</strong> to parse input string to node’s tree.</li>\n<li><strong>Stringifier</strong> to generate output string by node’s tree.</li>\n<li><strong>Syntax</strong> contains both parser and stringifier.</li>\n</ul>\n<h2 id=\"syntax\">Syntax</h2>\n<p>A good example of a custom syntax is <a href=\"https://github.com/postcss/postcss-scss\">SCSS</a>. Some users may want to transform\nSCSS sources with PostCSS plugins, for example if they need to add vendor\nprefixes or change the property order. So this syntax should output SCSS from\nan SCSS input.</p>\n<p>The syntax API is a very simple plain object, with <code>parse</code> &amp; <code>stringify</code>\nfunctions:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"support variable js\"><span>module</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>exports</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;parse</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>./parse</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;stringify</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>./stringify</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h2 id=\"parser\">Parser</h2>\n<p>A good example of a parser is <a href=\"https://github.com/postcss/postcss-safe-parser\">Safe Parser</a>, which parses malformed/broken CSS.\nBecause there is no point to generate broken output, this package only provides\na parser.</p>\n<p>The parser API is a function which receives a string &amp; returns a <a href=\"http://api.postcss.org/Root.html\"><code>Root</code></a> node.\nThe second argument is a function which receives an object with PostCSS options.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>postcss</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>postcss</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"support variable js\"><span>module</span></span><span class=\"meta function js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>exports</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>parse</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>css</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>opts</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>root</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>root</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Add&nbsp;other&nbsp;nodes&nbsp;to&nbsp;root</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;root</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div></pre><h3 id=\"main-theory\">Main Theory</h3>\n<p>There are many books about parsers; but do not worry because CSS syntax is\nvery easy, and so the parser will be much simpler than a programming language\nparser.</p>\n<p>The default PostCSS parser contains two steps:</p>\n<ol>\n<li><a href=\"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6\">Tokenizer</a> which reads input string character by character and builds a\ntokens array. For example, it joins space symbols to a <code>[&#39;space&#39;, &#39;\\n  &#39;]</code>\ntoken, and detects strings to a <code>[&#39;string&#39;, &#39;&quot;\\&quot;{&quot;&#39;]</code> token.</li>\n<li><a href=\"https://github.com/postcss/postcss/blob/master/lib/parser.es6\">Parser</a> which reads the tokens array, creates node instances and\nbuilds a tree.</li>\n</ol>\n<h3 id=\"performance\">Performance</h3>\n<p>Parsing input is often the most time consuming task in CSS processors. So it\nis very important to have a fast parser.</p>\n<p>The main rule of optimization is that there is no performance without a\nbenchmark. You can look at <a href=\"https://github.com/postcss/benchmark\">PostCSS benchmarks</a> to build your own.</p>\n<p>Of parsing tasks, the tokenize step will often take the most time, so its\nperformance should be prioritized. Unfortunately, classes, functions and\nhigh level structures can slow down your tokenizer. Be ready to write dirty\ncode with repeated statements. This is why it is difficult to extend the\ndefault <a href=\"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6\">PostCSS tokenizer</a>; copy &amp; paste will be a necessary evil.</p>\n<p>Second optimization is using character codes instead of strings.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Slow</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>string</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>{</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Fast</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>OPEN_CURLY</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>123</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;`{&#39;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>string</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>charCodeAt</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>i</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>OPEN_CURLY</span></span></span></div></pre><p>Third optimization is “fast jumps”. If you find open quotes, you can find\nnext closing quote much faster by <code>indexOf</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Simple&nbsp;jump</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>next&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>string</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>indexOf</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&quot;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;currentPosition&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Jump&nbsp;by&nbsp;RegExp</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>regexp</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>lastIndex</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;currentPosion&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>regexp</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>test</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>string</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>next&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>regexp</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>lastIndex</span></span></span></div></pre><p>The parser can be a well written class. There is no need in copy-paste and\nhardcore optimization there. You can extend the default <a href=\"https://github.com/postcss/postcss/blob/master/lib/parser.es6\">PostCSS parser</a>.</p>\n<h3 id=\"node-source\">Node Source</h3>\n<p>Every node should have <code>source</code> property to generate correct source map.\nThis property contains <code>start</code> and <code>end</code> properties with <code>{ line, column }</code>,\nand <code>input</code> property with an <a href=\"https://github.com/postcss/postcss/blob/master/lib/input.es6\"><code>Input</code></a> instance.</p>\n<p>Your tokenizer should save the original position so that you can propagate\nthe values to the parser, to ensure that the source map is correctly updated.</p>\n<h3 id=\"raw-values\">Raw Values</h3>\n<p>A good PostCSS parser should provide all information (including spaces symbols)\nto generate byte-to-byte equal output. It is not so difficult, but respectful\nfor user input and allow integration smoke tests.</p>\n<p>A parser should save all additional symbols to <code>node.raws</code> object.\nIt is an open structure for you, you can add additional keys.\nFor example, <a href=\"https://github.com/postcss/postcss-scss\">SCSS parser</a> saves comment types (<code>/* */</code> or <code>//</code>)\nin <code>node.raws.inline</code>.</p>\n<p>The default parser cleans CSS values from comments and spaces.\nIt saves the original value with comments to <code>node.raws.value.raw</code> and uses it,\nif the node value was not changed.</p>\n<h3 id=\"tests\">Tests</h3>\n<p>Of course, all parsers in the PostCSS ecosystem must have tests.</p>\n<p>If your parser just extends CSS syntax (like <a href=\"https://github.com/postcss/postcss-scss\">SCSS</a> or <a href=\"https://github.com/postcss/postcss-safe-parser\">Safe Parser</a>),\nyou can use the <a href=\"https://github.com/postcss/postcss-parser-tests\">PostCSS Parser Tests</a>. It contains unit &amp; integration tests.</p>\n<h2 id=\"stringifier\">Stringifier</h2>\n<p>A style guide generator is a good example of a stringifier. It generates output\nHTML which contains CSS components. For this use case, a parser isn&#39;t necessary,\nso the package should just contain a stringifier.</p>\n<p>The Stringifier API is little bit more complicated, than the parser API.\nPostCSS generates a source map, so a stringifier can’t just return a string.\nIt must link every substring with its source node.</p>\n<p>A Stringifier is a function which receives <a href=\"http://api.postcss.org/Root.html\"><code>Root</code></a> node and builder callback.\nThen it calls builder with every node’s string and node instance.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"support variable js\"><span>module</span></span><span class=\"meta function js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>exports</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"entity name function js\"><span>stringify</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>builder</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Some&nbsp;magic</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>string</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>:</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>builder</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>string</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;decl</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Some&nbsp;science</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h3 id=\"main-theory\">Main Theory</h3>\n<p>PostCSS <a href=\"https://github.com/postcss/postcss/blob/master/lib/stringifier.es6\">default stringifier</a> is just a class with a method for each node type\nand many methods to detect raw properties.</p>\n<p>In most cases it will be enough just to extend this class,\nlike in <a href=\"https://github.com/postcss/postcss-scss/blob/master/lib/scss-stringifier.es6\">SCSS stringifier</a>.</p>\n<h3 id=\"builder-function\">Builder Function</h3>\n<p>A builder function will be passed to <code>stringify</code> function as second argument.\nFor example, the default PostCSS stringifier class saves it\nto <code>this.builder</code> property.</p>\n<p>Builder receives output substring and source node to append this substring\nto the final output.</p>\n<p>Some nodes contain other nodes in the middle. For example, a rule has a <code>{</code>\nat the beginning, many declarations inside and a closing <code>}</code>.</p>\n<p>For these cases, you should pass a third argument to builder function:\n<code>&#39;start&#39;</code> or <code>&#39;end&#39;</code> string:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable language js\"><span>this</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>builder</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>rule</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>selector</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>{</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;rule</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>start</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Stringify&nbsp;declarations&nbsp;inside</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable language js\"><span>this</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>builder</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;rule</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>end</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><h3 id=\"raw-values\">Raw Values</h3>\n<p>A good PostCSS custom syntax saves all symbols and provide byte-to-byte equal\noutput if there were no changes.</p>\n<p>This is why every node has <code>node.raws</code> object to store space symbol, etc.</p>\n<p>Be careful, because sometimes these raw properties will not be present; some\nnodes may be built manually, or may lose their indentation when they are moved\nto another parent node.</p>\n<p>This is why the default stringifier has a <code>raw()</code> method to autodetect raw\nproperties by other nodes. For example, it will look at other nodes to detect\nindent size and them multiply it with the current node depth.</p>\n<h3 id=\"tests\">Tests</h3>\n<p>A stringifier must have tests too.</p>\n<p>You can use unit and integration test cases from <a href=\"https://github.com/postcss/postcss-parser-tests\">PostCSS Parser Tests</a>.\nJust compare input CSS with CSS after your parser and stringifier.</p>\n"
      ],
      "contentsRaw": "# How to Write Custom Syntax\n\nPostCSS can transform styles in any syntax, and is not limited to just CSS.\nBy writing a custom syntax, you can transform styles in any desired format.\n\nWriting a custom syntax is much harder than writing a PostCSS plugin, but\nit is an awesome adventure.\n\nThere are 3 types of PostCSS syntax packages:\n\n* **Parser** to parse input string to node’s tree.\n* **Stringifier** to generate output string by node’s tree.\n* **Syntax** contains both parser and stringifier.\n\n## Syntax\n\nA good example of a custom syntax is [SCSS]. Some users may want to transform\nSCSS sources with PostCSS plugins, for example if they need to add vendor\nprefixes or change the property order. So this syntax should output SCSS from\nan SCSS input.\n\nThe syntax API is a very simple plain object, with `parse` & `stringify`\nfunctions:\n\n```js\nmodule.exports = {\n  parse:     require('./parse'),\n  stringify: require('./stringify')\n}\n```\n\n[SCSS]: https://github.com/postcss/postcss-scss\n\n## Parser\n\nA good example of a parser is [Safe Parser], which parses malformed/broken CSS.\nBecause there is no point to generate broken output, this package only provides\na parser.\n\nThe parser API is a function which receives a string & returns a [`Root`] node.\nThe second argument is a function which receives an object with PostCSS options.\n\n```js\nconst postcss = require('postcss')\n\nmodule.exports = function parse (css, opts) {\n  const root = postcss.root()\n  // Add other nodes to root\n  return root\n}\n```\n\n[Safe Parser]: https://github.com/postcss/postcss-safe-parser\n[`Root`]:      http://api.postcss.org/Root.html\n\n### Main Theory\n\nThere are many books about parsers; but do not worry because CSS syntax is\nvery easy, and so the parser will be much simpler than a programming language\nparser.\n\nThe default PostCSS parser contains two steps:\n\n1. [Tokenizer] which reads input string character by character and builds a\n  tokens array. For example, it joins space symbols to a `['space', '\\n  ']`\n  token, and detects strings to a `['string', '\"\\\"{\"']` token.\n2. [Parser] which reads the tokens array, creates node instances and\n  builds a tree.\n\n[Tokenizer]: https://github.com/postcss/postcss/blob/master/lib/tokenize.es6\n[Parser]:    https://github.com/postcss/postcss/blob/master/lib/parser.es6\n\n### Performance\n\nParsing input is often the most time consuming task in CSS processors. So it\nis very important to have a fast parser.\n\nThe main rule of optimization is that there is no performance without a\nbenchmark. You can look at [PostCSS benchmarks] to build your own.\n\nOf parsing tasks, the tokenize step will often take the most time, so its\nperformance should be prioritized. Unfortunately, classes, functions and\nhigh level structures can slow down your tokenizer. Be ready to write dirty\ncode with repeated statements. This is why it is difficult to extend the\ndefault [PostCSS tokenizer]; copy & paste will be a necessary evil.\n\nSecond optimization is using character codes instead of strings.\n\n```js\n// Slow\nstring[i] === '{'\n\n// Fast\nconst OPEN_CURLY = 123 // `{'\nstring.charCodeAt(i) === OPEN_CURLY\n```\n\nThird optimization is “fast jumps”. If you find open quotes, you can find\nnext closing quote much faster by `indexOf`:\n\n```js\n// Simple jump\nnext = string.indexOf('\"', currentPosition + 1)\n\n// Jump by RegExp\nregexp.lastIndex = currentPosion + 1\nregexp.test(string)\nnext = regexp.lastIndex\n```\n\nThe parser can be a well written class. There is no need in copy-paste and\nhardcore optimization there. You can extend the default [PostCSS parser].\n\n[PostCSS benchmarks]: https://github.com/postcss/benchmark\n[PostCSS tokenizer]:  https://github.com/postcss/postcss/blob/master/lib/tokenize.es6\n[PostCSS parser]:     https://github.com/postcss/postcss/blob/master/lib/parser.es6\n\n### Node Source\n\nEvery node should have `source` property to generate correct source map.\nThis property contains `start` and `end` properties with `{ line, column }`,\nand `input` property with an [`Input`] instance.\n\nYour tokenizer should save the original position so that you can propagate\nthe values to the parser, to ensure that the source map is correctly updated.\n\n[`Input`]: https://github.com/postcss/postcss/blob/master/lib/input.es6\n\n### Raw Values\n\nA good PostCSS parser should provide all information (including spaces symbols)\nto generate byte-to-byte equal output. It is not so difficult, but respectful\nfor user input and allow integration smoke tests.\n\nA parser should save all additional symbols to `node.raws` object.\nIt is an open structure for you, you can add additional keys.\nFor example, [SCSS parser] saves comment types (`/* */` or `//`)\nin `node.raws.inline`.\n\nThe default parser cleans CSS values from comments and spaces.\nIt saves the original value with comments to `node.raws.value.raw` and uses it,\nif the node value was not changed.\n\n[SCSS parser]: https://github.com/postcss/postcss-scss\n\n### Tests\n\nOf course, all parsers in the PostCSS ecosystem must have tests.\n\nIf your parser just extends CSS syntax (like [SCSS] or [Safe Parser]),\nyou can use the [PostCSS Parser Tests]. It contains unit & integration tests.\n\n[PostCSS Parser Tests]: https://github.com/postcss/postcss-parser-tests\n\n## Stringifier\n\nA style guide generator is a good example of a stringifier. It generates output\nHTML which contains CSS components. For this use case, a parser isn't necessary,\nso the package should just contain a stringifier.\n\nThe Stringifier API is little bit more complicated, than the parser API.\nPostCSS generates a source map, so a stringifier can’t just return a string.\nIt must link every substring with its source node.\n\nA Stringifier is a function which receives [`Root`] node and builder callback.\nThen it calls builder with every node’s string and node instance.\n\n```js\nmodule.exports = function stringify (root, builder) {\n  // Some magic\n  const string = decl.prop + ':' + decl.value + ';'\n  builder(string, decl)\n  // Some science\n};\n```\n\n### Main Theory\n\nPostCSS [default stringifier] is just a class with a method for each node type\nand many methods to detect raw properties.\n\nIn most cases it will be enough just to extend this class,\nlike in [SCSS stringifier].\n\n[default stringifier]: https://github.com/postcss/postcss/blob/master/lib/stringifier.es6\n[SCSS stringifier]:    https://github.com/postcss/postcss-scss/blob/master/lib/scss-stringifier.es6\n\n### Builder Function\n\nA builder function will be passed to `stringify` function as second argument.\nFor example, the default PostCSS stringifier class saves it\nto `this.builder` property.\n\nBuilder receives output substring and source node to append this substring\nto the final output.\n\nSome nodes contain other nodes in the middle. For example, a rule has a `{`\nat the beginning, many declarations inside and a closing `}`.\n\nFor these cases, you should pass a third argument to builder function:\n`'start'` or `'end'` string:\n\n```js\nthis.builder(rule.selector + '{', rule, 'start')\n// Stringify declarations inside\nthis.builder('}', rule, 'end')\n```\n\n### Raw Values\n\nA good PostCSS custom syntax saves all symbols and provide byte-to-byte equal\noutput if there were no changes.\n\nThis is why every node has `node.raws` object to store space symbol, etc.\n\nBe careful, because sometimes these raw properties will not be present; some\nnodes may be built manually, or may lose their indentation when they are moved\nto another parent node.\n\nThis is why the default stringifier has a `raw()` method to autodetect raw\nproperties by other nodes. For example, it will look at other nodes to detect\nindent size and them multiply it with the current node depth.\n\n### Tests\n\nA stringifier must have tests too.\n\nYou can use unit and integration test cases from [PostCSS Parser Tests].\nJust compare input CSS with CSS after your parser and stringifier.\n\n[PostCSS Parser Tests]: https://github.com/postcss/postcss-parser-tests",
      "metadata": {}
    },
    "Tokenizer": {
      "reference": "Tokenizer",
      "route": "Tokenizer",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\Tokenizer.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"tokenizer\">Tokenizer</h1>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#static-properties\">Static properties</a><ul>\n<li><a href=\"#csssyntaxerror\">CssSyntaxError</a></li>\n<li><a href=\"#type\">TYPE</a></li>\n<li><a href=\"#name\">NAME</a></li>\n<li><a href=\"#symbol_type\">SYMBOL_TYPE</a></li>\n<li><a href=\"#punctuation\">PUNCTUATION</a></li>\n</ul>\n</li>\n<li><a href=\"#static-methods\">Static methods</a><ul>\n<li><a href=\"#firstcharoffsetsource\">firstCharOffset(source)</a></li>\n<li><a href=\"#ishexcode\">isHex(code)</a></li>\n<li><a href=\"#isnumbercode\">isNumber(code)</a></li>\n<li><a href=\"#isnewlinesource-offset-code\">isNewline(source, offset, code)</a></li>\n<li><a href=\"#cmpcharteststr-offset-referencecode\">cmpChar(testStr, offset, referenceCode)</a></li>\n<li><a href=\"#cmpstrteststr-start-end-referencestr\">cmpStr(testStr, start, end, referenceStr)</a></li>\n<li><a href=\"#endswithteststr-referencestr\">endsWith(testStr, referenceStr)</a></li>\n<li><a href=\"#findlastnonspacelocationscanner\">findLastNonSpaceLocation(scanner)</a></li>\n<li><a href=\"#findwhitespaceendsource-offset\">findWhitespaceEnd(source, offset)</a></li>\n<li><a href=\"#findcommentendsource-offset\">findCommentEnd(source, offset)</a></li>\n<li><a href=\"#findstringendsource-offset-quote\">findStringEnd(source, offset, quote)</a></li>\n<li><a href=\"#finddecimalnumberendsource-offset\">findDecimalNumberEnd(source, offset)</a></li>\n<li><a href=\"#findnumberendsource-offset-allowfraction\">findNumberEnd(source, offset, allowFraction)</a></li>\n<li><a href=\"#findescaseendsource-offset\">findEscaseEnd(source, offset)</a></li>\n<li><a href=\"#findidentifierendsource-offset\">findIdentifierEnd(source, offset)</a></li>\n</ul>\n</li>\n<li><a href=\"#methods\">Methods</a><ul>\n<li><a href=\"#setsourcesource-startoffset-startline-startcolumn\">setSource(source, startOffset, startLine, startColumn)</a></li>\n<li><a href=\"#lookuptypeoffset\">lookupType(offset)</a></li>\n<li><a href=\"#lookupnonwstypeoffset\">lookupNonWSType(offset)</a></li>\n<li><a href=\"#lookupvalueoffset-referencestr\">lookupValue(offset, referenceStr)</a></li>\n<li><a href=\"#gettokenvalue\">getTokenValue()</a></li>\n<li><a href=\"#substrtocursorstart\">substrToCursor(start)</a></li>\n<li><a href=\"#skipws\">skipWS()</a></li>\n<li><a href=\"#skiptokencount\">skip(tokenCount)</a></li>\n<li><a href=\"#next\">next()</a></li>\n<li><a href=\"#eattokentype\">eat(tokenType)</a></li>\n<li><a href=\"#eatnonwstokentype\">eatNonWS(tokenType)</a></li>\n<li><a href=\"#consumetokentype\">consume(tokenType)</a></li>\n<li><a href=\"#consumenonwstokentype\">consumeNonWS(tokenType)</a></li>\n<li><a href=\"#expectidentifiername\">expectIdentifier(name)</a></li>\n<li><a href=\"#getlocationoffset-filename\">getLocation(offset, filename)</a></li>\n<li><a href=\"#getlocationrangestart-end-filename\">getLocationRange(start, end, filename)</a></li>\n<li><a href=\"#errormessage-offset\">error(message, offset)</a></li>\n<li><a href=\"#gettypes\">getTypes()</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"static-properties\">Static properties</h2>\n<h3 id=\"csssyntaxerror\">CssSyntaxError</h3>\n<h3 id=\"type\">TYPE</h3>\n<h3 id=\"name\">NAME</h3>\n<h3 id=\"symbol_type\">SYMBOL_TYPE</h3>\n<h3 id=\"punctuation\">PUNCTUATION</h3>\n<h2 id=\"static-methods\">Static methods</h2>\n<h3 id=\"firstcharoffset-source-\">firstCharOffset(source)</h3>\n<h3 id=\"ishex-code-\">isHex(code)</h3>\n<h3 id=\"isnumber-code-\">isNumber(code)</h3>\n<h3 id=\"isnewline-source-offset-code-\">isNewline(source, offset, code)</h3>\n<h3 id=\"cmpchar-teststr-offset-referencecode-\">cmpChar(testStr, offset, referenceCode)</h3>\n<h3 id=\"cmpstr-teststr-start-end-referencestr-\">cmpStr(testStr, start, end, referenceStr)</h3>\n<h3 id=\"endswith-teststr-referencestr-\">endsWith(testStr, referenceStr)</h3>\n<h3 id=\"findlastnonspacelocation-scanner-\">findLastNonSpaceLocation(scanner)</h3>\n<h3 id=\"findwhitespaceend-source-offset-\">findWhitespaceEnd(source, offset)</h3>\n<h3 id=\"findcommentend-source-offset-\">findCommentEnd(source, offset)</h3>\n<h3 id=\"findstringend-source-offset-quote-\">findStringEnd(source, offset, quote)</h3>\n<h3 id=\"finddecimalnumberend-source-offset-\">findDecimalNumberEnd(source, offset)</h3>\n<h3 id=\"findnumberend-source-offset-allowfraction-\">findNumberEnd(source, offset, allowFraction)</h3>\n<h3 id=\"findescaseend-source-offset-\">findEscaseEnd(source, offset)</h3>\n<h3 id=\"findidentifierend-source-offset-\">findIdentifierEnd(source, offset)</h3>\n<h2 id=\"methods\">Methods</h2>\n<h3 id=\"setsource-source-startoffset-startline-startcolumn-\">setSource(source, startOffset, startLine, startColumn)</h3>\n<h3 id=\"lookuptype-offset-\">lookupType(offset)</h3>\n<h3 id=\"lookupnonwstype-offset-\">lookupNonWSType(offset)</h3>\n<h3 id=\"lookupvalue-offset-referencestr-\">lookupValue(offset, referenceStr)</h3>\n<h3 id=\"gettokenvalue-\">getTokenValue()</h3>\n<h3 id=\"substrtocursor-start-\">substrToCursor(start)</h3>\n<h3 id=\"skipws-\">skipWS()</h3>\n<h3 id=\"skip-tokencount-\">skip(tokenCount)</h3>\n<h3 id=\"next-\">next()</h3>\n<h3 id=\"eat-tokentype-\">eat(tokenType)</h3>\n<h3 id=\"eatnonws-tokentype-\">eatNonWS(tokenType)</h3>\n<h3 id=\"consume-tokentype-\">consume(tokenType)</h3>\n<h3 id=\"consumenonws-tokentype-\">consumeNonWS(tokenType)</h3>\n<h3 id=\"expectidentifier-name-\">expectIdentifier(name)</h3>\n<h3 id=\"getlocation-offset-filename-\">getLocation(offset, filename)</h3>\n<h3 id=\"getlocationrange-start-end-filename-\">getLocationRange(start, end, filename)</h3>\n<h3 id=\"error-message-offset-\">error(message, offset)</h3>\n<h3 id=\"gettypes-\">getTypes()</h3>\n"
      ],
      "contentsRaw": "# Tokenizer\n\n<!-- MarkdownTOC -->\n\n- [Static properties](#static-properties)\n    - [CssSyntaxError](#csssyntaxerror)\n    - [TYPE](#type)\n    - [NAME](#name)\n    - [SYMBOL_TYPE](#symbol_type)\n    - [PUNCTUATION](#punctuation)\n- [Static methods](#static-methods)\n    - [firstCharOffset\\(source\\)](#firstcharoffsetsource)\n    - [isHex\\(code\\)](#ishexcode)\n    - [isNumber\\(code\\)](#isnumbercode)\n    - [isNewline\\(source, offset, code\\)](#isnewlinesource-offset-code)\n    - [cmpChar\\(testStr, offset, referenceCode\\)](#cmpcharteststr-offset-referencecode)\n    - [cmpStr\\(testStr, start, end, referenceStr\\)](#cmpstrteststr-start-end-referencestr)\n    - [endsWith\\(testStr, referenceStr\\)](#endswithteststr-referencestr)\n    - [findLastNonSpaceLocation\\(scanner\\)](#findlastnonspacelocationscanner)\n    - [findWhitespaceEnd\\(source, offset\\)](#findwhitespaceendsource-offset)\n    - [findCommentEnd\\(source, offset\\)](#findcommentendsource-offset)\n    - [findStringEnd\\(source, offset, quote\\)](#findstringendsource-offset-quote)\n    - [findDecimalNumberEnd\\(source, offset\\)](#finddecimalnumberendsource-offset)\n    - [findNumberEnd\\(source, offset, allowFraction\\)](#findnumberendsource-offset-allowfraction)\n    - [findEscaseEnd\\(source, offset\\)](#findescaseendsource-offset)\n    - [findIdentifierEnd\\(source, offset\\)](#findidentifierendsource-offset)\n- [Methods](#methods)\n    - [setSource\\(source, startOffset, startLine, startColumn\\)](#setsourcesource-startoffset-startline-startcolumn)\n    - [lookupType\\(offset\\)](#lookuptypeoffset)\n    - [lookupNonWSType\\(offset\\)](#lookupnonwstypeoffset)\n    - [lookupValue\\(offset, referenceStr\\)](#lookupvalueoffset-referencestr)\n    - [getTokenValue\\(\\)](#gettokenvalue)\n    - [substrToCursor\\(start\\)](#substrtocursorstart)\n    - [skipWS\\(\\)](#skipws)\n    - [skip\\(tokenCount\\)](#skiptokencount)\n    - [next\\(\\)](#next)\n    - [eat\\(tokenType\\)](#eattokentype)\n    - [eatNonWS\\(tokenType\\)](#eatnonwstokentype)\n    - [consume\\(tokenType\\)](#consumetokentype)\n    - [consumeNonWS\\(tokenType\\)](#consumenonwstokentype)\n    - [expectIdentifier\\(name\\)](#expectidentifiername)\n    - [getLocation\\(offset, filename\\)](#getlocationoffset-filename)\n    - [getLocationRange\\(start, end, filename\\)](#getlocationrangestart-end-filename)\n    - [error\\(message, offset\\)](#errormessage-offset)\n    - [getTypes\\(\\)](#gettypes)\n\n<!-- /MarkdownTOC -->\n\n## Static properties\n\n### CssSyntaxError\n\n### TYPE\n\n### NAME\n\n### SYMBOL_TYPE\n\n### PUNCTUATION\n\n\n## Static methods\n\n### firstCharOffset(source)\n\n### isHex(code)\n\n### isNumber(code)\n\n### isNewline(source, offset, code)\n\n### cmpChar(testStr, offset, referenceCode)\n\n### cmpStr(testStr, start, end, referenceStr)\n\n### endsWith(testStr, referenceStr)\n\n### findLastNonSpaceLocation(scanner)\n\n### findWhitespaceEnd(source, offset)\n\n### findCommentEnd(source, offset)\n\n### findStringEnd(source, offset, quote)\n\n### findDecimalNumberEnd(source, offset)\n\n### findNumberEnd(source, offset, allowFraction)\n\n### findEscaseEnd(source, offset)\n\n### findIdentifierEnd(source, offset)\n\n\n## Methods\n\n### setSource(source, startOffset, startLine, startColumn)\n\n### lookupType(offset)\n\n### lookupNonWSType(offset)\n\n### lookupValue(offset, referenceStr)\n\n### getTokenValue()\n\n### substrToCursor(start)\n\n### skipWS()\n\n### skip(tokenCount)\n\n### next()\n\n### eat(tokenType)\n\n### eatNonWS(tokenType)\n\n### consume(tokenType)\n\n### consumeNonWS(tokenType)\n\n### expectIdentifier(name)\n\n### getLocation(offset, filename)\n\n### getLocationRange(start, end, filename)\n\n### error(message, offset)\n\n### getTypes()",
      "metadata": {}
    },
    "traversal": {
      "reference": "traversal",
      "route": "traversal",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\traversal.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"ast-traversal\">AST traversal</h1>\n<p>AST traversal API is provided by <code>walk()</code> method.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;StyleSheet</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Rule</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;SelectorList</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Selector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;ClassSelector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Block</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Declaration</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Value</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Identifier</span></span></span></div></pre><p>The facts you should know about <code>walk()</code> internals:</p>\n<ul>\n<li>Method uses <code>structure</code> field value of every node type to define the way how to iterate the nodes:<ul>\n<li>A function-iterator is generating for every node type.</li>\n<li>Node&#39;s properties iterates in the order it defined in <code>structure</code> (<a href=\"#reverse\">reverse</a> option can invert an order).</li>\n<li>Properties that are not defined in <code>structure</code> are ignoring (doesn&#39;t interate).</li>\n<li>An exception is possible when a tree is not following to expected structure (it may happen if AST was built outside the CSSTree parser or transformed in a wrong way). In case you are not sure about correctness of a tree structure, you can use <code>try/catch</code> or check the tree with <code>csstree.lexer.validateStructure(ast)</code> before iterate it.</li>\n</ul>\n</li>\n<li>Only <code>children</code> fields can contain a list of nodes. A list of nodes should be represented as a <code>List</code> instances. But for certain cases, <code>children</code> can be an array. Since <code>List</code> provides a similar to <code>Array</code> API, traversal can work in most cases, but without any guarantee. Therefore usings arrays in AST is not recomended, use them on your own risk.</li>\n</ul>\n<h2 id=\"walk-ast-options-\">walk(ast, options)</h2>\n<p>Method visits each node of passed tree in a natural way and calls a handler for each one. It takes two arguments: a root node (<code>ast</code>) and an object (<code>options</code>). In simple case, it can take a function (handler) instead of <code>options</code> (<code>walk(ast, fn)</code> is equivalent to <code>walk(ast, { enter: fn })</code>).</p>\n<p>Options:</p>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#enter\">enter</a></li>\n<li><a href=\"#leave\">leave</a></li>\n<li><a href=\"#visit\">visit</a></li>\n<li><a href=\"#reverse\">reverse</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<h3 id=\"enter\">enter</h3>\n<p>Type: <code>function</code> or <code>undefined</code><br>Default: <code>undefined</code></p>\n<p>Handler on node entrance, i.e. before any nested node is processed.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>enter</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;StyleSheet</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Rule</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;SelectorList</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Selector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;ClassSelector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Block</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Declaration</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Value</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Identifier</span></span></span></div></pre><p>In case <code>options</code> has a single <code>enter</code> field, it can replaced for the handler passed as a value for <code>enter</code>, i.e. <code>walk(ast, { enter: fn })</code> → <code>walk(ast, fn)</code>.</p>\n<p>Handler receives a three arguments:</p>\n<ul>\n<li><code>node</code> – the AST node a walker entering to</li>\n<li><code>item</code> – node wrapper, that contains references to <code>prev</code> and <code>next</code> nodes in a list, and <code>data</code> reference for the node</li>\n<li><code>list</code> – is a reference for the list; it&#39;s useful for list operations like <code>remove()</code> or <code>insert()</code></li>\n</ul>\n<blockquote>\n<p>NOTE: If <code>children</code> is an array, the last two arguments are <code>index</code> and <code>array</code>, like for <code>Array#forEach()</code> or <code>Array#map()</code> methods.</p>\n</blockquote>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>csstree</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>ast</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted template js\"><span class=\"punctuation definition string begin js\"><span>`</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;.a&nbsp;{&nbsp;foo:&nbsp;1;&nbsp;bar:&nbsp;2;&nbsp;}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;.b&nbsp;{&nbsp;bar:&nbsp;3;&nbsp;baz:&nbsp;4;&nbsp;}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span class=\"punctuation definition string end js\"><span>`</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;remove&nbsp;declarations&nbsp;with&nbsp;`bar`&nbsp;property&nbsp;from&nbsp;the&nbsp;tree</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>item</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>list</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Declaration</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>property</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>bar</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&nbsp;list</span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;remove&nbsp;a&nbsp;declaration&nbsp;from&nbsp;a&nbsp;list&nbsp;it</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>list</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>remove</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>item</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;.a{foo:1}.b{baz:4}</span></span></span></div></pre><blockquote>\n<p>NOTE:</p>\n<ul>\n<li><code>item</code> and <code>list</code> are not defined for nodes that are not in a list. Even <code>Declaration</code> can be outside of any list in case it is a root of tree or a part of <code>@supports</code> prelude, e.g. <code>@supports (bar: 123) { ... }</code>. Therefore, it&#39;s recomended to check <code>item</code> or <code>list</code> are defined before using of it (those values both are defined or both are undefined, so it&#39;s enough to test one of them)</li>\n<li>Only <code>List</code> instances are safe for tree transformations such as node removal. In case you perform such operations, you can ensure that all <code>children</code> in a tree is a <code>List</code> instances by calling <code>csstree.fromPlainObject(ast)</code> before traversal.</li>\n<li>It&#39;s better to use <code>visit</code> option when possible to reach better performance</li>\n</ul>\n</blockquote>\n<p>Context (<code>this</code>) for a handler is an object with a references to the closest ancestor nodes:</p>\n<ul>\n<li><code>root</code> – refers to AST root node (actually it&#39;s a node passed to <code>walk()</code> method)</li>\n<li><code>stylesheet</code> – refers to <code>StyleSheet</code> node, usually it&#39;s a root node</li>\n<li><code>atrule</code> – refers to closest <code>Atrule</code> node if any</li>\n<li><code>atrulePrelude</code> – refers to <code>AtrulePrelude</code> node if any</li>\n<li><code>rule</code> – refers to closest <code>Rule</code> node if any</li>\n<li><code>selector</code> – refers to <code>SelectorList</code> node if any</li>\n<li><code>block</code> - refers to closest <code>Block</code> node if any</li>\n<li><code>declaration</code> – refers to <code>Declaration</code> node if any</li>\n<li><code>function</code> – refers to closest <code>Function</code>, <code>PseudoClassSelector</code> or <code>PseudoElementSelector</code> node if current node inside one of them</li>\n</ul>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>csstree</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>ast</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted template js\"><span class=\"punctuation definition string begin js\"><span>`</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;@import&nbsp;url(import.css);</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;.foo&nbsp;{&nbsp;background:&nbsp;url(&#39;foo.jpg&#39;);&nbsp;}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;.bar&nbsp;{&nbsp;background-image:&nbsp;url(bar.png);&nbsp;}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span class=\"punctuation definition string end js\"><span>`</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;collect&nbsp;all&nbsp;urls&nbsp;in&nbsp;declarations</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>urls</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>declaration</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>!==</span></span><span>&nbsp;</span><span class=\"constant language null js\"><span>null</span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Url</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>value</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>value</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Raw</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>urls</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>value</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span>&nbsp;</span><span class=\"keyword control js\"><span>else</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>urls</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>value</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>substr</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>value</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>-</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>2</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>urls</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;[&nbsp;&#39;foo.jpg&#39;,&nbsp;&#39;bar.png&#39;&nbsp;]</span></span></span></div></pre><h3 id=\"leave\">leave</h3>\n<p>Type: <code>function</code> or <code>undefined</code><br>Default: <code>undefined</code></p>\n<p>The same as <code>enter</code> handler but invokes on node exit, i.e. after all nested nodes are processed.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>leave</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;ClassSelector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Selector</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;SelectorList</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Identifier</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Value</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Declaration</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Block</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Rule</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;StyleSheet</span></span></span></div></pre><h3 id=\"visit\">visit</h3>\n<p>Type: <code>string</code> or <code>null</code><br>Default: <code>null</code></p>\n<p>Invokes a handler for a specified node type only.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}&nbsp;.b&nbsp;{&nbsp;color:&nbsp;green;&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;visit</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>ClassSelector</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>enter</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;example&nbsp;above&nbsp;is&nbsp;equal&nbsp;to</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>enter</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>ClassSelector</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>The traveral for some node types can performs faster (10-15 times depending on the CSS structure), because some subtrees may to be skipped since they can&#39;t contain a node of specified type (e.g. <code>Rule</code> can&#39;t be used inside of <code>Declaration</code>, so declaration&#39;s subtree can be exclude from traversal path). Fast traversal is supported for node types:</p>\n<ul>\n<li><code>Atrule</code></li>\n<li><code>Rule</code></li>\n<li><code>Declaration</code></li>\n</ul>\n<blockquote>\n<p>NOTE: When fast traversal is applied, some nodes may not be reached in case of an incorrect location in the tree. That&#39;s may happen if AST was built outside the CSSTree parser or transformed in a wrong way. If you need to be 100% sure that every node of type will be visited (even in wrong position), don&#39;t use <code>visit</code> option and test node type by your own.</p>\n</blockquote>\n<h3 id=\"reverse\">reverse</h3>\n<p>Type: <code>boolean</code><br>Default: <code>false</code></p>\n<p>Inverts a natural order of traversal of nodes. To achieve this, the following actions are performed:</p>\n<ul>\n<li>children nodes are iterated in reverse order (from last to first)</li>\n<li>properties are iterated in reverse order (according to <code>structure</code> definition of node)</li>\n<li><code>enter</code> and <code>leave</code> handlers are swapped</li>\n</ul>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;assert&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>assert</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.a&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;natural&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>enter</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>natural</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>enter&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>leave</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>natural</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>leave&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;reverse&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;reverse</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>enter</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>reverse</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>enter&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>leave</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>reverse</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>leave&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;will&nbsp;be&nbsp;truthy</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>assert</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>deepEqual</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;reverse</span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>natural</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>reverse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre>"
      ],
      "contentsRaw": "# AST traversal\n\nAST traversal API is provided by `walk()` method.\n\n```js\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.a { color: red; }');\n\ncsstree.walk(ast, function(node) {\n    console.log(node.type);\n});\n// StyleSheet\n// Rule\n// SelectorList\n// Selector\n// ClassSelector\n// Block\n// Declaration\n// Value\n// Identifier\n```\n\nThe facts you should know about `walk()` internals:\n\n- Method uses `structure` field value of every node type to define the way how to iterate the nodes:\n    - A function-iterator is generating for every node type.\n    - Node's properties iterates in the order it defined in `structure` ([reverse](#reverse) option can invert an order).\n    - Properties that are not defined in `structure` are ignoring (doesn't interate).\n    - An exception is possible when a tree is not following to expected structure (it may happen if AST was built outside the CSSTree parser or transformed in a wrong way). In case you are not sure about correctness of a tree structure, you can use `try/catch` or check the tree with `csstree.lexer.validateStructure(ast)` before iterate it.\n- Only `children` fields can contain a list of nodes. A list of nodes should be represented as a `List` instances. But for certain cases, `children` can be an array. Since `List` provides a similar to `Array` API, traversal can work in most cases, but without any guarantee. Therefore usings arrays in AST is not recomended, use them on your own risk.\n\n## walk(ast, options)\n\nMethod visits each node of passed tree in a natural way and calls a handler for each one. It takes two arguments: a root node (`ast`) and an object (`options`). In simple case, it can take a function (handler) instead of `options` (`walk(ast, fn)` is equivalent to `walk(ast, { enter: fn })`).\n\nOptions:\n\n<!-- MarkdownTOC -->\n\n- [enter](#enter)\n- [leave](#leave)\n- [visit](#visit)\n- [reverse](#reverse)\n\n<!-- /MarkdownTOC -->\n\n### enter\n\nType: `function` or `undefined`  \nDefault: `undefined`\n\nHandler on node entrance, i.e. before any nested node is processed.\n\n```js\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.a { color: red; }');\n\ncsstree.walk(ast, {\n    enter: function(node) {\n        console.log(node.type);\n    }\n});\n// StyleSheet\n// Rule\n// SelectorList\n// Selector\n// ClassSelector\n// Block\n// Declaration\n// Value\n// Identifier\n```\n\nIn case `options` has a single `enter` field, it can replaced for the handler passed as a value for `enter`, i.e. `walk(ast, { enter: fn })` → `walk(ast, fn)`.\n\nHandler receives a three arguments:\n- `node` – the AST node a walker entering to\n- `item` – node wrapper, that contains references to `prev` and `next` nodes in a list, and `data` reference for the node\n- `list` – is a reference for the list; it's useful for list operations like `remove()` or `insert()`\n\n> NOTE: If `children` is an array, the last two arguments are `index` and `array`, like for `Array#forEach()` or `Array#map()` methods.\n\n```js\nconst csstree = require('css-tree');\nconst ast = csstree.parse(`\n    .a { foo: 1; bar: 2; }\n    .b { bar: 3; baz: 4; }\n`);\n\n// remove declarations with `bar` property from the tree\ncsstree.walk(ast, function(node, item, list) {\n    if (node.type === 'Declaration' && node.property === 'bar' && list) {\n        // remove a declaration from a list it\n        list.remove(item);\n    }\n});\n\nconsole.log(csstree.generate(ast));\n// .a{foo:1}.b{baz:4}\n```\n\n> NOTE:\n> - `item` and `list` are not defined for nodes that are not in a list. Even `Declaration` can be outside of any list in case it is a root of tree or a part of `@supports` prelude, e.g. `@supports (bar: 123) { ... }`. Therefore, it's recomended to check `item` or `list` are defined before using of it (those values both are defined or both are undefined, so it's enough to test one of them)\n> - Only `List` instances are safe for tree transformations such as node removal. In case you perform such operations, you can ensure that all `children` in a tree is a `List` instances by calling `csstree.fromPlainObject(ast)` before traversal.\n> - It's better to use `visit` option when possible to reach better performance\n\nContext (`this`) for a handler is an object with a references to the closest ancestor nodes:\n\n- `root` – refers to AST root node (actually it's a node passed to `walk()` method)\n- `stylesheet` – refers to `StyleSheet` node, usually it's a root node\n- `atrule` – refers to closest `Atrule` node if any\n- `atrulePrelude` – refers to `AtrulePrelude` node if any\n- `rule` – refers to closest `Rule` node if any\n- `selector` – refers to `SelectorList` node if any\n- `block` - refers to closest `Block` node if any\n- `declaration` – refers to `Declaration` node if any\n- `function` – refers to closest `Function`, `PseudoClassSelector` or `PseudoElementSelector` node if current node inside one of them\n\n```js\nconst csstree = require('css-tree');\nconst ast = csstree.parse(`\n    @import url(import.css);\n    .foo { background: url('foo.jpg'); }\n    .bar { background-image: url(bar.png); }\n`);\n\n// collect all urls in declarations\nconst urls = [];\ncsstree.walk(ast, function(node) {\n    if (this.declaration !== null && node.type === 'Url') {\n        const value = node.value;\n\n        if (value.type === 'Raw') {\n            urls.push(value.value);\n        } else {\n            urls.push(value.value.substr(1, value.value.length - 2));\n        }\n    }\n});\n\nconsole.log(urls);\n// [ 'foo.jpg', 'bar.png' ]\n```\n\n### leave\n\nType: `function` or `undefined`  \nDefault: `undefined`\n\nThe same as `enter` handler but invokes on node exit, i.e. after all nested nodes are processed.\n\n```js\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.a { color: red; }');\n\ncsstree.walk(ast, {\n    leave: function(node) {\n        console.log(node.type);\n    }\n});\n// ClassSelector\n// Selector\n// SelectorList\n// Identifier\n// Value\n// Declaration\n// Block\n// Rule\n// StyleSheet\n```\n\n### visit\n\nType: `string` or `null`  \nDefault: `null`\n\nInvokes a handler for a specified node type only.\n\n```js\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.a { color: red; } .b { color: green; }');\n\ncsstree.walk(ast, {\n    visit: 'ClassSelector',\n    enter: function(node) {\n        console.log(node.name);\n    }\n});\n\n// example above is equal to\ncsstree.walk(ast, {\n    enter: function(node) {\n        if (node.type === 'ClassSelector') {\n            console.log(node.name);\n        }\n    }\n});\n```\n\nThe traveral for some node types can performs faster (10-15 times depending on the CSS structure), because some subtrees may to be skipped since they can't contain a node of specified type (e.g. `Rule` can't be used inside of `Declaration`, so declaration's subtree can be exclude from traversal path). Fast traversal is supported for node types:\n\n- `Atrule`\n- `Rule`\n- `Declaration`\n\n> NOTE: When fast traversal is applied, some nodes may not be reached in case of an incorrect location in the tree. That's may happen if AST was built outside the CSSTree parser or transformed in a wrong way. If you need to be 100% sure that every node of type will be visited (even in wrong position), don't use `visit` option and test node type by your own.\n\n### reverse\n\nType: `boolean`  \nDefault: `false`\n\nInverts a natural order of traversal of nodes. To achieve this, the following actions are performed:\n- children nodes are iterated in reverse order (from last to first)\n- properties are iterated in reverse order (according to `structure` definition of node)\n- `enter` and `leave` handlers are swapped\n\n```js\nvar assert = require('assert');\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.a { color: red; }');\n\nvar natural = [];\ncsstree.walk(ast, {\n    enter: function(node) {\n        natural.push('enter ' + node.type);\n    },\n    leave: function(node) {\n        natural.push('leave ' + node.type);\n    }\n});\n\nvar reverse = [];\ncsstree.walk(ast, {\n    reverse: true,\n    enter: function(node) {\n        reverse.push('enter ' + node.type);\n    },\n    leave: function(node) {\n        reverse.push('leave ' + node.type);\n    }\n});\n\n// will be truthy\nassert.deepEqual(\n    reverse,\n    natural.reverse()\n);\n```",
      "metadata": {}
    },
    "utils": {
      "reference": "utils",
      "route": "utils",
      "sourcePath": "react-json-blinkforms\\node_modules\\csso\\node_modules\\css-tree\\docs\\utils.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"utils-to-work-with-ast\">Utils to work with AST</h1>\n<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#propertyname\">property(name)</a></li>\n<li><a href=\"#keywordname\">keyword(name)</a></li>\n<li><a href=\"#cloneast\">clone(ast)</a></li>\n<li><a href=\"#fromplainobjectobject\">fromPlainObject(object)</a></li>\n<li><a href=\"#toplainobjectast\">toPlainObject(ast)</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"property-name-\">property(name)</h2>\n<p>Returns details for a property name, such as vendor prefix, used hack etc. Using for safe test of declaration property names, i.e. <code>Declaration.property</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>*-vendor-property</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basename:&nbsp;&#39;property&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;-vendor-property&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hack:&nbsp;&#39;*&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vendor:&nbsp;&#39;-vendor-&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix:&nbsp;&#39;*-vendor-&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom:&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--test-var</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basename:&nbsp;&#39;--test-var&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;--test-var&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hack:&nbsp;&#39;&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vendor:&nbsp;&#39;&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix:&nbsp;&#39;&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom:&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;};</span></span></span></div></pre><p><code>property()</code> function normalizes a name to lower case, except custom property names since they are case sensitive. It returns the same immutable (freezed) object for the same input (input after normalization).</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>NAME</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>NAME</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--custom</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>--Custom</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;info&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>property</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>NAME</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>info</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>info</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>foo</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;have&nbsp;no&nbsp;effect</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>info</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre><p>Supported hacks:</p>\n<ul>\n<li><code>_</code> in the beginning</li>\n<li><code>+</code> in the beginning</li>\n<li><code>#</code> in the beginning</li>\n<li><code>*</code> in the beginning</li>\n<li><code>$</code> in the beginning</li>\n<li><code>/</code> in the beginning</li>\n<li><code>//</code> in the beginning</li>\n</ul>\n<h2 id=\"keyword-name-\">keyword(name)</h2>\n<p>Mostly the same as <code>property()</code> function, but without hack detection. Using for any identifier except declaration property name.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>keyword</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-vendor-keyword</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basename:&nbsp;&#39;keyword&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;-vendor-keyword&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vendor:&nbsp;&#39;-vendor-&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix:&nbsp;&#39;-vendor-&#39;,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom:&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;};</span></span></span></div></pre><h2 id=\"clone-ast-\">clone(ast)</h2>\n<p>Make AST deep copy.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;orig&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>parse</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.test&nbsp;{&nbsp;color:&nbsp;red&nbsp;}</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;copy&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>clone</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>orig</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>copy</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>node</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>replaced</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>orig</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;.test{color:red}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>generate</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>copy</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;.replaced{color:red}</span></span></span></div></pre><h2 id=\"fromplainobject-object-\">fromPlainObject(object)</h2>\n<p><code>fromPlainObject()</code> walks through AST and coverts each <code>children</code> value into a <code>List</code> instance when value is an array.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>SelectorList</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>Array</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>isArray</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span>&nbsp;</span><span class=\"keyword operator instanceof js\"><span>instanceof</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>List</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>fromPlainObject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>Array</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>isArray</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span>&nbsp;</span><span class=\"keyword operator instanceof js\"><span>instanceof</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>List</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre><p>Function mutates the passed AST. Use <code>clone()</code> function before passing AST to <code>fromPlainObject()</code> in case you want to avoid original tree mutation.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>astClone&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>fromPlainObject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>clone</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"toplainobject-ast-\">toPlainObject(ast)</h2>\n<p><code>fromPlainObject()</code> walks through AST and coverts each <code>children</code> value to regular array when value is a <code>List</code> instance.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;csstree&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>css-tree</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;type</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>SelectorList</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>List</span></span></span><span class=\"meta brace round js\"><span>(</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>Array</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>isArray</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span>&nbsp;</span><span class=\"keyword operator instanceof js\"><span>instanceof</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>List</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>toPlainObject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>Array</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>isArray</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>ast</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>children</span></span><span>&nbsp;</span><span class=\"keyword operator instanceof js\"><span>instanceof</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>List</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;false</span></span></span></div></pre><p>Function mutates the passed AST. Use <code>clone()</code> function before passing AST to <code>toPlainObject()</code> in case you want to avoid original tree mutation.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>ast&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>toPlainObject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>csstree</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>clone</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>ast</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre>"
      ],
      "contentsRaw": "# Utils to work with AST\n\n<!-- MarkdownTOC -->\n\n- [property\\(name\\)](#propertyname)\n- [keyword\\(name\\)](#keywordname)\n- [clone\\(ast\\)](#cloneast)\n- [fromPlainObject\\(object\\)](#fromplainobjectobject)\n- [toPlainObject\\(ast\\)](#toplainobjectast)\n\n<!-- /MarkdownTOC -->\n\n## property(name)\n\nReturns details for a property name, such as vendor prefix, used hack etc. Using for safe test of declaration property names, i.e. `Declaration.property`.\n\n```js\nvar csstree = require('css-tree');\n\ncsstree.property('*-vendor-property');\n// {\n//     basename: 'property',\n//     name: '-vendor-property',\n//     hack: '*',\n//     vendor: '-vendor-',\n//     prefix: '*-vendor-',\n//     custom: false\n// }\n\ncsstree.property('--test-var');\n// {\n//     basename: '--test-var',\n//     name: '--test-var',\n//     hack: '',\n//     vendor: '',\n//     prefix: '',\n//     custom: true\n// };\n```\n\n`property()` function normalizes a name to lower case, except custom property names since they are case sensitive. It returns the same immutable (freezed) object for the same input (input after normalization).\n\n```js\ncsstree.property('name') === csstree.property('NAME')         // true\ncsstree.property('NAME').name === 'name'                      // true\ncsstree.property('--custom') === csstree.property('--Custom') // false\n\nvar info = csstree.property('NAME');\ninfo.name === 'name'; // \ninfo.name = 'foo';    // have no effect\ninfo.name === 'name'; // true\n```\n\nSupported hacks:\n\n- `_` in the beginning\n- `+` in the beginning\n- `#` in the beginning\n- `*` in the beginning\n- `$` in the beginning\n- `/` in the beginning\n- `//` in the beginning\n\n## keyword(name)\n\nMostly the same as `property()` function, but without hack detection. Using for any identifier except declaration property name.\n\n```js\nvar csstree = require('css-tree');\n\ncsstree.keyword('-vendor-keyword');\n// {\n//     basename: 'keyword',\n//     name: '-vendor-keyword',\n//     vendor: '-vendor-',\n//     prefix: '-vendor-',\n//     custom: false\n// };\n```\n\n## clone(ast)\n\nMake AST deep copy.\n\n```js\nvar orig = csstree.parse('.test { color: red }');\nvar copy = csstree.clone(orig);\n\ncsstree.walk(copy, function(node) {\n    if (node.type === 'Class') {\n        node.name = 'replaced';\n    }\n});\n\nconsole.log(csstree.generate(orig));\n// .test{color:red}\nconsole.log(csstree.generate(copy));\n// .replaced{color:red}\n```\n\n## fromPlainObject(object)\n\n`fromPlainObject()` walks through AST and coverts each `children` value into a `List` instance when value is an array.\n\n```js\nvar csstree = require('css-tree');\nvar ast = {\n    type: 'SelectorList',\n    children: []\n};\n\nconsole.log(Array.isArray(ast.children));          // true\nconsole.log(ast.children instanceof csstree.List); // false\n\nast = csstree.fromPlainObject(ast);\n\nconsole.log(Array.isArray(ast.children));          // false\nconsole.log(ast.children instanceof csstree.List); // true\n```\n\nFunction mutates the passed AST. Use `clone()` function before passing AST to `fromPlainObject()` in case you want to avoid original tree mutation.\n\n```js\nastClone = csstree.fromPlainObject(csstree.clone(ast));\n```\n\n## toPlainObject(ast)\n\n`fromPlainObject()` walks through AST and coverts each `children` value to regular array when value is a `List` instance.\n\n```js\nvar csstree = require('css-tree');\nvar ast = {\n    type: 'SelectorList',\n    children: new List()\n};\n\nconsole.log(Array.isArray(ast.children));          // false\nconsole.log(ast.children instanceof csstree.List); // true\n\nast = csstree.toPlainObject(ast);\n\nconsole.log(Array.isArray(ast.children));          // true\nconsole.log(ast.children instanceof csstree.List); // false\n```\n\nFunction mutates the passed AST. Use `clone()` function before passing AST to `toPlainObject()` in case you want to avoid original tree mutation.\n\n```js\nast = csstree.toPlainObject(csstree.clone(ast));\n```",
      "metadata": {}
    },
    "CONTRIBUTORS": {
      "reference": "CONTRIBUTORS",
      "route": "CONTRIBUTORS",
      "sourcePath": "react-json-blinkforms\\node_modules\\es5-shim\\CONTRIBUTORS.md",
      "title": "(untitled)",
      "contents": [
        "<ul>\n<li>kriskowal Kris Kowal Copyright (C) 2009-2011 MIT License</li>\n<li>tlrobinson Tom Robinson Copyright (C) 2009-2010 MIT License (Narwhal\nProject)</li>\n<li>dantman Daniel Friesen Copyright (C) 2010 XXX TODO License or CLA</li>\n<li>fschaefer Florian Schäfer Copyright (C) 2010 MIT License</li>\n<li>Gozala Irakli Gozalishvili Copyright (C) 2010 MIT License</li>\n<li>kitcambridge Kit Cambridge Copyright (C) 2011 MIT License</li>\n<li>kossnocorp Sasha Koss XXX TODO License or CLA</li>\n<li>bryanforbes Bryan Forbes XXX TODO License or CLA</li>\n<li>killdream Quildreen Motta Copyright (C) 2011 MIT Licence</li>\n<li>michaelficarra Michael Ficarra Copyright (C) 2011 3-clause BSD\nLicense</li>\n<li>sharkbrainguy Gerard Paapu Copyright (C) 2011 MIT License</li>\n<li>bbqsrc Brendan Molloy (C) 2011 Creative Commons Zero (public domain)</li>\n<li>iwyg XXX TODO License or CLA</li>\n<li>DomenicDenicola Domenic Denicola Copyright (C) 2011 MIT License</li>\n<li>xavierm02 Montillet Xavier Copyright (C) 2011 MIT License</li>\n<li>Raynos Jake Verbaten Copyright (C) 2011 MIT Licence</li>\n<li>samsonjs Sami Samhuri Copyright (C) 2010 MIT License</li>\n<li>rwldrn Rick Waldron Copyright (C) 2011 MIT License</li>\n<li>lexer Alexey Zakharov XXX TODO License or CLA</li>\n<li>280 North Inc. (Now Motorola LLC, a subsidiary of Google Inc.)\nCopyright (C) 2009 MIT License</li>\n<li>Steven Levithan Copyright (C) 2012 MIT License</li>\n<li>Jordan Harband (C) 2013 MIT License</li>\n</ul>\n"
      ],
      "contentsRaw": "-   kriskowal Kris Kowal Copyright (C) 2009-2011 MIT License\n-   tlrobinson Tom Robinson Copyright (C) 2009-2010 MIT License (Narwhal\n    Project)\n-   dantman Daniel Friesen Copyright (C) 2010 XXX TODO License or CLA\n-   fschaefer Florian Schäfer Copyright (C) 2010 MIT License\n-   Gozala Irakli Gozalishvili Copyright (C) 2010 MIT License\n-   kitcambridge Kit Cambridge Copyright (C) 2011 MIT License\n-   kossnocorp Sasha Koss XXX TODO License or CLA\n-   bryanforbes Bryan Forbes XXX TODO License or CLA\n-   killdream Quildreen Motta Copyright (C) 2011 MIT Licence\n-   michaelficarra Michael Ficarra Copyright (C) 2011 3-clause BSD\n    License\n-   sharkbrainguy Gerard Paapu Copyright (C) 2011 MIT License\n-   bbqsrc Brendan Molloy (C) 2011 Creative Commons Zero (public domain)\n-   iwyg XXX TODO License or CLA\n-   DomenicDenicola Domenic Denicola Copyright (C) 2011 MIT License\n-   xavierm02 Montillet Xavier Copyright (C) 2011 MIT License\n-   Raynos Jake Verbaten Copyright (C) 2011 MIT Licence\n-   samsonjs Sami Samhuri Copyright (C) 2010 MIT License\n-   rwldrn Rick Waldron Copyright (C) 2011 MIT License\n-   lexer Alexey Zakharov XXX TODO License or CLA\n-   280 North Inc. (Now Motorola LLC, a subsidiary of Google Inc.)\n    Copyright (C) 2009 MIT License\n-   Steven Levithan Copyright (C) 2012 MIT License\n-   Jordan Harband (C) 2013 MIT License",
      "metadata": {}
    },
    "GOVERNANCE": {
      "reference": "GOVERNANCE",
      "route": "GOVERNANCE",
      "sourcePath": "react-json-blinkforms\\node_modules\\readable-stream\\GOVERNANCE.md",
      "title": "(untitled)",
      "contents": [
        "<h3 id=\"streams-working-group\">Streams Working Group</h3>\n<p>The Node.js Streams is jointly governed by a Working Group\n(WG)\nthat is responsible for high-level guidance of the project.</p>\n<p>The WG has final authority over this project including:</p>\n<ul>\n<li>Technical direction</li>\n<li>Project governance and process (including this policy)</li>\n<li>Contribution policy</li>\n<li>GitHub repository hosting</li>\n<li>Conduct guidelines</li>\n<li>Maintaining the list of additional Collaborators</li>\n</ul>\n<p>For the current list of WG members, see the project\n<a href=\"./README.md#current-project-team-members\">README.md</a>.</p>\n<h3 id=\"collaborators\">Collaborators</h3>\n<p>The readable-stream GitHub repository is\nmaintained by the WG and additional Collaborators who are added by the\nWG on an ongoing basis.</p>\n<p>Individuals making significant and valuable contributions are made\nCollaborators and given commit-access to the project. These\nindividuals are identified by the WG and their addition as\nCollaborators is discussed during the WG meeting.</p>\n<p><em>Note:</em> If you make a significant contribution and are not considered\nfor commit-access log an issue or contact a WG member directly and it\nwill be brought up in the next WG meeting.</p>\n<p>Modifications of the contents of the readable-stream repository are\nmade on\na collaborative basis. Anybody with a GitHub account may propose a\nmodification via pull request and it will be considered by the project\nCollaborators. All pull requests must be reviewed and accepted by a\nCollaborator with sufficient expertise who is able to take full\nresponsibility for the change. In the case of pull requests proposed\nby an existing Collaborator, an additional Collaborator is required\nfor sign-off. Consensus should be sought if additional Collaborators\nparticipate and there is disagreement around a particular\nmodification. See <em>Consensus Seeking Process</em> below for further detail\non the consensus model used for governance.</p>\n<p>Collaborators may opt to elevate significant or controversial\nmodifications, or modifications that have not found consensus to the\nWG for discussion by assigning the <strong><em>WG-agenda</em></strong> tag to a pull\nrequest or issue. The WG should serve as the final arbiter where\nrequired.</p>\n<p>For the current list of Collaborators, see the project\n<a href=\"./README.md#members\">README.md</a>.</p>\n<h3 id=\"wg-membership\">WG Membership</h3>\n<p>WG seats are not time-limited.  There is no fixed size of the WG.\nHowever, the expected target is between 6 and 12, to ensure adequate\ncoverage of important areas of expertise, balanced with the ability to\nmake decisions efficiently.</p>\n<p>There is no specific set of requirements or qualifications for WG\nmembership beyond these rules.</p>\n<p>The WG may add additional members to the WG by unanimous consensus.</p>\n<p>A WG member may be removed from the WG by voluntary resignation, or by\nunanimous consensus of all other WG members.</p>\n<p>Changes to WG membership should be posted in the agenda, and may be\nsuggested as any other agenda item (see &quot;WG Meetings&quot; below).</p>\n<p>If an addition or removal is proposed during a meeting, and the full\nWG is not in attendance to participate, then the addition or removal\nis added to the agenda for the subsequent meeting.  This is to ensure\nthat all members are given the opportunity to participate in all\nmembership decisions.  If a WG member is unable to attend a meeting\nwhere a planned membership decision is being made, then their consent\nis assumed.</p>\n<p>No more than 1/3 of the WG members may be affiliated with the same\nemployer.  If removal or resignation of a WG member, or a change of\nemployment by a WG member, creates a situation where more than 1/3 of\nthe WG membership shares an employer, then the situation must be\nimmediately remedied by the resignation or removal of one or more WG\nmembers affiliated with the over-represented employer(s).</p>\n<h3 id=\"wg-meetings\">WG Meetings</h3>\n<p>The WG meets occasionally on a Google Hangout On Air. A designated moderator\napproved by the WG runs the meeting. Each meeting should be\npublished to YouTube.</p>\n<p>Items are added to the WG agenda that are considered contentious or\nare modifications of governance, contribution policy, WG membership,\nor release process.</p>\n<p>The intention of the agenda is not to approve or review all patches;\nthat should happen continuously on GitHub and be handled by the larger\ngroup of Collaborators.</p>\n<p>Any community member or contributor can ask that something be added to\nthe next meeting&#39;s agenda by logging a GitHub Issue. Any Collaborator,\nWG member or the moderator can add the item to the agenda by adding\nthe <strong><em>WG-agenda</em></strong> tag to the issue.</p>\n<p>Prior to each WG meeting the moderator will share the Agenda with\nmembers of the WG. WG members can add any items they like to the\nagenda at the beginning of each meeting. The moderator and the WG\ncannot veto or remove items.</p>\n<p>The WG may invite persons or representatives from certain projects to\nparticipate in a non-voting capacity.</p>\n<p>The moderator is responsible for summarizing the discussion of each\nagenda item and sends it as a pull request after the meeting.</p>\n<h3 id=\"consensus-seeking-process\">Consensus Seeking Process</h3>\n<p>The WG follows a\n<a href=\"http://en.wikipedia.org/wiki/Consensus-seeking_decision-making\">Consensus\nSeeking</a>\ndecision-making model.</p>\n<p>When an agenda item has appeared to reach a consensus the moderator\nwill ask &quot;Does anyone object?&quot; as a final call for dissent from the\nconsensus.</p>\n<p>If an agenda item cannot reach a consensus a WG member can call for\neither a closing vote or a vote to table the issue to the next\nmeeting. The call for a vote must be seconded by a majority of the WG\nor else the discussion will continue. Simple majority wins.</p>\n<p>Note that changes to WG membership require a majority consensus.  See\n&quot;WG Membership&quot; above.</p>\n"
      ],
      "contentsRaw": "### Streams Working Group\n\nThe Node.js Streams is jointly governed by a Working Group\n(WG)\nthat is responsible for high-level guidance of the project.\n\nThe WG has final authority over this project including:\n\n* Technical direction\n* Project governance and process (including this policy)\n* Contribution policy\n* GitHub repository hosting\n* Conduct guidelines\n* Maintaining the list of additional Collaborators\n\nFor the current list of WG members, see the project\n[README.md](./README.md#current-project-team-members).\n\n### Collaborators\n\nThe readable-stream GitHub repository is\nmaintained by the WG and additional Collaborators who are added by the\nWG on an ongoing basis.\n\nIndividuals making significant and valuable contributions are made\nCollaborators and given commit-access to the project. These\nindividuals are identified by the WG and their addition as\nCollaborators is discussed during the WG meeting.\n\n_Note:_ If you make a significant contribution and are not considered\nfor commit-access log an issue or contact a WG member directly and it\nwill be brought up in the next WG meeting.\n\nModifications of the contents of the readable-stream repository are\nmade on\na collaborative basis. Anybody with a GitHub account may propose a\nmodification via pull request and it will be considered by the project\nCollaborators. All pull requests must be reviewed and accepted by a\nCollaborator with sufficient expertise who is able to take full\nresponsibility for the change. In the case of pull requests proposed\nby an existing Collaborator, an additional Collaborator is required\nfor sign-off. Consensus should be sought if additional Collaborators\nparticipate and there is disagreement around a particular\nmodification. See _Consensus Seeking Process_ below for further detail\non the consensus model used for governance.\n\nCollaborators may opt to elevate significant or controversial\nmodifications, or modifications that have not found consensus to the\nWG for discussion by assigning the ***WG-agenda*** tag to a pull\nrequest or issue. The WG should serve as the final arbiter where\nrequired.\n\nFor the current list of Collaborators, see the project\n[README.md](./README.md#members).\n\n### WG Membership\n\nWG seats are not time-limited.  There is no fixed size of the WG.\nHowever, the expected target is between 6 and 12, to ensure adequate\ncoverage of important areas of expertise, balanced with the ability to\nmake decisions efficiently.\n\nThere is no specific set of requirements or qualifications for WG\nmembership beyond these rules.\n\nThe WG may add additional members to the WG by unanimous consensus.\n\nA WG member may be removed from the WG by voluntary resignation, or by\nunanimous consensus of all other WG members.\n\nChanges to WG membership should be posted in the agenda, and may be\nsuggested as any other agenda item (see \"WG Meetings\" below).\n\nIf an addition or removal is proposed during a meeting, and the full\nWG is not in attendance to participate, then the addition or removal\nis added to the agenda for the subsequent meeting.  This is to ensure\nthat all members are given the opportunity to participate in all\nmembership decisions.  If a WG member is unable to attend a meeting\nwhere a planned membership decision is being made, then their consent\nis assumed.\n\nNo more than 1/3 of the WG members may be affiliated with the same\nemployer.  If removal or resignation of a WG member, or a change of\nemployment by a WG member, creates a situation where more than 1/3 of\nthe WG membership shares an employer, then the situation must be\nimmediately remedied by the resignation or removal of one or more WG\nmembers affiliated with the over-represented employer(s).\n\n### WG Meetings\n\nThe WG meets occasionally on a Google Hangout On Air. A designated moderator\napproved by the WG runs the meeting. Each meeting should be\npublished to YouTube.\n\nItems are added to the WG agenda that are considered contentious or\nare modifications of governance, contribution policy, WG membership,\nor release process.\n\nThe intention of the agenda is not to approve or review all patches;\nthat should happen continuously on GitHub and be handled by the larger\ngroup of Collaborators.\n\nAny community member or contributor can ask that something be added to\nthe next meeting's agenda by logging a GitHub Issue. Any Collaborator,\nWG member or the moderator can add the item to the agenda by adding\nthe ***WG-agenda*** tag to the issue.\n\nPrior to each WG meeting the moderator will share the Agenda with\nmembers of the WG. WG members can add any items they like to the\nagenda at the beginning of each meeting. The moderator and the WG\ncannot veto or remove items.\n\nThe WG may invite persons or representatives from certain projects to\nparticipate in a non-voting capacity.\n\nThe moderator is responsible for summarizing the discussion of each\nagenda item and sends it as a pull request after the meeting.\n\n### Consensus Seeking Process\n\nThe WG follows a\n[Consensus\nSeeking](http://en.wikipedia.org/wiki/Consensus-seeking_decision-making)\ndecision-making model.\n\nWhen an agenda item has appeared to reach a consensus the moderator\nwill ask \"Does anyone object?\" as a final call for dissent from the\nconsensus.\n\nIf an agenda item cannot reach a consensus a WG member can call for\neither a closing vote or a vote to table the issue to the next\nmeeting. The call for a vote must be seconded by a majority of the WG\nor else the discussion will continue. Simple majority wins.\n\nNote that changes to WG membership require a majority consensus.  See\n\"WG Membership\" above.",
      "metadata": {}
    },
    "Changelog": {
      "reference": "Changelog",
      "route": "Changelog",
      "sourcePath": "react-json-blinkforms\\node_modules\\sockjs-client\\Changelog.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"1-2-1\">1.2.1</h1>\n<ul>\n<li>Revert <code>debug</code> to <code>^3</code> because v4 starts using ES6. Fixes #457</li>\n</ul>\n<h1 id=\"1-2-0\">1.2.0</h1>\n<ul>\n<li>Update all outdated dependencies</li>\n<li>Switch to karma and browserstack for running automated browser tests</li>\n</ul>\n<h1 id=\"1-1-5\">1.1.5</h1>\n<ul>\n<li>Wrap the the contentWindow access in a try/catch block when in setTimeout #363</li>\n<li>Revised example in README #356</li>\n<li>Fix connection close when Transport timeout #358</li>\n<li>Fixed crash with <a href=\"mailto:react-native@0.45.1\">react-native@0.45.1</a> on Android #386</li>\n<li>Update jsDelivr link #404, #405</li>\n<li>Remove Sauce Labs unsupported browsers</li>\n<li>Add link to rust server implementation #411</li>\n<li>location.protocol should include final <code>:</code> #396</li>\n</ul>\n<h1 id=\"1-1-4\">1.1.4</h1>\n<ul>\n<li>Upgrade <code>debug</code> and fix object key literal mangling, fixes regression in Opera 11.10 #359</li>\n<li>Trim descriptions in package.json and bower.json - #372</li>\n</ul>\n<h1 id=\"1-1-3\">1.1.3</h1>\n<ul>\n<li>Bad publish to NPM (removed)</li>\n</ul>\n<h1 id=\"1-1-2\">1.1.2</h1>\n<ul>\n<li>Ensure both sender and receiver are cleaned upon close - #342</li>\n<li>Remove event listeners before calling <code>close</code> - #344</li>\n<li>Update documentation links - #351, #339, #316</li>\n<li>Explicitly export <code>undefined</code> when <code>WebSocket</code> does not exist. Fixes Webpack. #321</li>\n<li>Include <code>dist</code> folder on npm - #265</li>\n<li>Simplify build setup</li>\n<li>Update to Node.js 6.9</li>\n<li>Add sourcemap for minified version</li>\n<li>Remove unused String.trim shim</li>\n</ul>\n<h1 id=\"1-1-1\">1.1.1</h1>\n<ul>\n<li>Do not pass <code>protocols</code> or <code>options</code> arguments to browser WebSocket constructor - #309</li>\n</ul>\n<h1 id=\"1-1-0\">1.1.0</h1>\n<ul>\n<li>Fix IE7/8 usage of <code>console.log</code> which does not have <code>apply</code> - #279</li>\n<li>Remove <code>dbg</code> global variable - #282</li>\n<li>Bump <code>faye-websocket</code> version to <code>0.11.0</code> - #267</li>\n<li>Optimize <code>arguments</code> usage - #263</li>\n<li>Add sourcemap file to dist folder - #237</li>\n<li>Add way to transparently pass transport-specific options - #272</li>\n</ul>\n<h1 id=\"1-0-3\">1.0.3</h1>\n<ul>\n<li>Use <code>https</code> module for xhr requests in node when url uses https - #254</li>\n</ul>\n<h1 id=\"1-0-2\">1.0.2</h1>\n<ul>\n<li>Fix iframe info receiver url</li>\n<li>Move iframe.contentWindow check inside setTimeout - #246</li>\n</ul>\n<h1 id=\"1-0-1\">1.0.1</h1>\n<ul>\n<li>Use proper base url for iframe-based info receiver - #249</li>\n<li>Don&#39;t register unload event in chrome packaged app - #223</li>\n<li>Allow custom session ids - #250</li>\n<li>Remove version property from bower.json - #247</li>\n<li>Update example CDN url - #244</li>\n</ul>\n<h1 id=\"1-0-0\">1.0.0</h1>\n<ul>\n<li>Simplify url handling by delegating to <code>url-parse</code> - #242</li>\n<li>Upgrade to <code>url-parse</code> 1.0.1 to fix colon issue if auth has no password</li>\n</ul>\n<h1 id=\"1-0-0-beta-13\">1.0.0-beta.13</h1>\n<ul>\n<li>Transport timeout on connection should fallback - #238</li>\n</ul>\n<h1 id=\"1-0-0-beta-12\">1.0.0-beta.12</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 1.0.0 to fix #218 again</li>\n</ul>\n<h1 id=\"1-0-0-beta-10\">1.0.0-beta.10</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.2.3 to fix #222</li>\n</ul>\n<h1 id=\"1-0-0-beta-9\">1.0.0-beta.9</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.2.1 to fix &#39;too much recursion&#39; errors</li>\n</ul>\n<h1 id=\"1-0-0-beta-8\">1.0.0-beta.8</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.2.0 to fix inheritance issues</li>\n</ul>\n<h1 id=\"1-0-0-beta-7\">1.0.0-beta.7</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.1.5 to fix #218</li>\n<li>Don&#39;t strip basic auth from url - #219</li>\n</ul>\n<h1 id=\"1-0-0-beta-6\">1.0.0-beta.6</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.1.3 to avoid CSP issues</li>\n</ul>\n<h1 id=\"1-0-0-beta-5\">1.0.0-beta.5</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.1.1 to fix #214</li>\n</ul>\n<h1 id=\"1-0-0-beta-4\">1.0.0-beta.4</h1>\n<ul>\n<li>Upgrade <code>url-parse</code> to 0.1.0 and <code>sockjs</code> to 0.3.11</li>\n<li>Update .npmignore</li>\n</ul>\n<h1 id=\"1-0-0-beta-3\">1.0.0-beta.3</h1>\n<ul>\n<li>Move <code>debug</code> from devDependencies to dependencies</li>\n</ul>\n<h1 id=\"1-0-0-beta-2\">1.0.0-beta.2</h1>\n<ul>\n<li>Relax requirements when using same origin XHR - #80</li>\n<li>Upgrade to JSON3 from JSON2 - #123</li>\n<li>Package library with browserify supporting the UMD pattern - #184</li>\n<li>Move tests to JavaScript</li>\n<li>Add Gulp.js build script</li>\n<li>Fix getOrigin for file:/// urls and standard ports - #173</li>\n<li>Add onerror event handlers to Websockets - #169</li>\n<li>Increase RTO lower bound to prevent spurious timeouts on IE8/9 - #161</li>\n<li>Use window.crypto for random values when available - #128</li>\n<li>Fix handling of listeners added and removed mid-dispatch - #127</li>\n<li>Fix XHR Streaming for IE8 - #83</li>\n<li>Remove explicit AMD name - #107</li>\n<li>Check for an empty response from /info request - #143</li>\n<li>Add Content-Type to XHR requests to fix issue over HTTPS on Galaxy S4 - #164</li>\n<li>Fix iframe fallback when message is sent from a popup in IE7/8 - #166</li>\n<li>Add support for query strings on the url - #72</li>\n<li>Now works inside of Web Workers - #181</li>\n<li>Support EventSource / Server Sent Events outside of iframes - #201</li>\n<li>Rename protocols to transports - #65</li>\n<li>Allow transports which need the body to trigger on &#39;interactive&#39; readyState - #175</li>\n<li>try/catch access to document.domain - #187</li>\n<li>Use <code>window.location</code> instead of <code>document.location</code> - #195</li>\n<li>Allow usage from node.js with same API</li>\n</ul>\n<h1 id=\"0-3-4\">0.3.4</h1>\n<ul>\n<li>Mentioned njoyce&#39;s fork of sockjs-gevent.</li>\n<li>#90 - Don&#39;t catch onbeforeunload event - it breaks javascript://\nlinks in IE.</li>\n<li>IE mangles 204 response code for 1223 on ajax, see:\n<a href=\"http://bugs.jquery.com/ticket/1450\">http://bugs.jquery.com/ticket/1450</a></li>\n<li>Make <code>new</code> optional for SockJS constructor (via substack).</li>\n<li>It is impossible to cancel JSONP polling request - compensate for that.</li>\n<li>Refactored EventEmitter prototype (used only internally)</li>\n<li>#66 - Failure to post data to /xhr_send should kill the session</li>\n</ul>\n<h1 id=\"0-3-2\">0.3.2</h1>\n<ul>\n<li>#77 - Getting /info on modern browsers when html is served from<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>file</span></span><span>:</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;urls&nbsp;was&nbsp;broken.</span></span></span></div></pre></li>\n</ul>\n<h1 id=\"0-3-1\">0.3.1</h1>\n<ul>\n<li>#61 - Meteor guys found that we unintentionally catch &quot;onopen&quot; errors.</li>\n<li>#63 - Meteorjs guys found that xhr-streaming on Safari sometimes\nleft busy cursor running.</li>\n<li>Increased allowed time for websocket transport (from 1 rtt to 2),\nthis should make ws transport more reliable over SSL, at the cost\nof slightly longer connection time for users with blocked ws.</li>\n<li>#57 - previous fix didn&#39;t really work, sockjs-client still left\na mess in browsers history when using iframe transports. This\nis fixed now.</li>\n<li>#60 - Opera 12 (next) claims to do AJAX2 / CORS, but can&#39;t\ndo xhr-streaming.</li>\n<li>#58 - onunload test sometimes failed on Safari on windows</li>\n<li>Updated readme WRT websocket protocols</li>\n<li>Updated readme WRT deployments on heroku</li>\n<li>Add minimalistic license block to every source file.</li>\n</ul>\n<h1 id=\"0-3-0\">0.3.0</h1>\n<ul>\n<li>Temporarily disabled iframe tests - they are failing unpredictably.</li>\n<li>#57 - pointing an iframe to &quot;about:blank&quot; during cleanup caused\nOpera to messup history.</li>\n<li>#55 - Improved iframe abstraction (reduced a possible mem leak)</li>\n<li>Refactored AJAX abstractions, for better CORS handing - again.</li>\n<li>Add additional parent origin security check to an iframe.</li>\n<li>Urls with hashes or query strings can&#39;t be passed to SockJS.</li>\n<li>#18 - Mention workaround for Firefox ESC key issue</li>\n<li>#53 - AMD compliance</li>\n<li>sockjs/sockjs-protocol#28 - always use square brackets for\nwebsocket frames</li>\n<li>#51 - initial support for IE10 - try XHR before XDR</li>\n<li>#28 - handle onunload / onbeforeunload in a more robust fashion</li>\n<li>#49 - support SockJS-client being used from files served from\nfile:// urls.</li>\n</ul>\n<h1 id=\"0-2-1\">0.2.1</h1>\n<ul>\n<li>&quot;smoke-latency.html&quot; test was unnecesairly sending too much data.</li>\n<li>Bumped core dependencies (coffee-script and uglify-js)</li>\n<li>Minor updates to the README, few cosmetic changes in the code.</li>\n</ul>\n<h1 id=\"0-2-0\">0.2.0</h1>\n<ul>\n<li>The API had changed - use <code>protocols_whitelist</code> option instead of\npassing  an array of protocols as a second argument to SockJS constructor.</li>\n<li>Dropped &#39;chunking-test&#39; functionality and replace it with &#39;info&#39;.</li>\n<li>Rewritten protocol-choosing alogirthm, see &quot;utils.detectProtocols&quot; method.</li>\n<li>Use dynamic protocol timeouts based on RTT, not hardcoded 5 seconds</li>\n<li>#34 - Don&#39;t ever reuse <code>session_id</code>, especially when trying\nfallback protocols.</li>\n<li>The test server got moved from SockJS-client to SockJS-node.</li>\n<li>Don&#39;t test unicode surrogates - it can&#39;t work in some environments.</li>\n<li>XHR/XDR helpers were rewritten, ajax transports were simplified.</li>\n<li>Added a domain check in the iframe to improve security.</li>\n<li>SockJS will now trigger 1002 error if there is a problem during handshake\ninstead of 2000 error.</li>\n<li>Smoke-throughput test is renamed to smoke-latency.</li>\n</ul>\n<h1 id=\"0-1-2\">0.1.2</h1>\n<ul>\n<li>#29 - Allow all unicode characters to be send over SockJS.</li>\n<li>#15 - SockJS should now work fine even if the connection is started\nin HEAD, before BODY is loaded.</li>\n<li>#28 - In rare circumstances WebSocket connection can be left intact\nafter the page is unloaded in FireFox.</li>\n<li>Updated scripts to work with Node 0.6.</li>\n<li>Initial work to do better QUnit testing.</li>\n<li>Updated the minifying script (always escape unicode chars, remove\ntrailing comment).</li>\n<li>Use string instead of array of chars (utils.js:random_number_string).</li>\n</ul>\n<h1 id=\"0-1-1\">0.1.1</h1>\n<ul>\n<li>#21 Get JsonP transport working on IE9 (Vladimir Dronnikov).</li>\n<li>#26 Emit heartbeat event.</li>\n<li>#27 Include license inline.</li>\n</ul>\n<h1 id=\"0-1-0\">0.1.0</h1>\n<ul>\n<li>SockJS-client can only send UTF-8 encodable strings.  Previously we\ntook advantage of rich data structures and automatically\njson-encoded them, but this got removed.  Now, all data passed to\n<code>send</code> will be converted to string. This is also how native</li>\n<li><code>status</code> property on <code>EventClose</code> is renamed to <code>code</code>\nas per Websocket API\nWebSockets behave.</li>\n<li>The test server was updated to new <code>sockjs-node</code> API</li>\n<li>Fixed problem with Jsonp-polling transport on IE9</li>\n<li>Repository was moved - updated links.</li>\n</ul>\n<h1 id=\"0-0-4\">0.0.4</h1>\n<ul>\n<li>All transports were refactored, some transports were introduced:\nhtmlfile and separate xhr-streaming.</li>\n<li>Added logic to detect support for http chunking, and thus a\npossibility to rule out streaming transports before running them.</li>\n<li>Added &#39;cookie&#39; option, useful for cookie-based load balancing\n(currently, it make a difference only for IE).</li>\n<li>Added hack to prevent EventSource from crashing Safari and Chrome.</li>\n<li>Loads and loads of other small and medium changes.</li>\n</ul>\n<h1 id=\"0-0-2\">0.0.2</h1>\n<ul>\n<li>Initial support for JSESSIONID based load balancing. Currently\ndoesn&#39;t play nicely with IE XDomainRequest transport.</li>\n</ul>\n<h1 id=\"0-0-1\">0.0.1</h1>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
      ],
      "contentsRaw": "1.2.1\n==\n * Revert `debug` to `^3` because v4 starts using ES6. Fixes #457\n\n1.2.0\n==\n * Update all outdated dependencies\n * Switch to karma and browserstack for running automated browser tests\n\n1.1.5\n==\n * Wrap the the contentWindow access in a try/catch block when in setTimeout #363\n * Revised example in README #356\n * Fix connection close when Transport timeout #358\n * Fixed crash with react-native@0.45.1 on Android #386\n * Update jsDelivr link #404, #405\n * Remove Sauce Labs unsupported browsers\n * Add link to rust server implementation #411\n * location.protocol should include final `:` #396\n\n1.1.4\n==\n * Upgrade `debug` and fix object key literal mangling, fixes regression in Opera 11.10 #359\n * Trim descriptions in package.json and bower.json - #372\n\n1.1.3\n==\n  * Bad publish to NPM (removed)\n\n1.1.2\n==\n\n * Ensure both sender and receiver are cleaned upon close - #342\n * Remove event listeners before calling `close` - #344\n * Update documentation links - #351, #339, #316\n * Explicitly export `undefined` when `WebSocket` does not exist. Fixes Webpack. #321\n * Include `dist` folder on npm - #265\n * Simplify build setup\n * Update to Node.js 6.9\n * Add sourcemap for minified version\n * Remove unused String.trim shim\n\n1.1.1\n==\n\n * Do not pass `protocols` or `options` arguments to browser WebSocket constructor - #309\n\n1.1.0\n==\n\n * Fix IE7/8 usage of `console.log` which does not have `apply` - #279\n * Remove `dbg` global variable - #282\n * Bump `faye-websocket` version to `0.11.0` - #267\n * Optimize `arguments` usage - #263\n * Add sourcemap file to dist folder - #237\n * Add way to transparently pass transport-specific options - #272\n\n1.0.3\n==\n\n * Use `https` module for xhr requests in node when url uses https - #254\n\n1.0.2\n==\n\n * Fix iframe info receiver url\n * Move iframe.contentWindow check inside setTimeout - #246\n\n1.0.1\n==\n\n * Use proper base url for iframe-based info receiver - #249\n * Don't register unload event in chrome packaged app - #223\n * Allow custom session ids - #250\n * Remove version property from bower.json - #247\n * Update example CDN url - #244\n\n1.0.0\n===\n\n * Simplify url handling by delegating to `url-parse` - #242\n * Upgrade to `url-parse` 1.0.1 to fix colon issue if auth has no password\n\n1.0.0-beta.13\n===\n\n * Transport timeout on connection should fallback - #238\n\n1.0.0-beta.12\n====\n\n * Upgrade `url-parse` to 1.0.0 to fix #218 again\n\n1.0.0-beta.10\n====\n\n * Upgrade `url-parse` to 0.2.3 to fix #222\n\n1.0.0-beta.9\n====\n\n * Upgrade `url-parse` to 0.2.1 to fix 'too much recursion' errors\n\n1.0.0-beta.8\n====\n\n * Upgrade `url-parse` to 0.2.0 to fix inheritance issues\n\n1.0.0-beta.7\n====\n\n * Upgrade `url-parse` to 0.1.5 to fix #218\n * Don't strip basic auth from url - #219\n\n1.0.0-beta.6\n====\n\n * Upgrade `url-parse` to 0.1.3 to avoid CSP issues\n\n1.0.0-beta.5\n=====\n\n * Upgrade `url-parse` to 0.1.1 to fix #214\n\n1.0.0-beta.4\n=====\n\n * Upgrade `url-parse` to 0.1.0 and `sockjs` to 0.3.11\n * Update .npmignore\n\n1.0.0-beta.3\n=====\n\n * Move `debug` from devDependencies to dependencies\n\n1.0.0-beta.2\n=====\n\n * Relax requirements when using same origin XHR - #80\n * Upgrade to JSON3 from JSON2 - #123\n * Package library with browserify supporting the UMD pattern - #184\n * Move tests to JavaScript\n * Add Gulp.js build script\n * Fix getOrigin for file:/// urls and standard ports - #173\n * Add onerror event handlers to Websockets - #169\n * Increase RTO lower bound to prevent spurious timeouts on IE8/9 - #161\n * Use window.crypto for random values when available - #128\n * Fix handling of listeners added and removed mid-dispatch - #127\n * Fix XHR Streaming for IE8 - #83\n * Remove explicit AMD name - #107\n * Check for an empty response from /info request - #143\n * Add Content-Type to XHR requests to fix issue over HTTPS on Galaxy S4 - #164\n * Fix iframe fallback when message is sent from a popup in IE7/8 - #166\n * Add support for query strings on the url - #72\n * Now works inside of Web Workers - #181\n * Support EventSource / Server Sent Events outside of iframes - #201\n * Rename protocols to transports - #65\n * Allow transports which need the body to trigger on 'interactive' readyState - #175\n * try/catch access to document.domain - #187\n * Use `window.location` instead of `document.location` - #195\n * Allow usage from node.js with same API\n\n0.3.4\n=====\n\n * Mentioned njoyce's fork of sockjs-gevent.\n * #90 - Don't catch onbeforeunload event - it breaks javascript://\n   links in IE.\n * IE mangles 204 response code for 1223 on ajax, see:\n   http://bugs.jquery.com/ticket/1450\n * Make `new` optional for SockJS constructor (via substack).\n * It is impossible to cancel JSONP polling request - compensate for that.\n * Refactored EventEmitter prototype (used only internally)\n * #66 - Failure to post data to /xhr_send should kill the session\n\n\n0.3.2\n=====\n\n * #77 - Getting /info on modern browsers when html is served from\n         file:// urls was broken.\n\n0.3.1\n=====\n\n * #61 - Meteor guys found that we unintentionally catch \"onopen\" errors.\n * #63 - Meteorjs guys found that xhr-streaming on Safari sometimes\n   left busy cursor running.\n * Increased allowed time for websocket transport (from 1 rtt to 2),\n   this should make ws transport more reliable over SSL, at the cost\n   of slightly longer connection time for users with blocked ws.\n * #57 - previous fix didn't really work, sockjs-client still left\n   a mess in browsers history when using iframe transports. This\n   is fixed now.\n * #60 - Opera 12 (next) claims to do AJAX2 / CORS, but can't\n   do xhr-streaming.\n * #58 - onunload test sometimes failed on Safari on windows\n * Updated readme WRT websocket protocols\n * Updated readme WRT deployments on heroku\n * Add minimalistic license block to every source file.\n\n\n0.3.0\n=====\n\n * Temporarily disabled iframe tests - they are failing unpredictably.\n * #57 - pointing an iframe to \"about:blank\" during cleanup caused\n   Opera to messup history.\n * #55 - Improved iframe abstraction (reduced a possible mem leak)\n * Refactored AJAX abstractions, for better CORS handing - again.\n * Add additional parent origin security check to an iframe.\n * Urls with hashes or query strings can't be passed to SockJS.\n * #18 - Mention workaround for Firefox ESC key issue\n * #53 - AMD compliance\n * sockjs/sockjs-protocol#28 - always use square brackets for\n   websocket frames\n * #51 - initial support for IE10 - try XHR before XDR\n * #28 - handle onunload / onbeforeunload in a more robust fashion\n * #49 - support SockJS-client being used from files served from\n   file:// urls.\n\n\n0.2.1\n=====\n\n * \"smoke-latency.html\" test was unnecesairly sending too much data.\n * Bumped core dependencies (coffee-script and uglify-js)\n * Minor updates to the README, few cosmetic changes in the code.\n\n\n0.2.0\n=====\n\n * The API had changed - use `protocols_whitelist` option instead of\n   passing  an array of protocols as a second argument to SockJS constructor.\n * Dropped 'chunking-test' functionality and replace it with 'info'.\n * Rewritten protocol-choosing alogirthm, see \"utils.detectProtocols\" method.\n * Use dynamic protocol timeouts based on RTT, not hardcoded 5 seconds\n * #34 - Don't ever reuse `session_id`, especially when trying\n   fallback protocols.\n * The test server got moved from SockJS-client to SockJS-node.\n * Don't test unicode surrogates - it can't work in some environments.\n * XHR/XDR helpers were rewritten, ajax transports were simplified.\n * Added a domain check in the iframe to improve security.\n * SockJS will now trigger 1002 error if there is a problem during handshake\n   instead of 2000 error.\n * Smoke-throughput test is renamed to smoke-latency.\n\n0.1.2\n=====\n\n * #29 - Allow all unicode characters to be send over SockJS.\n * #15 - SockJS should now work fine even if the connection is started\n   in HEAD, before BODY is loaded.\n * #28 - In rare circumstances WebSocket connection can be left intact\n   after the page is unloaded in FireFox.\n * Updated scripts to work with Node 0.6.\n * Initial work to do better QUnit testing.\n * Updated the minifying script (always escape unicode chars, remove\n   trailing comment).\n * Use string instead of array of chars (utils.js:random_number_string).\n\n\n0.1.1\n=====\n\n * #21 Get JsonP transport working on IE9 (Vladimir Dronnikov).\n * #26 Emit heartbeat event.\n * #27 Include license inline.\n\n\n0.1.0\n=====\n\n * SockJS-client can only send UTF-8 encodable strings.  Previously we\n   took advantage of rich data structures and automatically\n   json-encoded them, but this got removed.  Now, all data passed to\n   `send` will be converted to string. This is also how native\n * `status` property on `EventClose` is renamed to `code`\n   as per Websocket API\n   WebSockets behave.\n * The test server was updated to new `sockjs-node` API\n * Fixed problem with Jsonp-polling transport on IE9\n * Repository was moved - updated links.\n\n\n0.0.4\n=====\n\n * All transports were refactored, some transports were introduced:\n   htmlfile and separate xhr-streaming.\n * Added logic to detect support for http chunking, and thus a\n   possibility to rule out streaming transports before running them.\n * Added 'cookie' option, useful for cookie-based load balancing\n   (currently, it make a difference only for IE).\n * Added hack to prevent EventSource from crashing Safari and Chrome.\n * Loads and loads of other small and medium changes.\n\n\n0.0.2\n=====\n\n * Initial support for JSESSIONID based load balancing. Currently\n   doesn't play nicely with IE XDomainRequest transport.\n\n\n0.0.1\n=====\n\n * Initial release.",
      "metadata": {}
    },
    "CONTRIBUTION": {
      "reference": "CONTRIBUTION",
      "route": "CONTRIBUTION",
      "sourcePath": "react-json-blinkforms\\node_modules\\min-document\\CONTRIBUTION.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"this-is-an-open-open-source-project\">This is an OPEN Open Source Project</h1>\n<h2 id=\"what-\">What?</h2>\n<p>Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.</p>\n<h2 id=\"rules\">Rules</h2>\n<p>There are a few basic ground-rules for contributors:</p>\n<ul>\n<li>No --force pushes or modifying the Git history in any way.</li>\n<li>Non-master branches ought to be used for ongoing work.</li>\n<li>External API changes and significant modifications ought to be subject to an internal pull-request to solicit feedback from other contributors.</li>\n<li>Internal pull-requests to solicit feedback are encouraged for any other non-trivial contribution but left to the discretion of the contributor.</li>\n<li>For significant changes wait a full 24 hours before merging so that active contributors who are distributed throughout the world have a chance to weigh in.</li>\n<li>Contributors should attempt to adhere to the prevailing code-style.\nReleases</li>\n</ul>\n<p>Declaring formal releases requires peer review.</p>\n<ul>\n<li>A reviewer of a pull request should recommend a new version number (patch, minor or major).</li>\n<li>Once your change is merged feel free to bump the version as recommended by the reviewer.</li>\n<li>A new version number should not be cut without peer review unless done by the project maintainer.</li>\n</ul>\n<h2 id=\"want-to-contribute-\">Want to contribute?</h2>\n<p>Even though collaborators may contribute as they see fit, if you are not sure what to do, here&#39;s a suggested process:</p>\n<h2 id=\"cutting-a-new-version\">Cutting a new version</h2>\n<ul>\n<li>Get your branch merged on master</li>\n<li>Run <code>npm version major</code> or <code>npm version minor</code> or <code>npm version patch</code></li>\n<li><code>git push origin master --tags</code></li>\n<li>If you are a project owner, then <code>npm publish</code></li>\n</ul>\n<h2 id=\"if-you-want-to-have-a-bug-fixed-or-a-feature-added-\">If you want to have a bug fixed or a feature added:</h2>\n<ul>\n<li>Check open issues for what you want.</li>\n<li>If there is an open issue, comment on it, otherwise open an issue describing your bug or feature with use cases.</li>\n<li>Discussion happens on the issue about how to solve your problem.</li>\n<li>You or a core contributor opens a pull request solving the issue with tests and documentation.</li>\n<li>The pull requests gets reviewed and then merged.</li>\n<li>A new release version get&#39;s cut.</li>\n<li>(Disclaimer: Your feature might get rejected.)</li>\n</ul>\n<h3 id=\"changes-to-this-arrangement\">Changes to this arrangement</h3>\n<p>This is an experiment and feedback is welcome! This document may also be subject to pull-requests or changes by contributors where you believe you have something valuable to add or change.</p>\n"
      ],
      "contentsRaw": "# This is an OPEN Open Source Project\n\n## What?\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\n## Rules\n\nThere are a few basic ground-rules for contributors:\n\n - No --force pushes or modifying the Git history in any way.\n - Non-master branches ought to be used for ongoing work.\n - External API changes and significant modifications ought to be subject to an internal pull-request to solicit feedback from other contributors.\n - Internal pull-requests to solicit feedback are encouraged for any other non-trivial contribution but left to the discretion of the contributor.\n - For significant changes wait a full 24 hours before merging so that active contributors who are distributed throughout the world have a chance to weigh in.\n - Contributors should attempt to adhere to the prevailing code-style.\nReleases\n\nDeclaring formal releases requires peer review.\n\n - A reviewer of a pull request should recommend a new version number (patch, minor or major).\n - Once your change is merged feel free to bump the version as recommended by the reviewer.\n - A new version number should not be cut without peer review unless done by the project maintainer.\n\n## Want to contribute?\n\nEven though collaborators may contribute as they see fit, if you are not sure what to do, here's a suggested process:\n\n## Cutting a new version\n\n - Get your branch merged on master\n - Run `npm version major` or `npm version minor` or `npm version patch`\n - `git push origin master --tags`\n - If you are a project owner, then `npm publish`\n\n## If you want to have a bug fixed or a feature added:\n\n - Check open issues for what you want.\n - If there is an open issue, comment on it, otherwise open an issue describing your bug or feature with use cases.\n - Discussion happens on the issue about how to solve your problem.\n - You or a core contributor opens a pull request solving the issue with tests and documentation.\n - The pull requests gets reviewed and then merged.\n - A new release version get's cut.\n - (Disclaimer: Your feature might get rejected.)\n\n### Changes to this arrangement\n\nThis is an experiment and feedback is welcome! This document may also be subject to pull-requests or changes by contributors where you believe you have something valuable to add or change.",
      "metadata": {}
    },
    "ERROR-HANDLING": {
      "reference": "ERROR-HANDLING",
      "route": "ERROR-HANDLING",
      "sourcePath": "react-json-blinkforms\\node_modules\\node-fetch\\ERROR-HANDLING.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"error-handling-with-node-fetch\">Error handling with node-fetch</h1>\n<p>Because <code>window.fetch</code> isn&#39;t designed to transparent about the cause of request errors, we have to come up with our own solutions.</p>\n<p>The basics:</p>\n<ul>\n<li><p>All <a href=\"https://www.joyent.com/node-js/production/design/errors\">operational errors</a> are rejected as <a href=\"https://github.com/bitinn/node-fetch/blob/master/lib/fetch-error.js\">FetchError</a>, you can handle them all through promise <code>catch</code> clause.</p>\n</li>\n<li><p>All errors comes with <code>err.message</code> detailing the cause of errors.</p>\n</li>\n<li><p>All errors originated from <code>node-fetch</code> are marked with custom <code>err.type</code>.</p>\n</li>\n<li><p>All errors originated from Node.js core are marked with <code>err.type = system</code>, and contains addition <code>err.code</code> and <code>err.errno</code> for error handling, they are alias to error codes thrown by Node.js core.</p>\n</li>\n<li><p><a href=\"https://www.joyent.com/node-js/production/design/errors\">Programmer errors</a> are either thrown as soon as possible, or rejected with default <code>Error</code> with <code>err.message</code> for ease of troubleshooting.</p>\n</li>\n</ul>\n<p>List of error types:</p>\n<ul>\n<li>Because we maintain 100% coverage, see <a href=\"https://github.com/bitinn/node-fetch/blob/master/test/test.js\">test.js</a> for a full list of custom <code>FetchError</code> types, as well as some of the common errors from Node.js</li>\n</ul>\n"
      ],
      "contentsRaw": "Error handling with node-fetch\n==============================\n\nBecause `window.fetch` isn't designed to transparent about the cause of request errors, we have to come up with our own solutions.\n\nThe basics:\n\n- All [operational errors](https://www.joyent.com/node-js/production/design/errors) are rejected as [FetchError](https://github.com/bitinn/node-fetch/blob/master/lib/fetch-error.js), you can handle them all through promise `catch` clause.\n\n- All errors comes with `err.message` detailing the cause of errors.\n\n- All errors originated from `node-fetch` are marked with custom `err.type`.\n\n- All errors originated from Node.js core are marked with `err.type = system`, and contains addition `err.code` and `err.errno` for error handling, they are alias to error codes thrown by Node.js core.\n\n- [Programmer errors](https://www.joyent.com/node-js/production/design/errors) are either thrown as soon as possible, or rejected with default `Error` with `err.message` for ease of troubleshooting.\n\nList of error types:\n\n- Because we maintain 100% coverage, see [test.js](https://github.com/bitinn/node-fetch/blob/master/test/test.js) for a full list of custom `FetchError` types, as well as some of the common errors from Node.js",
      "metadata": {}
    },
    "LIMITS": {
      "reference": "LIMITS",
      "route": "LIMITS",
      "sourcePath": "react-json-blinkforms\\node_modules\\node-fetch\\LIMITS.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"known-differences\">Known differences</h1>\n<p><em>As of 1.x release</em></p>\n<ul>\n<li><p>Topics such as Cross-Origin, Content Security Policy, Mixed Content, Service Workers are ignored, given our server-side context.</p>\n</li>\n<li><p>URL input must be an absolute URL, using either <code>http</code> or <code>https</code> as scheme.</p>\n</li>\n<li><p>On the upside, there are no forbidden headers, and <code>res.url</code> contains the final url when following redirects.</p>\n</li>\n<li><p>For convenience, <code>res.body</code> is a transform stream, so decoding can be handled independently.</p>\n</li>\n<li><p>Similarly, <code>req.body</code> can either be a string, a buffer or a readable stream.</p>\n</li>\n<li><p>Also, you can handle rejected fetch requests through checking <code>err.type</code> and <code>err.code</code>.</p>\n</li>\n<li><p>Only support <code>res.text()</code>, <code>res.json()</code>, <code>res.buffer()</code> at the moment, until there are good use-cases for blob/arrayBuffer.</p>\n</li>\n<li><p>There is currently no built-in caching, as server-side caching varies by use-cases.</p>\n</li>\n<li><p>Current implementation lacks server-side cookie store, you will need to extract <code>Set-Cookie</code> headers manually.</p>\n</li>\n<li><p>If you are using <code>res.clone()</code> and writing an isomorphic app, note that stream on Node.js have a smaller internal buffer size (16Kb, aka <code>highWaterMark</code>) from client-side browsers (&gt;1Mb, not consistent across browsers).</p>\n</li>\n<li><p>ES6 features such as <code>headers.entries()</code> are missing at the moment, but you can use <code>headers.raw()</code> to retrieve the raw headers object.</p>\n</li>\n</ul>\n"
      ],
      "contentsRaw": "Known differences\n=================\n\n*As of 1.x release*\n\n- Topics such as Cross-Origin, Content Security Policy, Mixed Content, Service Workers are ignored, given our server-side context.\n\n- URL input must be an absolute URL, using either `http` or `https` as scheme.\n\n- On the upside, there are no forbidden headers, and `res.url` contains the final url when following redirects.\n\n- For convenience, `res.body` is a transform stream, so decoding can be handled independently.\n\n- Similarly, `req.body` can either be a string, a buffer or a readable stream.\n\n- Also, you can handle rejected fetch requests through checking `err.type` and `err.code`.\n\n- Only support `res.text()`, `res.json()`, `res.buffer()` at the moment, until there are good use-cases for blob/arrayBuffer.\n\n- There is currently no built-in caching, as server-side caching varies by use-cases.\n\n- Current implementation lacks server-side cookie store, you will need to extract `Set-Cookie` headers manually.\n\n- If you are using `res.clone()` and writing an isomorphic app, note that stream on Node.js have a smaller internal buffer size (16Kb, aka `highWaterMark`) from client-side browsers (>1Mb, not consistent across browsers).\n\n- ES6 features such as `headers.entries()` are missing at the moment, but you can use `headers.raw()` to retrieve the raw headers object.",
      "metadata": {}
    },
    "CODE_OF_CONDUCT": {
      "reference": "CODE_OF_CONDUCT",
      "route": "CODE_OF_CONDUCT",
      "sourcePath": "react-json-blinkforms\\node_modules\\typescript\\CODE_OF_CONDUCT.md",
      "title": "(untitled)",
      "contents": [
        "<p>This project has adopted the <a href=\"https://opensource.microsoft.com/codeofconduct/\">Microsoft Open Source Code of Conduct</a>. For more information see the <a href=\"https://opensource.microsoft.com/codeofconduct/faq/\">Code of Conduct FAQ</a> or contact <a href=\"mailto:opencode@microsoft.com\">opencode@microsoft.com</a> with any additional questions or comments.</p>\n"
      ],
      "contentsRaw": "This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.",
      "metadata": {}
    },
    "API": {
      "reference": "API",
      "route": "API",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss-selector-parser\\API.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"api-documentation\">API Documentation</h1>\n<p><em>Please use only this documented API when working with the parser. Methods\nnot documented here are subject to change at any point.</em></p>\n<h2 id=\"parser-function\"><code>parser</code> function</h2>\n<p>This is the module&#39;s main entry point.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>parser</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>postcss-selector-parser</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h3 id=\"parser-transform-options-\"><code>parser([transform], [options])</code></h3>\n<p>Creates a new <code>processor</code> instance</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>processor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>parser</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Or, with optional transform function</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>transform</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>selectors</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walkUniversals</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>selector</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>remove</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>processor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>parser</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>transform</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Example</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>result</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>processSync</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>*.class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;.class</span></span></span></div></pre><p><a href=\"#processor\">See processor documentation</a></p>\n<p>Arguments:</p>\n<ul>\n<li><code>transform (function)</code>: Provide a function to work with the parsed AST.</li>\n<li><code>options (object)</code>: Provide default options for all calls on the returned <code>Processor</code>.</li>\n</ul>\n<h3 id=\"parser-attribute-props-\"><code>parser.attribute([props])</code></h3>\n<p>Creates a new attribute selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>attribute</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>attribute</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>href</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;[href]</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-classname-props-\"><code>parser.className([props])</code></h3>\n<p>Creates a new class selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>className</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>button</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;.button</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-combinator-props-\"><code>parser.combinator([props])</code></h3>\n<p>Creates a new selector combinator.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>combinator</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>+</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;+</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li><strong>Descendant Combinators</strong> The value of descendant combinators created by the\nparser always just a single space (<code>&quot; &quot;</code>). For descendant selectors with no\ncomments, additional space is now stored in <code>node.spaces.before</code>. Depending\non the location of comments, additional spaces may be stored in\n<code>node.raws.spaces.before</code>, <code>node.raws.spaces.after</code>, or <code>node.raws.value</code>.</li>\n<li><strong>Named Combinators</strong> Although, nonstandard and unlikely to ever become a standard,\nnamed combinators like <code>/deep/</code> and <code>/for/</code> are parsed as combinators. The\n<code>node.value</code> is name after being unescaped and normalized as lowercase. The\noriginal value for the combinator name is stored in <code>node.raws.value</code>.</li>\n</ul>\n<h3 id=\"parser-comment-props-\"><code>parser.comment([props])</code></h3>\n<p>Creates a new comment.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>comment</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>/*&nbsp;Affirmative,&nbsp;Dave.&nbsp;I&nbsp;read&nbsp;you.&nbsp;*/</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;/*&nbsp;Affirmative,&nbsp;Dave.&nbsp;I&nbsp;read&nbsp;you.&nbsp;*/</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-id-props-\"><code>parser.id([props])</code></h3>\n<p>Creates a new id selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>id</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;#search</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-nesting-props-\"><code>parser.nesting([props])</code></h3>\n<p>Creates a new nesting selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>nesting</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;&amp;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-pseudo-props-\"><code>parser.pseudo([props])</code></h3>\n<p>Creates a new pseudo selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>pseudo</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>::before</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;::before</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-root-props-\"><code>parser.root([props])</code></h3>\n<p>Creates a new root node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>root</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;(empty)</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-selector-props-\"><code>parser.selector([props])</code></h3>\n<p>Creates a new selector node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>selector</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;(empty)</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-string-props-\"><code>parser.string([props])</code></h3>\n<p>Creates a new string node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>string</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;(empty)</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-tag-props-\"><code>parser.tag([props])</code></h3>\n<p>Creates a new tag selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>tag</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>button</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;button</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h3 id=\"parser-universal-props-\"><code>parser.universal([props])</code></h3>\n<p>Creates a new universal selector.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>universal</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;*</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>props (object)</code>: The new node&#39;s properties.</li>\n</ul>\n<h2 id=\"node-types\">Node types</h2>\n<h3 id=\"node-type\"><code>node.type</code></h3>\n<p>A string representation of the selector type. It can be one of the following;\n<code>attribute</code>, <code>class</code>, <code>combinator</code>, <code>comment</code>, <code>id</code>, <code>nesting</code>, <code>pseudo</code>,\n<code>root</code>, <code>selector</code>, <code>string</code>, <code>tag</code>, or <code>universal</code>. Note that for convenience,\nthese constants are exposed on the main <code>parser</code> as uppercased keys. So for\nexample you can get <code>id</code> by querying <code>parser.ID</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>attribute</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>attribute</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>href</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;&#39;attribute&#39;</span></span></span></div></pre><h3 id=\"node-parent\"><code>node.parent</code></h3>\n<p>Returns the parent node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>root</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>parent</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;root</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h3 id=\"node-tostring-string-node-or-node\"><code>node.toString()</code>, <code>String(node)</code>, or <code>&#39;&#39; + node</code></h3>\n<p>Returns a string representation of the node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>id</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>id</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"support class js\"><span>String</span></span><span class=\"meta brace round js\"><span>(</span></span><span>id</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;#search</span></span></span></div></pre><h3 id=\"node-next-node-prev-\"><code>node.next()</code> &amp; <code>node.prev()</code></h3>\n<p>Returns the next/previous child of the parent node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>next</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>id</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>next</span></span><span class=\"meta brace round js\"><span>(</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span>next&nbsp;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>next</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>!==</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>combinator</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>throw</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Error</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Qualified&nbsp;IDs&nbsp;are&nbsp;not&nbsp;allowed!</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"node-replacewith-node-\"><code>node.replaceWith(node)</code></h3>\n<p>Replace a node with another.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>attr</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>first</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>first</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>className</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>className</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>test</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>attr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>replaceWith</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>className</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>node</code>: The node to substitute the original with.</li>\n</ul>\n<h3 id=\"node-remove-\"><code>node.remove()</code></h3>\n<p>Removes the node from its parent node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>id</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>node</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>remove</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"node-clone-\"><code>node.clone()</code></h3>\n<p>Returns a copy of a node, detached from any parent containers that the\noriginal might have had.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>cloned</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>id</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"support class js\"><span>String</span></span><span class=\"meta brace round js\"><span>(</span></span><span>cloned</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;#search</span></span></span></div></pre><h3 id=\"node-isatposition-line-column-\"><code>node.isAtPosition(line, column)</code></h3>\n<p>Return a <code>boolean</code> indicating whether this node includes the character at the\nposition of the given line and column. Returns <code>undefined</code> if the nodes lack\nsufficient source metadata to determine the position.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>line</code>: 1-index based line number relative to the start of the selector.</li>\n<li><code>column</code>: 1-index based column number relative to the start of the selector.</li>\n</ul>\n<h3 id=\"node-spaces\"><code>node.spaces</code></h3>\n<p>Extra whitespaces around the node will be moved into <code>node.spaces.before</code> and\n<code>node.spaces.after</code>. So for example, these spaces will be moved as they have\nno semantic meaning:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name tag css\"><span>h1</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name tag css\"><span>h2</span></span><span>&nbsp;&nbsp;&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><p>For descendent selectors, the value is always a single space.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span class=\"entity name tag css\"><span>h1</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name tag css\"><span>h2</span></span><span>&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><p>Additional whitespace is found in either the <code>node.spaces.before</code> and <code>node.spaces.after</code> depending on the presence of comments or other whitespace characters. If the actual whitespace does not start or end with a single space, the node&#39;s raw value is set to the actual space(s) found in the source.</p>\n<h3 id=\"node-source\"><code>node.source</code></h3>\n<p>An object describing the node&#39;s start/end, line/column source position.</p>\n<p>Within the following CSS, the <code>.bar</code> class node ...</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>foo</span></span><span>,</span></span></span></div><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span>&nbsp;&nbsp;</span><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>bar</span></span><span>&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><p>... will contain the following <code>source</code> object.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>source</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;start</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>3</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;end</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>6</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"node-sourceindex\"><code>node.sourceIndex</code></h3>\n<p>The zero-based index of the node within the original source string.</p>\n<p>Within the following CSS, the <code>.baz</code> class node will have a <code>sourceIndex</code> of <code>12</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>foo</span></span><span>,&nbsp;</span><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>bar</span></span><span>,&nbsp;</span><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>baz</span></span><span>&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><h2 id=\"container-types\">Container types</h2>\n<p>The <code>root</code>, <code>selector</code>, and <code>pseudo</code> nodes have some helper methods for working\nwith their children.</p>\n<h3 id=\"container-nodes\"><code>container.nodes</code></h3>\n<p>An array of the container&#39;s children.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Input:&nbsp;h1&nbsp;h2</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>nodes</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;3</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;&#39;h1&#39;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;&#39;&nbsp;&#39;</span></span></span></div></pre><h3 id=\"container-first-container-last\"><code>container.first</code> &amp; <code>container.last</code></h3>\n<p>The first/last child of the container.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>first</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>last</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>nodes</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>-</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h3 id=\"container-at-index-\"><code>container.at(index)</code></h3>\n<p>Returns the node at position <code>index</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>first</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>index</code>: The index of the node to return.</li>\n</ul>\n<h3 id=\"container-atposition-line-column-\"><code>container.atPosition(line, column)</code></h3>\n<p>Returns the node at the source position <code>index</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>first</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>at</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>index</code>: The index of the node to return.</li>\n</ul>\n<h3 id=\"container-index-node-\"><code>container.index(node)</code></h3>\n<p>Return the index of the node within its container.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>index</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>nodes</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric decimal js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;2</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>node</code>: A node within the current container.</li>\n</ul>\n<h3 id=\"container-length\"><code>container.length</code></h3>\n<p>Proxy to the length of the container&#39;s nodes.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>container</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>container</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>nodes</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span></span></div></pre><h3 id=\"container-array-iterators\"><code>container</code> Array iterators</h3>\n<p>The container class provides proxies to certain Array methods; these are:</p>\n<ul>\n<li><code>container.map === container.nodes.map</code></li>\n<li><code>container.reduce === container.nodes.reduce</code></li>\n<li><code>container.every === container.nodes.every</code></li>\n<li><code>container.some === container.nodes.some</code></li>\n<li><code>container.filter === container.nodes.filter</code></li>\n<li><code>container.sort === container.nodes.sort</code></li>\n</ul>\n<p>Note that these methods only work on a container&#39;s immediate children; recursive\niteration is provided by <code>container.walk</code>.</p>\n<h3 id=\"container-each-callback-\"><code>container.each(callback)</code></h3>\n<p>Iterate the container&#39;s immediate children, calling <code>callback</code> for each child.\nYou may return <code>false</code> within the callback to break the iteration.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;className</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>each</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>selector</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>index</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Note that unlike <code>Array#forEach()</code>, this iterator is safe to use whilst adding\nor removing nodes from the container.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>callback (function)</code>: A function to call for each node, which receives <code>node</code>\nand <code>index</code> arguments.</li>\n</ul>\n<h3 id=\"container-walk-callback-\"><code>container.walk(callback)</code></h3>\n<p>Like <code>container#each</code>, but will also iterate child nodes as long as they are\n<code>container</code> types.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>selector</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>index</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;all&nbsp;nodes</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>callback (function)</code>: A function to call for each node, which receives <code>node</code>\nand <code>index</code> arguments.</li>\n</ul>\n<p>This iterator is safe to use whilst mutating <code>container.nodes</code>,\nlike <code>container#each</code>.</p>\n<h3 id=\"container-walk-proxies\"><code>container.walk</code> proxies</h3>\n<p>The container class provides proxy methods for iterating over types of nodes,\nso that it is easier to write modules that target specific selectors. Those\nmethods are:</p>\n<ul>\n<li><code>container.walkAttributes</code></li>\n<li><code>container.walkClasses</code></li>\n<li><code>container.walkCombinators</code></li>\n<li><code>container.walkComments</code></li>\n<li><code>container.walkIds</code></li>\n<li><code>container.walkNesting</code></li>\n<li><code>container.walkPseudos</code></li>\n<li><code>container.walkTags</code></li>\n<li><code>container.walkUniversals</code></li>\n</ul>\n<h3 id=\"container-split-callback-\"><code>container.split(callback)</code></h3>\n<p>This method allows you to split a group of nodes by returning <code>true</code> from\na callback. It returns an array of arrays, where each inner array corresponds\nto the groups that you created via the callback.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;(input)&nbsp;=&gt;&nbsp;h1&nbsp;h2&gt;&gt;h3</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>list</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>first</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>split</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>selector</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>combinator</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;(node&nbsp;values)&nbsp;=&gt;&nbsp;[[&#39;h1&#39;,&nbsp;&#39;&nbsp;&#39;],&nbsp;[&#39;h2&#39;,&nbsp;&#39;&gt;&gt;&#39;],&nbsp;[&#39;h3&#39;]]</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>callback (function)</code>: A function to call for each node, which receives <code>node</code>\nas an argument.</li>\n</ul>\n<h3 id=\"container-prepend-node-container-append-node-\"><code>container.prepend(node)</code> &amp; <code>container.append(node)</code></h3>\n<p>Add a node to the start/end of the container. Note that doing so will set\nthe parent property of the node to this container.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>id</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>id</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>search</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>append</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>id</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>node</code>: The node to add.</li>\n</ul>\n<h3 id=\"container-insertbefore-old-new-container-insertafter-old-new-\"><code>container.insertBefore(old, new)</code> &amp; <code>container.insertAfter(old, new)</code></h3>\n<p>Add a node before or after an existing node in a container:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selectors</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walk</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>selector</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>type</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>!==</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>className</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>parser</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>className</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>theme-name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>parent</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>insertAfter</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>selector</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;className</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>old</code>: The existing node in the container.</li>\n<li><code>new</code>: The new node to add before/after the existing node.</li>\n</ul>\n<h3 id=\"container-removechild-node-\"><code>container.removeChild(node)</code></h3>\n<p>Remove the node from the container. Note that you can also use\n<code>node.remove()</code> if you would like to remove just a single node.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;2</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>remove</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>id</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;1;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>id</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>parent</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;undefined</span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>node</code>: The node to remove.</li>\n</ul>\n<h3 id=\"container-removeall-or-container-empty-\"><code>container.removeAll()</code> or <code>container.empty()</code></h3>\n<p>Remove all children from the container.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>removeAll</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>selector</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;0</span></span></span></div></pre><h2 id=\"root-nodes\">Root nodes</h2>\n<p>A root node represents a comma separated list of selectors. Indeed, all\na root&#39;s <code>toString()</code> method does is join its selector children with a &#39;,&#39;.\nOther than this, it has no special functionality and acts like a container.</p>\n<h3 id=\"root-trailingcomma\"><code>root.trailingComma</code></h3>\n<p>This will be set to <code>true</code> if the input has a trailing comma, in order to\nsupport parsing of legacy CSS hacks.</p>\n<h2 id=\"selector-nodes\">Selector nodes</h2>\n<p>A selector node represents a single complex selector. For example, this\nselector string <code>h1 h2 h3, [href] &gt; p</code>, is represented as two selector nodes.\nIt has no special functionality of its own.</p>\n<h2 id=\"pseudo-nodes\">Pseudo nodes</h2>\n<p>A pseudo selector extends a container node; if it has any parameters of its\nown (such as <code>h1:not(h2, h3)</code>), they will be its children. Note that the pseudo\n<code>value</code> will always contain the colons preceding the pseudo identifier. This\nis so that both <code>:before</code> and <code>::before</code> are properly represented in the AST.</p>\n<h2 id=\"attribute-nodes\">Attribute nodes</h2>\n<h3 id=\"attribute-quoted\"><code>attribute.quoted</code></h3>\n<p>Returns <code>true</code> if the attribute&#39;s value is wrapped in quotation marks, false if it is not.\nRemains <code>undefined</code> if there is no attribute value.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=foo]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;false&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=&#39;foo&#39;]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;true&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=&quot;foo&quot;]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;true&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;undefined&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div></pre><h3 id=\"attribute-qualifiedattribute\"><code>attribute.qualifiedAttribute</code></h3>\n<p>Returns the attribute name qualified with the namespace if one is given.</p>\n<h3 id=\"attribute-offsetof-part-\"><code>attribute.offsetOf(part)</code></h3>\n<p> Returns the offset of the attribute part specified relative to the\n start of the node of the output string. This is useful in raising\n error messages about a specific part of the attribute, especially\n in combination with <code>attribute.sourceIndex</code>.</p>\n<p> Returns <code>-1</code> if the name is invalid or the value doesn&#39;t exist in this\n attribute.</p>\n<p> The legal values for <code>part</code> are:</p>\n<ul>\n<li><code>&quot;ns&quot;</code> - alias for &quot;namespace&quot;</li>\n<li><code>&quot;namespace&quot;</code> - the namespace if it exists.</li>\n<li><code>&quot;attribute&quot;</code> - the attribute name</li>\n<li><code>&quot;attributeNS&quot;</code> - the start of the attribute or its namespace</li>\n<li><code>&quot;operator&quot;</code> - the match operator of the attribute</li>\n<li><code>&quot;value&quot;</code> - The value (string or identifier)</li>\n<li><code>&quot;insensitive&quot;</code> - the case insensitivity flag</li>\n</ul>\n<h3 id=\"attribute-raws-unquoted\"><code>attribute.raws.unquoted</code></h3>\n<p>Returns the unquoted content of the attribute&#39;s value.\nRemains <code>undefined</code> if there is no attribute value.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=foo]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;foo&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=&#39;foo&#39;]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;foo&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href=&quot;foo&quot;]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;foo&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source css\"><span>[</span><span class=\"meta selector css\"><span>href]&nbsp;</span></span><span class=\"comment block css\"><span class=\"punctuation definition comment css\"><span>/*</span></span><span>&nbsp;undefined&nbsp;</span><span class=\"punctuation definition comment css\"><span>*/</span></span></span></span></div></pre><h3 id=\"attribute-spaces\"><code>attribute.spaces</code></h3>\n<p>Like <code>node.spaces</code> with the <code>before</code> and <code>after</code> values containing the spaces\naround the element, the parts of the attribute can also have spaces before\nand after them. The for each of <code>attribute</code>, <code>operator</code>, <code>value</code> and\n<code>insensitive</code> there is corresponding property of the same nam in\n<code>node.spaces</code> that has an optional <code>before</code> or <code>after</code> string containing only\nwhitespace.</p>\n<p>Note that corresponding values in <code>attributes.raws.spaces</code> contain values\nincluding any comments. If set, these values will override the\n<code>attribute.spaces</code> value. Take care to remove them if changing\n<code>attribute.spaces</code>.</p>\n<h3 id=\"attribute-raws\"><code>attribute.raws</code></h3>\n<p>The raws object stores comments and other information necessary to re-render\nthe node exactly as it was in the source.</p>\n<p>If a comment is embedded within the identifiers for the <code>namespace</code>, <code>attribute</code>\nor <code>value</code> then a property is placed in the raws for that value containing the full source of the propery including comments.</p>\n<p>If a comment is embedded within the space between parts of the attribute\nthen the raw for that space is set accordingly.</p>\n<p>Setting an attribute&#39;s property <code>raws</code> value to be deleted.</p>\n<p>For now, changing the spaces required also updating or removing any of the\nraws values that override them.</p>\n<p>Example: <code>[ /*before*/ href /* after-attr */ = /* after-operator */ te/*inside-value*/st/* wow */ /*omg*/i/*bbq*/ /*whodoesthis*/]</code> would parse as:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;attribute</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>href</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;operatator</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>=</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>test</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;spaces</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;before</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;attribute</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;before</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;operator</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;insensitive</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;raws</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;spaces</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attribute</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;before</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;/*before*/&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;/*&nbsp;after-attr&nbsp;*/&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operator</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;/*&nbsp;after-operator&nbsp;*/&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>/*&nbsp;wow&nbsp;*/&nbsp;/*omg*/</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insensitive</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;after</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>/*bbq*/&nbsp;/*whodoesthis*/</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;unquoted</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>test</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;value</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>te/*inside-value*/st</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h2 id=\"processor\"><code>Processor</code></h2>\n<h3 id=\"processoroptions\"><code>ProcessorOptions</code></h3>\n<ul>\n<li><code>lossless</code> - When <code>true</code>, whitespace is preserved. Defaults to <code>true</code>.</li>\n<li><code>updateSelector</code> - When <code>true</code>, if any processor methods are passed a postcss\n<code>Rule</code> node instead of a string, then that Rule&#39;s selector is updated\nwith the results of the processing. Defaults to <code>true</code>.</li>\n</ul>\n<h3 id=\"process-processsync-selectors-options-\"><code>process|processSync(selectors, [options])</code></h3>\n<p>Processes the <code>selectors</code>, returning a string from the result of processing.</p>\n<p>Note: when the <code>updateSelector</code> option is set, the rule&#39;s selector\nwill be updated with the resulting string.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>parser</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>postcss-selector-parser</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>processor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>parser</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;result&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>processSync</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;.class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>result</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;&nbsp;.class</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Asynchronous&nbsp;operation</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;promise&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;.class</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>then</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>result</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>result</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;.class</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;To&nbsp;have&nbsp;the&nbsp;parser&nbsp;normalize&nbsp;whitespace&nbsp;values,&nbsp;utilize&nbsp;the&nbsp;options</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>result&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>processSync</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;&nbsp;.class&nbsp;&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>lossless</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>result</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;.class</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;For&nbsp;better&nbsp;syntax&nbsp;errors,&nbsp;pass&nbsp;a&nbsp;PostCSS&nbsp;Rule&nbsp;node.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>postcss</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>postcss</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>rule&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>rule</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>selector</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;#foo&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;a,&nbsp;&nbsp;.class&nbsp;&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>rule</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>lossless</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;updateSelector</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true js\"><span>true</span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>then</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>result</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>result</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;#foo&gt;a,.class</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>log</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>rule:</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>rule</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>selector</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;=&gt;&nbsp;rule:&nbsp;#foo&gt;a,.class</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><p>Arguments:</p>\n<ul>\n<li><code>selectors (string|postcss.Rule)</code>: Either a selector string or a PostCSS Rule\nnode.</li>\n<li><code>[options] (object)</code>: Process options</li>\n</ul>\n<h3 id=\"ast-astsync-selectors-options-\"><code>ast|astSync(selectors, [options])</code></h3>\n<p>Like <code>process()</code> and <code>processSync()</code> but after\nprocessing the <code>selectors</code> these methods return the <code>Root</code> node of the result\ninstead of a string.</p>\n<p>Note: when the <code>updateSelector</code> option is set, the rule&#39;s selector\nwill be updated with the resulting string.</p>\n<h3 id=\"transform-transformsync-selectors-options-\"><code>transform|transformSync(selectors, [options])</code></h3>\n<p>Like <code>process()</code> and <code>processSync()</code> but after\nprocessing the <code>selectors</code> these methods return the value returned by the\nprocessor callback.</p>\n<p>Note: when the <code>updateSelector</code> option is set, the rule&#39;s selector\nwill be updated with the resulting string.</p>\n<h3 id=\"error-handling-within-selector-processors\">Error Handling Within Selector Processors</h3>\n<p>The root node passed to the selector processor callback\nhas a method <code>error(message, options)</code> that returns an\nerror object. This method should always be used to raise\nerrors relating to the syntax of selectors. The options\nto this method are passed to postcss&#39;s error constructor\n(<a href=\"http://api.postcss.org/Container.html#error\">documentation</a>).</p>\n<h4 id=\"async-error-example\">Async Error Example</h4>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"entity name function js\"><span>processor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Promise</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>resolve</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>reject</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walkClasses</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>classNode</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string regexp js\"><span class=\"punctuation definition string begin js\"><span>/</span></span><span class=\"keyword control anchor regexp\"><span>^</span></span><span class=\"meta group regexp\"><span class=\"punctuation definition group regexp\"><span>(</span></span><span class=\"constant character character-class regexp\"><span>.</span></span><span class=\"keyword operator quantifier regexp\"><span>*</span></span><span class=\"punctuation definition group regexp\"><span>)</span></span></span><span class=\"constant other character-class set regexp\"><span class=\"punctuation definition character-class regexp\"><span>[</span></span><span>-_</span><span class=\"punctuation definition character-class regexp\"><span>]</span></span></span><span class=\"punctuation definition string end js\"><span>/</span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>test</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;msg&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>classes&nbsp;may&nbsp;not&nbsp;have&nbsp;underscores&nbsp;or&nbsp;dashes&nbsp;in&nbsp;them</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>reject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>msg</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta function-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>sourceIndex</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"support class js\"><span>RegExp</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>$1</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property js\"><span>length</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta function-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;word</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta function-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>resolve</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>postcss</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>postcss</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>parser</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>postcss-selector-parser</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>selectorProcessor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>parser</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>processor</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>plugin</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>classValidator</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>options</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;promises&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walkRules</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>rule</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>promises</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>selectorProcessor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>rule</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Promise</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>all</span></span><span class=\"meta brace round js\"><span>(</span></span><span>promises</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>postcss</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted template js\"><span class=\"punctuation definition string begin js\"><span>`</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>.foo-bar&nbsp;{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;color:&nbsp;red;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span class=\"punctuation definition string end js\"><span>`</span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>trim</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>from</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>test.css</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>catch</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>e</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>e</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>toString</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;CssSyntaxError:&nbsp;classValidator:&nbsp;./test.css:1:5:&nbsp;classes&nbsp;may&nbsp;not&nbsp;have&nbsp;underscores&nbsp;or&nbsp;dashes&nbsp;in&nbsp;them</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&gt;&nbsp;1&nbsp;|&nbsp;.foo-bar&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;2&nbsp;|&nbsp;&nbsp;&nbsp;color:&nbsp;red;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;3&nbsp;|&nbsp;}</span></span></span></div></pre><h4 id=\"synchronous-error-example\">Synchronous Error Example</h4>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"entity name function js\"><span>processor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walkClasses</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>classNode</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string regexp js\"><span class=\"punctuation definition string begin js\"><span>/</span></span><span class=\"constant character character-class regexp\"><span>.</span></span><span class=\"keyword operator quantifier regexp\"><span>*</span></span><span class=\"constant other character-class set regexp\"><span class=\"punctuation definition character-class regexp\"><span>[</span></span><span>-_</span><span class=\"punctuation definition character-class regexp\"><span>]</span></span></span><span class=\"punctuation definition string end js\"><span>/</span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>test</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type var js\"><span>let</span></span><span>&nbsp;msg&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>classes&nbsp;may&nbsp;not&nbsp;have&nbsp;underscores&nbsp;or&nbsp;dashes&nbsp;in&nbsp;them</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>throw</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>msg</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>sourceIndex</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;word</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>classNode</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>postcss</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>postcss</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>parser</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>postcss-selector-parser</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>selectorProcessor</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>parser</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>processor</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>plugin</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>classValidator</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>options</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>root</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>walkRules</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>rule</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>selectorProcessor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>processSync</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>rule</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>postcss</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted template js\"><span class=\"punctuation definition string begin js\"><span>`</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>.foo-bar&nbsp;{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>&nbsp;&nbsp;color:&nbsp;red;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"string quoted template js\"><span class=\"punctuation definition string end js\"><span>`</span></span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>trim</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>from</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>test.css</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>catch</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>e</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"entity name type object console js\"><span>console</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function console js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>e</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>toString</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;CssSyntaxError:&nbsp;classValidator:&nbsp;./test.css:1:5:&nbsp;classes&nbsp;may&nbsp;not&nbsp;have&nbsp;underscores&nbsp;or&nbsp;dashes&nbsp;in&nbsp;them</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&gt;&nbsp;1&nbsp;|&nbsp;.foo-bar&nbsp;{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;2&nbsp;|&nbsp;&nbsp;&nbsp;color:&nbsp;red;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;3&nbsp;|&nbsp;}</span></span></span></div></pre>"
      ],
      "contentsRaw": "# API Documentation\n\n*Please use only this documented API when working with the parser. Methods\nnot documented here are subject to change at any point.*\n\n## `parser` function\n\nThis is the module's main entry point.\n\n```js\nconst parser = require('postcss-selector-parser');\n```\n\n### `parser([transform], [options])`\n\nCreates a new `processor` instance\n\n```js\nconst processor = parser();\n```\n\nOr, with optional transform function\n\n```js\nconst transform = selectors => {\n    selectors.walkUniversals(selector => {\n        selector.remove();\n    });\n};\n\nconst processor = parser(transform)\n\n// Example\nconst result = processor.processSync('*.class');\n// => .class\n```\n\n[See processor documentation](#processor)\n\nArguments:\n\n* `transform (function)`: Provide a function to work with the parsed AST.\n* `options (object)`: Provide default options for all calls on the returned `Processor`.\n\n### `parser.attribute([props])`\n\nCreates a new attribute selector.\n\n```js\nparser.attribute({attribute: 'href'});\n// => [href]\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.className([props])`\n\nCreates a new class selector.\n\n```js\nparser.className({value: 'button'});\n// => .button\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.combinator([props])`\n\nCreates a new selector combinator.\n\n```js\nparser.combinator({value: '+'});\n// => +\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\nNotes:\n* **Descendant Combinators** The value of descendant combinators created by the\n  parser always just a single space (`\" \"`). For descendant selectors with no\n  comments, additional space is now stored in `node.spaces.before`. Depending\n  on the location of comments, additional spaces may be stored in\n  `node.raws.spaces.before`, `node.raws.spaces.after`, or `node.raws.value`.\n* **Named Combinators** Although, nonstandard and unlikely to ever become a standard,\n  named combinators like `/deep/` and `/for/` are parsed as combinators. The\n  `node.value` is name after being unescaped and normalized as lowercase. The\n  original value for the combinator name is stored in `node.raws.value`.\n\n\n### `parser.comment([props])`\n\nCreates a new comment.\n\n```js\nparser.comment({value: '/* Affirmative, Dave. I read you. */'});\n// => /* Affirmative, Dave. I read you. */\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.id([props])`\n\nCreates a new id selector.\n\n```js\nparser.id({value: 'search'});\n// => #search\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.nesting([props])`\n\nCreates a new nesting selector.\n\n```js\nparser.nesting();\n// => &\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.pseudo([props])`\n\nCreates a new pseudo selector.\n\n```js\nparser.pseudo({value: '::before'});\n// => ::before\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.root([props])`\n\nCreates a new root node.\n\n```js\nparser.root();\n// => (empty)\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.selector([props])`\n\nCreates a new selector node.\n\n```js\nparser.selector();\n// => (empty)\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.string([props])`\n\nCreates a new string node.\n\n```js\nparser.string();\n// => (empty)\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.tag([props])`\n\nCreates a new tag selector.\n\n```js\nparser.tag({value: 'button'});\n// => button\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n### `parser.universal([props])`\n\nCreates a new universal selector.\n\n```js\nparser.universal();\n// => *\n```\n\nArguments:\n\n* `props (object)`: The new node's properties.\n\n## Node types\n\n### `node.type`\n\nA string representation of the selector type. It can be one of the following;\n`attribute`, `class`, `combinator`, `comment`, `id`, `nesting`, `pseudo`,\n`root`, `selector`, `string`, `tag`, or `universal`. Note that for convenience,\nthese constants are exposed on the main `parser` as uppercased keys. So for\nexample you can get `id` by querying `parser.ID`.\n\n```js\nparser.attribute({attribute: 'href'}).type;\n// => 'attribute'\n```\n\n### `node.parent`\n\nReturns the parent node.\n\n```js\nroot.nodes[0].parent === root;\n```\n\n### `node.toString()`, `String(node)`, or `'' + node`\n\nReturns a string representation of the node.\n\n```js\nconst id = parser.id({value: 'search'});\nconsole.log(String(id));\n// => #search\n```\n\n### `node.next()` & `node.prev()`\n\nReturns the next/previous child of the parent node.\n\n```js\nconst next = id.next();\nif (next && next.type !== 'combinator') {\n    throw new Error('Qualified IDs are not allowed!');\n}\n```\n\n### `node.replaceWith(node)`\n\nReplace a node with another.\n\n```js\nconst attr = selectors.first.first;\nconst className = parser.className({value: 'test'});\nattr.replaceWith(className);\n```\n\nArguments:\n\n* `node`: The node to substitute the original with.\n\n### `node.remove()`\n\nRemoves the node from its parent node.\n\n```js\nif (node.type === 'id') {\n    node.remove();\n}\n```\n\n### `node.clone()`\n\nReturns a copy of a node, detached from any parent containers that the\noriginal might have had.\n\n```js\nconst cloned = parser.id({value: 'search'});\nString(cloned);\n\n// => #search\n```\n\n### `node.isAtPosition(line, column)`\n\nReturn a `boolean` indicating whether this node includes the character at the\nposition of the given line and column. Returns `undefined` if the nodes lack\nsufficient source metadata to determine the position.\n\nArguments:\n\n* `line`: 1-index based line number relative to the start of the selector.\n* `column`: 1-index based column number relative to the start of the selector.\n\n### `node.spaces`\n\nExtra whitespaces around the node will be moved into `node.spaces.before` and\n`node.spaces.after`. So for example, these spaces will be moved as they have\nno semantic meaning:\n\n```css\n      h1     ,     h2   {}\n```\n\nFor descendent selectors, the value is always a single space.\n\n```css\nh1        h2 {}\n```\n\nAdditional whitespace is found in either the `node.spaces.before` and `node.spaces.after` depending on the presence of comments or other whitespace characters. If the actual whitespace does not start or end with a single space, the node's raw value is set to the actual space(s) found in the source.\n\n### `node.source`\n\nAn object describing the node's start/end, line/column source position.\n\nWithin the following CSS, the `.bar` class node ...\n\n```css\n.foo,\n  .bar {}\n```\n\n... will contain the following `source` object.\n\n```js\nsource: {\n    start: {\n        line: 2,\n        column: 3\n    },\n    end: {\n        line: 2,\n        column: 6\n    }\n}\n```\n\n### `node.sourceIndex`\n\nThe zero-based index of the node within the original source string.\n\nWithin the following CSS, the `.baz` class node will have a `sourceIndex` of `12`.\n\n```css\n.foo, .bar, .baz {}\n```\n\n## Container types\n\nThe `root`, `selector`, and `pseudo` nodes have some helper methods for working\nwith their children.\n\n### `container.nodes`\n\nAn array of the container's children.\n\n```js\n// Input: h1 h2\nselectors.at(0).nodes.length   // => 3\nselectors.at(0).nodes[0].value // => 'h1'\nselectors.at(0).nodes[1].value // => ' '\n```\n\n### `container.first` & `container.last`\n\nThe first/last child of the container.\n\n```js\nselector.first === selector.nodes[0];\nselector.last === selector.nodes[selector.nodes.length - 1];\n```\n\n### `container.at(index)`\n\nReturns the node at position `index`.\n\n```js\nselector.at(0) === selector.first;\nselector.at(0) === selector.nodes[0];\n```\n\nArguments:\n\n* `index`: The index of the node to return.\n\n### `container.atPosition(line, column)`\n\nReturns the node at the source position `index`.\n\n```js\nselector.at(0) === selector.first;\nselector.at(0) === selector.nodes[0];\n```\n\nArguments:\n\n* `index`: The index of the node to return.\n\n### `container.index(node)`\n\nReturn the index of the node within its container.\n\n```js\nselector.index(selector.nodes[2]) // => 2\n```\n\nArguments:\n\n* `node`: A node within the current container.\n\n### `container.length`\n\nProxy to the length of the container's nodes.\n\n```js\ncontainer.length === container.nodes.length\n```\n\n### `container` Array iterators\n\nThe container class provides proxies to certain Array methods; these are:\n\n* `container.map === container.nodes.map`\n* `container.reduce === container.nodes.reduce`\n* `container.every === container.nodes.every`\n* `container.some === container.nodes.some`\n* `container.filter === container.nodes.filter`\n* `container.sort === container.nodes.sort`\n\nNote that these methods only work on a container's immediate children; recursive\niteration is provided by `container.walk`.\n\n### `container.each(callback)`\n\nIterate the container's immediate children, calling `callback` for each child.\nYou may return `false` within the callback to break the iteration.\n\n```js\nlet className;\nselectors.each((selector, index) => {\n    if (selector.type === 'class') {\n        className = selector.value;\n        return false;\n    }\n});\n```\n\nNote that unlike `Array#forEach()`, this iterator is safe to use whilst adding\nor removing nodes from the container.\n\nArguments:\n\n* `callback (function)`: A function to call for each node, which receives `node`\n  and `index` arguments.\n\n### `container.walk(callback)`\n\nLike `container#each`, but will also iterate child nodes as long as they are\n`container` types.\n\n```js\nselectors.walk((selector, index) => {\n    // all nodes\n});\n```\n\nArguments:\n\n* `callback (function)`: A function to call for each node, which receives `node`\n  and `index` arguments.\n\nThis iterator is safe to use whilst mutating `container.nodes`,\nlike `container#each`.\n\n### `container.walk` proxies\n\nThe container class provides proxy methods for iterating over types of nodes,\nso that it is easier to write modules that target specific selectors. Those\nmethods are:\n\n* `container.walkAttributes`\n* `container.walkClasses`\n* `container.walkCombinators`\n* `container.walkComments`\n* `container.walkIds`\n* `container.walkNesting`\n* `container.walkPseudos`\n* `container.walkTags`\n* `container.walkUniversals`\n\n### `container.split(callback)`\n\nThis method allows you to split a group of nodes by returning `true` from\na callback. It returns an array of arrays, where each inner array corresponds\nto the groups that you created via the callback.\n\n```js\n// (input) => h1 h2>>h3\nconst list = selectors.first.split(selector => {\n    return selector.type === 'combinator';\n});\n\n// (node values) => [['h1', ' '], ['h2', '>>'], ['h3']]\n```\n\nArguments:\n\n* `callback (function)`: A function to call for each node, which receives `node`\n  as an argument.\n\n### `container.prepend(node)` & `container.append(node)`\n\nAdd a node to the start/end of the container. Note that doing so will set\nthe parent property of the node to this container.\n\n```js\nconst id = parser.id({value: 'search'});\nselector.append(id);\n```\n\nArguments:\n\n* `node`: The node to add.\n\n### `container.insertBefore(old, new)` & `container.insertAfter(old, new)`\n\nAdd a node before or after an existing node in a container:\n\n```js\nselectors.walk(selector => {\n    if (selector.type !== 'class') {\n        const className = parser.className({value: 'theme-name'});\n        selector.parent.insertAfter(selector, className);\n    }\n});\n```\n\nArguments:\n\n* `old`: The existing node in the container.\n* `new`: The new node to add before/after the existing node.\n\n### `container.removeChild(node)`\n\nRemove the node from the container. Note that you can also use\n`node.remove()` if you would like to remove just a single node.\n\n```js\nselector.length // => 2\nselector.remove(id)\nselector.length // => 1;\nid.parent       // undefined\n```\n\nArguments:\n\n* `node`: The node to remove.\n\n### `container.removeAll()` or `container.empty()`\n\nRemove all children from the container.\n\n```js\nselector.removeAll();\nselector.length // => 0\n```\n\n## Root nodes\n\nA root node represents a comma separated list of selectors. Indeed, all\na root's `toString()` method does is join its selector children with a ','.\nOther than this, it has no special functionality and acts like a container.\n\n### `root.trailingComma`\n\nThis will be set to `true` if the input has a trailing comma, in order to\nsupport parsing of legacy CSS hacks.\n\n## Selector nodes\n\nA selector node represents a single complex selector. For example, this\nselector string `h1 h2 h3, [href] > p`, is represented as two selector nodes.\nIt has no special functionality of its own.\n\n## Pseudo nodes\n\nA pseudo selector extends a container node; if it has any parameters of its\nown (such as `h1:not(h2, h3)`), they will be its children. Note that the pseudo\n`value` will always contain the colons preceding the pseudo identifier. This\nis so that both `:before` and `::before` are properly represented in the AST.\n\n## Attribute nodes\n\n### `attribute.quoted`\n\nReturns `true` if the attribute's value is wrapped in quotation marks, false if it is not.\nRemains `undefined` if there is no attribute value.\n\n```css\n[href=foo] /* false */\n[href='foo'] /* true */\n[href=\"foo\"] /* true */\n[href] /* undefined */\n```\n\n### `attribute.qualifiedAttribute`\n\nReturns the attribute name qualified with the namespace if one is given.\n\n### `attribute.offsetOf(part)`\n\n Returns the offset of the attribute part specified relative to the\n start of the node of the output string. This is useful in raising\n error messages about a specific part of the attribute, especially\n in combination with `attribute.sourceIndex`.\n\n Returns `-1` if the name is invalid or the value doesn't exist in this\n attribute.\n\n The legal values for `part` are:\n\n * `\"ns\"` - alias for \"namespace\"\n * `\"namespace\"` - the namespace if it exists.\n * `\"attribute\"` - the attribute name\n * `\"attributeNS\"` - the start of the attribute or its namespace\n * `\"operator\"` - the match operator of the attribute\n * `\"value\"` - The value (string or identifier)\n * `\"insensitive\"` - the case insensitivity flag\n\n### `attribute.raws.unquoted`\n\nReturns the unquoted content of the attribute's value.\nRemains `undefined` if there is no attribute value.\n\n```css\n[href=foo] /* foo */\n[href='foo'] /* foo */\n[href=\"foo\"] /* foo */\n[href] /* undefined */\n```\n\n### `attribute.spaces`\n\nLike `node.spaces` with the `before` and `after` values containing the spaces\naround the element, the parts of the attribute can also have spaces before\nand after them. The for each of `attribute`, `operator`, `value` and\n`insensitive` there is corresponding property of the same nam in\n`node.spaces` that has an optional `before` or `after` string containing only\nwhitespace.\n\nNote that corresponding values in `attributes.raws.spaces` contain values\nincluding any comments. If set, these values will override the\n`attribute.spaces` value. Take care to remove them if changing\n`attribute.spaces`.\n\n### `attribute.raws`\n\nThe raws object stores comments and other information necessary to re-render\nthe node exactly as it was in the source.\n\nIf a comment is embedded within the identifiers for the `namespace`, `attribute`\nor `value` then a property is placed in the raws for that value containing the full source of the propery including comments.\n\nIf a comment is embedded within the space between parts of the attribute\nthen the raw for that space is set accordingly.\n\nSetting an attribute's property `raws` value to be deleted.\n\nFor now, changing the spaces required also updating or removing any of the\nraws values that override them.\n\nExample: `[ /*before*/ href /* after-attr */ = /* after-operator */ te/*inside-value*/st/* wow */ /*omg*/i/*bbq*/ /*whodoesthis*/]` would parse as:\n\n```js\n{\n  attribute: \"href\",\n  operatator: \"=\",\n  value: \"test\",\n  spaces: {\n    before: '',\n    after: '',\n    attribute: { before: '  ', after: '  ' },\n    operator: { after: '  ' },\n    value: { after: ' ' },\n    insensitive: { after: ' ' }\n  },\n  raws: {\n    spaces: {\n      attribute: { before: ' /*before*/ ', after: ' /* after-attr */ ' },\n      operator: { after: ' /* after-operator */ ' },\n      value: { after: '/* wow */ /*omg*/' },\n      insensitive: { after: '/*bbq*/ /*whodoesthis*/' }\n    },\n    unquoted: 'test',\n    value: 'te/*inside-value*/st'\n  }\n}\n```\n\n## `Processor`\n\n### `ProcessorOptions`\n\n* `lossless` - When `true`, whitespace is preserved. Defaults to `true`.\n* `updateSelector` - When `true`, if any processor methods are passed a postcss\n  `Rule` node instead of a string, then that Rule's selector is updated\n  with the results of the processing. Defaults to `true`.\n\n### `process|processSync(selectors, [options])`\n\nProcesses the `selectors`, returning a string from the result of processing.\n\nNote: when the `updateSelector` option is set, the rule's selector\nwill be updated with the resulting string.\n\n**Example:**\n\n```js\nconst parser = require(\"postcss-selector-parser\");\nconst processor = parser();\n\nlet result = processor.processSync(' .class');\nconsole.log(result);\n// =>  .class\n\n// Asynchronous operation\nlet promise = processor.process(' .class').then(result => {\n    console.log(result)\n    // => .class\n});\n\n// To have the parser normalize whitespace values, utilize the options\nresult = processor.processSync('  .class  ', {lossless: false});\nconsole.log(result);\n// => .class\n\n// For better syntax errors, pass a PostCSS Rule node.\nconst postcss = require('postcss');\nrule = postcss.rule({selector: ' #foo    > a,  .class  '});\nprocessor.process(rule, {lossless: false, updateSelector: true}).then(result => {\n    console.log(result);\n    // => #foo>a,.class\n    console.log(\"rule:\", rule.selector);\n    // => rule: #foo>a,.class\n})\n```\n\nArguments:\n\n* `selectors (string|postcss.Rule)`: Either a selector string or a PostCSS Rule\n  node.\n* `[options] (object)`: Process options\n\n\n### `ast|astSync(selectors, [options])`\n\nLike `process()` and `processSync()` but after\nprocessing the `selectors` these methods return the `Root` node of the result\ninstead of a string.\n\nNote: when the `updateSelector` option is set, the rule's selector\nwill be updated with the resulting string.\n\n### `transform|transformSync(selectors, [options])`\n\nLike `process()` and `processSync()` but after\nprocessing the `selectors` these methods return the value returned by the\nprocessor callback.\n\nNote: when the `updateSelector` option is set, the rule's selector\nwill be updated with the resulting string.\n\n### Error Handling Within Selector Processors\n\nThe root node passed to the selector processor callback\nhas a method `error(message, options)` that returns an\nerror object. This method should always be used to raise\nerrors relating to the syntax of selectors. The options\nto this method are passed to postcss's error constructor\n([documentation](http://api.postcss.org/Container.html#error)).\n\n#### Async Error Example\n\n```js\nlet processor = (root) => {\n    return new Promise((resolve, reject) => {\n        root.walkClasses((classNode) => {\n            if (/^(.*)[-_]/.test(classNode.value)) {\n                let msg = \"classes may not have underscores or dashes in them\";\n                reject(root.error(msg, {\n                    index: classNode.sourceIndex + RegExp.$1.length + 1,\n                    word: classNode.value\n                }));\n            }\n        });\n        resolve();\n    });\n};\n\nconst postcss = require(\"postcss\");\nconst parser = require(\"postcss-selector-parser\");\nconst selectorProcessor = parser(processor);\nconst plugin = postcss.plugin('classValidator', (options) => {\n    return (root) => {\n        let promises = [];\n        root.walkRules(rule => {\n            promises.push(selectorProcessor.process(rule));\n        });\n        return Promise.all(promises);\n    };\n});\npostcss(plugin()).process(`\n.foo-bar {\n  color: red;\n}\n`.trim(), {from: 'test.css'}).catch((e) => console.error(e.toString()));\n\n// CssSyntaxError: classValidator: ./test.css:1:5: classes may not have underscores or dashes in them\n//\n// > 1 | .foo-bar {\n//     |     ^\n//   2 |   color: red;\n//   3 | }\n```\n\n#### Synchronous Error Example\n\n```js\nlet processor = (root) => {\n    root.walkClasses((classNode) => {\n        if (/.*[-_]/.test(classNode.value)) {\n            let msg = \"classes may not have underscores or dashes in them\";\n            throw root.error(msg, {\n                index: classNode.sourceIndex,\n                word: classNode.value\n            });\n        }\n    });\n};\n\nconst postcss = require(\"postcss\");\nconst parser = require(\"postcss-selector-parser\");\nconst selectorProcessor = parser(processor);\nconst plugin = postcss.plugin('classValidator', (options) => {\n    return (root) => {\n        root.walkRules(rule => {\n            selectorProcessor.processSync(rule);\n        });\n    };\n});\npostcss(plugin()).process(`\n.foo-bar {\n  color: red;\n}\n`.trim(), {from: 'test.css'}).catch((e) => console.error(e.toString()));\n\n// CssSyntaxError: classValidator: ./test.css:1:5: classes may not have underscores or dashes in them\n//\n// > 1 | .foo-bar {\n//     |     ^\n//   2 |   color: red;\n//   3 | }\n```",
      "metadata": {}
    },
    "architecture": {
      "reference": "architecture",
      "route": "architecture",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss\\docs\\architecture.md",
      "title": "(untitled)",
      "contents": [
        "<h2 id=\"postcss-architecture\">PostCSS Architecture</h2>\n<p>General overview of the PostCSS architecture.\nIt can be useful for everyone who wishes to contribute to the core or develop a better understanding of the tool.</p>\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#workflow\">Workflow</a></li>\n<li><a href=\"#core-structures\">Core Structures</a><ul>\n<li><a href=\"#tokenizer--libtokenizees6-\">Tokenizer</a></li>\n<li><a href=\"#parser--libparsees6-libparseres6-\">Parser</a></li>\n<li><a href=\"#processor--libprocessores6-\">Processor</a></li>\n<li><a href=\"#stringifier--libstringifyes6-libstringifieres6-\">Stringifier</a></li>\n</ul>\n</li>\n<li><a href=\"#api-reference\">API</a></li>\n</ul>\n<h3 id=\"overview\">Overview</h3>\n<blockquote>\n<p>This section describes ideas lying behind PostCSS</p>\n</blockquote>\n<p>Before diving deeper into the development of PostCSS let&#39;s briefly describe what is PostCSS and what is not.</p>\n<p><strong>PostCSS</strong></p>\n<ul>\n<li><p><em>is <strong>NOT</strong> a style preprocessor like <code>Sass</code> or <code>Less</code>.</em></p>\n<p>  It does not define a custom syntax and semantics, it&#39;s not actually a language.\n  PostCSS works with CSS and can be easily integrated with the tools described above. That being said any valid CSS can be processed by PostCSS.</p>\n</li>\n<li><p><em>is a tool for CSS syntax transformations</em></p>\n<p>  It allows you to define custom CSS like syntax that could be understandable and transformed by plugins. That being said PostCSS is not strictly about CSS spec but about syntax definition manner of CSS. In such a way you can define custom syntax constructs like at-rule, that could be very helpful for tools build around PostCSS. PostCSS plays the role of a framework for building outstanding tools for CSS manipulations.</p>\n</li>\n<li><p><em>is a big player in CSS ecosystem</em></p>\n<p>  A Large amount of lovely tools like <code>Autoprefixer</code>, <code>Stylelint</code>, <code>CSSnano</code> were built on PostCSS ecosystem. There is a big chance that you already use it implicitly, just check your <code>node_modules</code> :smiley:</p>\n</li>\n</ul>\n<h3 id=\"workflow\">Workflow</h3>\n<p>This is a high-level overview of the whole PostCSS workflow</p>\n<p><img width=\"300\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/PostCSS_scheme.svg/512px-PostCSS_scheme.svg.png\" alt=\"workflow\"></p>\n<p>As you can see from the diagram above, PostCSS architecture is pretty straightforward but some parts of it could be misunderstood.</p>\n<p>You can see a part called <em>Parser</em>, this construct will be described in details later on, just for now think about it as a structure that can understand your CSS like syntax and create an object representation of it.</p>\n<p>That being said, there are few ways to write a parser.</p>\n<ul>\n<li><p><em>Write a single file with string to AST transformation</em></p>\n<p> This method is quite popular, for example, the <a href=\"https://github.com/reworkcss/css/blob/master/lib/parse/index.js\">Rework analyzer</a> was written in this style. But with a large code base, the code becomes hard to read and pretty slow.</p>\n</li>\n<li><p><em>Split it into lexical analysis/parsing steps (source string → tokens → AST)</em></p>\n<p> This is the way of how we do it in PostCSS and also the most popular one.\n A lot of parsers like <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\"><code>@babel/parser</code> (parser behind Babel)</a>, <a href=\"https://github.com/csstree/csstree\"><code>CSSTree</code></a> were written in such way.\n The main reasons to separate tokenization from parsing steps are performance and abstracting complexity.</p>\n</li>\n</ul>\n<p>Let think about why the second way is better for our needs.</p>\n<p>First of all, because string to tokens step takes more time than parsing step. We operate on large source string and process it char by char, this is why it is very inefficient operation in terms of performance and we should perform it only once.</p>\n<p>But from other side tokens to AST transformation is logically more complex so with such separation we could write very fast tokenizer (but from this comes sometimes hard to read code) and easy to read (but slow) parser.</p>\n<p>Summing it up splitting into two steps improve performance and code readability.</p>\n<p>So now let&#39;s look more closely on structures that play the main role in PostCSS workflow.</p>\n<h3 id=\"core-structures\">Core Structures</h3>\n<ul>\n<li><h4 id=\"tokenizer-lib-tokenize-es6-\">Tokenizer ( <a href=\"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6\">lib/tokenize.es6</a> )</h4>\n<p> Tokenizer (aka Lexer) plays important role in syntax analysis.</p>\n<p> It accepts CSS string and returns a list of tokens.</p>\n<p> Token is a simple structure that describes some part of syntax like <code>at-rule</code>, <code>comment</code> or <code>word</code>. It can also contain positional information for more descriptive errors.</p>\n<p> For example, if we consider following CSS</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css\"><span class=\"meta selector css\"><span>&nbsp;</span><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>className</span></span><span>&nbsp;</span></span><span class=\"meta property-list css\"><span class=\"punctuation section property-list begin css\"><span>{</span></span><span>&nbsp;</span><span class=\"meta property-name css\"><span class=\"support type property-name css\"><span>color</span></span></span><span class=\"meta property-value css\"><span class=\"punctuation separator key-value css\"><span>:</span></span><span>&nbsp;</span><span class=\"constant other color rgb-value css\"><span class=\"punctuation definition constant css\"><span>#</span></span><span>FFF</span></span><span class=\"punctuation terminator rule css\"><span>;</span></span></span><span>&nbsp;</span><span class=\"punctuation section property-list end css\"><span>}</span></span></span></span></div></pre><p> corresponding tokens from PostCSS will be</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>word</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>.className</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>10</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>space</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>{</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>{</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>12</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>space</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>word</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>color</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>14</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>18</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>:</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>:</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>19</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>space</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>word</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>#FFF</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>21</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>23</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>24</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>space</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>&nbsp;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>}</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>}</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>26</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div></pre><p> As you can see from the example above a single token represented as a list and also <code>space</code> token doesn&#39;t have positional information.</p>\n<p> Let&#39;s look more closely on single token like <code>word</code>. As it was said each token represented as a list and follow such pattern.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>token</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;represents&nbsp;token&nbsp;type</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>word</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;represents&nbsp;matched&nbsp;word</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.className</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;This&nbsp;two&nbsp;numbers&nbsp;represent&nbsp;start&nbsp;position&nbsp;of&nbsp;token.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;It&nbsp;is&nbsp;optional&nbsp;value&nbsp;as&nbsp;we&nbsp;saw&nbsp;in&nbsp;the&nbsp;example&nbsp;above,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;tokens&nbsp;like&nbsp;`space`&nbsp;don&#39;t&nbsp;have&nbsp;such&nbsp;information.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Here&nbsp;the&nbsp;first&nbsp;number&nbsp;is&nbsp;line&nbsp;number&nbsp;and&nbsp;the&nbsp;second&nbsp;one&nbsp;is&nbsp;corresponding&nbsp;column.</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Next&nbsp;two&nbsp;numbers&nbsp;also&nbsp;optional&nbsp;and&nbsp;represent&nbsp;end&nbsp;position&nbsp;for&nbsp;multichar&nbsp;tokens&nbsp;like&nbsp;this&nbsp;one.&nbsp;Numbers&nbsp;follow&nbsp;same&nbsp;rule&nbsp;as&nbsp;was&nbsp;described&nbsp;above</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"constant numeric decimal js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal js\"><span>10</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;</span><span class=\"meta brace square js\"><span>]</span></span></span></div></pre><p>There are many patterns how tokenization could be done, PostCSS motto is performance and simplicity. Tokenization is a complex computing operation and takes a large amount of syntax analysis time ( ~90% ), that why PostCSS&#39; Tokenizer looks dirty but it was optimized for speed. Any high-level constructs like classes could dramatically slow down tokenizer.</p>\n<p> PostCSS&#39; Tokenizer uses some sort of streaming/chaining API where you expose <a href=\"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6#L48-L308\"><code>nextToken()</code></a> method to Parser. In this manner, we provide a clean interface for Parser and reduce memory usage by storing only a few tokens and not the whole list of tokens.</p>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"parser-lib-parse-es6-lib-parser-es6-\">Parser ( <a href=\"https://github.com/postcss/postcss/blob/master/lib/parse.es6\">lib/parse.es6</a>, <a href=\"https://github.com/postcss/postcss/blob/master/lib/parser.es6\">lib/parser.es6</a> )</h4>\n<p>  Parser is the main structure responsible for <a href=\"https://en.wikipedia.org/wiki/Parsing\">syntax analysis</a> of incoming CSS. Parser produces a structure called <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract Syntax Tree (AST)</a> that could then be transformed by plugins later on.</p>\n<p>  Parser works in common with Tokenizer and operates over tokens, not source string, as it would be a very inefficient operation.</p>\n<p>  It uses mostly <code>nextToken</code> and <code>back</code> methods provided by Tokenizer for obtaining single or multiple tokens and then construct part of AST called <code>Node</code>.</p>\n<p>  There are multiple Node types that PostCSS could produce but all of them inherit from base Node <a href=\"https://github.com/postcss/postcss/blob/master/lib/node.es6#L34\">class</a>.</p>\n</li>\n<li><h4 id=\"processor-lib-processor-es6-\">Processor ( <a href=\"https://github.com/postcss/postcss/blob/master/lib/processor.es6\">lib/processor.es6</a> )</h4>\n<p>  Processor is a very plain structure that initializes plugins and runs syntax transformations. Plugin is just a function registered with <a href=\"https://github.com/postcss/postcss/blob/master/lib/postcss.es6#L109\">postcss.plugin</a> call.</p>\n<p>  It exposes only a few public API methods. Description of them could be found on <a href=\"http://api.postcss.org/Processor.html\">api.postcss.org/Processor</a></p>\n</li>\n<li><h4 id=\"stringifier-lib-stringify-es6-lib-stringifier-es6-\">Stringifier ( <a href=\"https://github.com/postcss/postcss/blob/master/lib/stringify.es6\">lib/stringify.es6</a>, <a href=\"https://github.com/postcss/postcss/blob/master/lib/stringifier.es6\">lib/stringifier.es6</a> )</h4>\n<p>  Stringifier is a base class that translates modified AST to pure CSS string. Stringifier traverses AST starting from provided Node and generates a raw string representation of it calling corresponding methods.</p>\n<p>  The most essential method is <a href=\"https://github.com/postcss/postcss/blob/master/lib/stringifier.es6#L25-L27\"><code>Stringifier.stringify</code></a>\n  that accepts initial Node and semicolon indicator.\n  You can learn more by checking <a href=\"https://github.com/postcss/postcss/blob/master/lib/stringifier.es6\">stringifier.es6</a></p>\n</li>\n</ul>\n<h3 id=\"api-reference\">API Reference</h3>\n<p>More descriptive API documentation could be found <a href=\"http://api.postcss.org/\">here</a></p>\n"
      ],
      "contentsRaw": "## PostCSS Architecture\n\nGeneral overview of the PostCSS architecture.\nIt can be useful for everyone who wishes to contribute to the core or develop a better understanding of the tool.\n\n**Table of Contents**\n\n- [Overview](#overview)\n- [Workflow](#workflow)\n- [Core Structures](#core-structures)\n    * [Tokenizer](#tokenizer--libtokenizees6-)\n    * [Parser](#parser--libparsees6-libparseres6-)\n    * [Processor](#processor--libprocessores6-)\n    * [Stringifier](#stringifier--libstringifyes6-libstringifieres6-)\n- [API](#api-reference)\n\n### Overview\n\n> This section describes ideas lying behind PostCSS\n\nBefore diving deeper into the development of PostCSS let's briefly describe what is PostCSS and what is not.\n\n**PostCSS**\n\n- *is **NOT** a style preprocessor like `Sass` or `Less`.*\n\n    It does not define a custom syntax and semantics, it's not actually a language.\n    PostCSS works with CSS and can be easily integrated with the tools described above. That being said any valid CSS can be processed by PostCSS.\n\n- *is a tool for CSS syntax transformations*\n\n    It allows you to define custom CSS like syntax that could be understandable and transformed by plugins. That being said PostCSS is not strictly about CSS spec but about syntax definition manner of CSS. In such a way you can define custom syntax constructs like at-rule, that could be very helpful for tools build around PostCSS. PostCSS plays the role of a framework for building outstanding tools for CSS manipulations.\n\n- *is a big player in CSS ecosystem*\n\n    A Large amount of lovely tools like `Autoprefixer`, `Stylelint`, `CSSnano` were built on PostCSS ecosystem. There is a big chance that you already use it implicitly, just check your `node_modules` :smiley:\n\n### Workflow\n\nThis is a high-level overview of the whole PostCSS workflow\n\n<img width=\"300\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/PostCSS_scheme.svg/512px-PostCSS_scheme.svg.png\" alt=\"workflow\">\n\nAs you can see from the diagram above, PostCSS architecture is pretty straightforward but some parts of it could be misunderstood.\n\nYou can see a part called *Parser*, this construct will be described in details later on, just for now think about it as a structure that can understand your CSS like syntax and create an object representation of it.\n\nThat being said, there are few ways to write a parser.\n\n - *Write a single file with string to AST transformation*\n\n    This method is quite popular, for example, the [Rework analyzer](https://github.com/reworkcss/css/blob/master/lib/parse/index.js) was written in this style. But with a large code base, the code becomes hard to read and pretty slow.\n\n - *Split it into lexical analysis/parsing steps (source string → tokens → AST)*\n\n    This is the way of how we do it in PostCSS and also the most popular one.\n    A lot of parsers like [`@babel/parser` (parser behind Babel)](https://github.com/babel/babel/tree/master/packages/babel-parser), [`CSSTree`](https://github.com/csstree/csstree) were written in such way.\n    The main reasons to separate tokenization from parsing steps are performance and abstracting complexity.\n\nLet think about why the second way is better for our needs.\n\nFirst of all, because string to tokens step takes more time than parsing step. We operate on large source string and process it char by char, this is why it is very inefficient operation in terms of performance and we should perform it only once.\n\nBut from other side tokens to AST transformation is logically more complex so with such separation we could write very fast tokenizer (but from this comes sometimes hard to read code) and easy to read (but slow) parser.\n\nSumming it up splitting into two steps improve performance and code readability.\n\nSo now let's look more closely on structures that play the main role in PostCSS workflow.\n\n### Core Structures\n\n - #### Tokenizer ( [lib/tokenize.es6](https://github.com/postcss/postcss/blob/master/lib/tokenize.es6) )\n\n    Tokenizer (aka Lexer) plays important role in syntax analysis.\n\n    It accepts CSS string and returns a list of tokens.\n\n    Token is a simple structure that describes some part of syntax like `at-rule`, `comment` or `word`. It can also contain positional information for more descriptive errors.\n\n    For example, if we consider following CSS\n\n    ```css\n    .className { color: #FFF; }\n    ```\n\n    corresponding tokens from PostCSS will be\n    ```js\n    [\n        [\"word\", \".className\", 1, 1, 1, 10]\n        [\"space\", \" \"]\n        [\"{\", \"{\", 1, 12]\n        [\"space\", \" \"]\n        [\"word\", \"color\", 1, 14, 1, 18]\n        [\":\", \":\", 1, 19]\n        [\"space\", \" \"]\n        [\"word\", \"#FFF\" , 1, 21, 1, 23]\n        [\";\", \";\", 1, 24]\n        [\"space\", \" \"]\n        [\"}\", \"}\", 1, 26]\n    ]\n    ```\n\n    As you can see from the example above a single token represented as a list and also `space` token doesn't have positional information.\n\n    Let's look more closely on single token like `word`. As it was said each token represented as a list and follow such pattern.\n\n    ```js\n    const token = [\n         // represents token type\n        'word',\n\n        // represents matched word\n        '.className',\n\n        // This two numbers represent start position of token.\n        // It is optional value as we saw in the example above,\n        // tokens like `space` don't have such information.\n\n        // Here the first number is line number and the second one is corresponding column.\n        1, 1,\n\n        // Next two numbers also optional and represent end position for multichar tokens like this one. Numbers follow same rule as was described above\n        1, 10\n    ]\n    ```\n   There are many patterns how tokenization could be done, PostCSS motto is performance and simplicity. Tokenization is a complex computing operation and takes a large amount of syntax analysis time ( ~90% ), that why PostCSS' Tokenizer looks dirty but it was optimized for speed. Any high-level constructs like classes could dramatically slow down tokenizer.\n\n    PostCSS' Tokenizer uses some sort of streaming/chaining API where you expose [`nextToken()`](https://github.com/postcss/postcss/blob/master/lib/tokenize.es6#L48-L308) method to Parser. In this manner, we provide a clean interface for Parser and reduce memory usage by storing only a few tokens and not the whole list of tokens.\n\n- #### Parser ( [lib/parse.es6](https://github.com/postcss/postcss/blob/master/lib/parse.es6), [lib/parser.es6](https://github.com/postcss/postcss/blob/master/lib/parser.es6) )\n\n    Parser is the main structure responsible for [syntax analysis](https://en.wikipedia.org/wiki/Parsing) of incoming CSS. Parser produces a structure called [Abstract Syntax Tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) that could then be transformed by plugins later on.\n\n    Parser works in common with Tokenizer and operates over tokens, not source string, as it would be a very inefficient operation.\n\n    It uses mostly `nextToken` and `back` methods provided by Tokenizer for obtaining single or multiple tokens and then construct part of AST called `Node`.\n\n    There are multiple Node types that PostCSS could produce but all of them inherit from base Node [class](https://github.com/postcss/postcss/blob/master/lib/node.es6#L34).\n\n- #### Processor ( [lib/processor.es6](https://github.com/postcss/postcss/blob/master/lib/processor.es6) )\n\n    Processor is a very plain structure that initializes plugins and runs syntax transformations. Plugin is just a function registered with [postcss.plugin](https://github.com/postcss/postcss/blob/master/lib/postcss.es6#L109) call.\n\n    It exposes only a few public API methods. Description of them could be found on [api.postcss.org/Processor](http://api.postcss.org/Processor.html)\n\n- #### Stringifier ( [lib/stringify.es6](https://github.com/postcss/postcss/blob/master/lib/stringify.es6), [lib/stringifier.es6](https://github.com/postcss/postcss/blob/master/lib/stringifier.es6) )\n\n    Stringifier is a base class that translates modified AST to pure CSS string. Stringifier traverses AST starting from provided Node and generates a raw string representation of it calling corresponding methods.\n\n    The most essential method is [`Stringifier.stringify`](https://github.com/postcss/postcss/blob/master/lib/stringifier.es6#L25-L27)\n    that accepts initial Node and semicolon indicator.\n    You can learn more by checking [stringifier.es6](https://github.com/postcss/postcss/blob/master/lib/stringifier.es6)\n\n### API Reference\n\nMore descriptive API documentation could be found [here](http://api.postcss.org/)",
      "metadata": {}
    },
    "plugin": {
      "reference": "plugin",
      "route": "plugin",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss\\docs\\guidelines\\plugin.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"postcss-plugin-guidelines\">PostCSS Plugin Guidelines</h1>\n<p>A PostCSS plugin is a function that receives and, usually,\ntransforms a CSS AST from the PostCSS parser.</p>\n<p>The rules below are <em>mandatory</em> for all PostCSS plugins.</p>\n<p>See also <a href=\"http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/\">ClojureWerkz’s recommendations</a> for open source projects.</p>\n<h2 id=\"1-api\">1. API</h2>\n<h3 id=\"1-1-clear-name-with-postcss-prefix\">1.1 Clear name with <code>postcss-</code> prefix</h3>\n<p>The plugin’s purpose should be clear just by reading its name.\nIf you wrote a transpiler for CSS 4 Custom Media, <code>postcss-custom-media</code>\nwould be a good name. If you wrote a plugin to support mixins,\n<code>postcss-mixins</code> would be a good name.</p>\n<p>The prefix <code>postcss-</code> shows that the plugin is part of the PostCSS ecosystem.</p>\n<p>This rule is not mandatory for plugins that can run as independent tools,\nwithout the user necessarily knowing that it is powered by\nPostCSS — for example, <a href=\"https://rtlcss.com/\">RTLCSS</a> and <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a>.</p>\n<h3 id=\"1-2-do-one-thing-and-do-it-well\">1.2. Do one thing, and do it well</h3>\n<p>Do not create multitool plugins. Several small, one-purpose plugins bundled into\na plugin pack is usually a better solution.</p>\n<p>For example, <a href=\"https://preset-env.cssdb.org/\"><code>postcss-preset-env</code></a> contains many small plugins,\none for each W3C specification. And <a href=\"https://github.com/ben-eb/cssnano\"><code>cssnano</code></a> contains a separate plugin\nfor each of its optimization.</p>\n<h3 id=\"1-3-do-not-use-mixins\">1.3. Do not use mixins</h3>\n<p>Preprocessors libraries like Compass provide an API with mixins.</p>\n<p>PostCSS plugins are different.\nA plugin cannot be just a set of mixins for <a href=\"https://github.com/postcss/postcss-mixins\"><code>postcss-mixins</code></a>.</p>\n<p>To achieve your goal, consider transforming valid CSS\nor using custom at-rules and custom properties.</p>\n<h3 id=\"1-4-create-plugin-by-postcss-plugin\">1.4. Create plugin by <code>postcss.plugin</code></h3>\n<p>By wrapping your function in this method,\nyou are hooking into a common plugin API:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"support variable js\"><span>module</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>exports</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>plugin-name</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>opts</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>result</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;Plugin&nbsp;code</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><h2 id=\"2-processing\">2. Processing</h2>\n<h3 id=\"2-1-plugin-must-be-tested\">2.1. Plugin must be tested</h3>\n<p>A CI service like <a href=\"https://travis-ci.org/\">Travis</a> is also recommended for testing code in\ndifferent environments. You should test in (at least) Node.js <a href=\"https://github.com/nodejs/LTS\">active LTS</a> and current stable version.</p>\n<h3 id=\"2-2-use-asynchronous-methods-whenever-possible\">2.2. Use asynchronous methods whenever possible</h3>\n<p>For example, use <code>fs.writeFile</code> instead of <code>fs.writeFileSync</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>postcss</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>plugin</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>plugin-sprite</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>opts</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>root</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>result</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Promise</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>resolve</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter function js\"><span>reject</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>sprite</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>makeSprite</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>fs</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>writeFile</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>opts</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>file</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;sprite</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>err</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span>err</span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>reject</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>err</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>resolve</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><h3 id=\"2-3-set-node-source-for-new-nodes\">2.3. Set <code>node.source</code> for new nodes</h3>\n<p>Every node must have a relevant <code>source</code> so PostCSS can generate\nan accurate source map.</p>\n<p>So if you add a new declaration based on some existing declaration, you should\nclone the existing declaration in order to save that original <code>source</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>needPrefix</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>cloneBefore</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;prop</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>-webkit-</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p>You can also set <code>source</code> directly, copying from some existing node:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>animation</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>keyframe</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>createAnimationByName</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>value</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>keyframes</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>source</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>source</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>root</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>append</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>keyframes</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"2-4-use-only-the-public-postcss-api\">2.4. Use only the public PostCSS API</h3>\n<p>PostCSS plugins must not rely on undocumented properties or methods,\nwhich may be subject to change in any minor release. The public API\nis described in <a href=\"http://api.postcss.org/\">API docs</a>.</p>\n<h2 id=\"3-errors\">3. Errors</h2>\n<h3 id=\"3-1-use-node-error-on-css-relevant-errors\">3.1. Use <code>node.error</code> on CSS relevant errors</h3>\n<p>If you have an error because of input CSS (like an unknown name\nin a mixin plugin) you should use <code>node.error</code> to create an error\nthat includes source position:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"keyword operator typeof js\"><span>typeof</span></span><span>&nbsp;mixins</span><span class=\"meta brace square js\"><span>[</span></span><span>name</span><span class=\"meta brace square js\"><span>]</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>undefined</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>throw</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>error</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>Unknown&nbsp;mixin&nbsp;</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;name</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;plugin</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>postcss-mixins</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h3 id=\"3-2-use-result-warn-for-warnings\">3.2. Use <code>result.warn</code> for warnings</h3>\n<p>Do not print warnings with <code>console.log</code> or <code>console.warn</code>,\nbecause some PostCSS runner may not allow console output.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>outdated</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>result</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>warn</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>decl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>prop</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>&nbsp;is&nbsp;outdated</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;node</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;decl&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p>If CSS input is a source of the warning, the plugin must set the <code>node</code> option.</p>\n<h2 id=\"4-documentation\">4. Documentation</h2>\n<h3 id=\"4-1-document-your-plugin-in-english\">4.1. Document your plugin in English</h3>\n<p>PostCSS plugins must have their <code>README.md</code> wrote in English. Do not be afraid\nof your English skills, as the open source community will fix your errors.</p>\n<p>Of course, you are welcome to write documentation in other languages;\njust name them appropriately (e.g. <code>README.ja.md</code>).</p>\n<h3 id=\"4-2-include-input-and-output-examples\">4.2. Include input and output examples</h3>\n<p>The plugin&#39;s <code>README.md</code> must contain example input and output CSS.\nA clear example is the best way to describe how your plugin works.</p>\n<p>The first section of the <code>README.md</code> is a good place to put examples.\nSee <a href=\"https://github.com/iamvdo/postcss-opacity\">postcss-opacity</a> for an example.</p>\n<p>Of course, this guideline does not apply if your plugin does not\ntransform the CSS.</p>\n<h3 id=\"4-3-maintain-a-changelog\">4.3. Maintain a changelog</h3>\n<p>PostCSS plugins must describe the changes of all their releases\nin a separate file, such as <code>CHANGELOG.md</code>, <code>History.md</code>, or <a href=\"https://help.github.com/articles/creating-releases/\">GitHub Releases</a>.\nVisit <a href=\"http://keepachangelog.com/\">Keep A Changelog</a> for more information about how to write one of these.</p>\n<p>Of course, you should be using <a href=\"http://semver.org/\">SemVer</a>.</p>\n<h3 id=\"4-4-include-postcss-plugin-keyword-in-package-json\">4.4. Include <code>postcss-plugin</code> keyword in <code>package.json</code></h3>\n<p>PostCSS plugins written for npm must have the <code>postcss-plugin</code> keyword\nin their <code>package.json</code>. This special keyword will be useful for feedback about\nthe PostCSS ecosystem.</p>\n<p>For packages not published to npm, this is not mandatory, but is recommended\nif the package format can contain keywords.</p>\n"
      ],
      "contentsRaw": "# PostCSS Plugin Guidelines\n\nA PostCSS plugin is a function that receives and, usually,\ntransforms a CSS AST from the PostCSS parser.\n\nThe rules below are *mandatory* for all PostCSS plugins.\n\nSee also [ClojureWerkz’s recommendations] for open source projects.\n\n[ClojureWerkz’s recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/\n\n## 1. API\n\n### 1.1 Clear name with `postcss-` prefix\n\nThe plugin’s purpose should be clear just by reading its name.\nIf you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`\nwould be a good name. If you wrote a plugin to support mixins,\n`postcss-mixins` would be a good name.\n\nThe prefix `postcss-` shows that the plugin is part of the PostCSS ecosystem.\n\nThis rule is not mandatory for plugins that can run as independent tools,\nwithout the user necessarily knowing that it is powered by\nPostCSS — for example, [RTLCSS] and [Autoprefixer].\n\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n[RTLCSS]:       https://rtlcss.com/\n\n### 1.2. Do one thing, and do it well\n\nDo not create multitool plugins. Several small, one-purpose plugins bundled into\na plugin pack is usually a better solution.\n\nFor example, [`postcss-preset-env`] contains many small plugins,\none for each W3C specification. And [`cssnano`] contains a separate plugin\nfor each of its optimization.\n\n[`postcss-preset-env`]: https://preset-env.cssdb.org/\n[`cssnano`]:            https://github.com/ben-eb/cssnano\n\n### 1.3. Do not use mixins\n\nPreprocessors libraries like Compass provide an API with mixins.\n\nPostCSS plugins are different.\nA plugin cannot be just a set of mixins for [`postcss-mixins`].\n\nTo achieve your goal, consider transforming valid CSS\nor using custom at-rules and custom properties.\n\n[`postcss-mixins`]: https://github.com/postcss/postcss-mixins\n\n### 1.4. Create plugin by `postcss.plugin`\n\nBy wrapping your function in this method,\nyou are hooking into a common plugin API:\n\n```js\nmodule.exports = postcss.plugin('plugin-name', opts => {\n  return (root, result) => {\n    // Plugin code\n  }\n})\n```\n\n## 2. Processing\n\n### 2.1. Plugin must be tested\n\nA CI service like [Travis] is also recommended for testing code in\ndifferent environments. You should test in (at least) Node.js [active LTS](https://github.com/nodejs/LTS) and current stable version.\n\n[Travis]: https://travis-ci.org/\n\n### 2.2. Use asynchronous methods whenever possible\n\nFor example, use `fs.writeFile` instead of `fs.writeFileSync`:\n\n```js\npostcss.plugin('plugin-sprite', opts => {\n  return (root, result) => {\n\n    return new Promise((resolve, reject) => {\n      const sprite = makeSprite()\n      fs.writeFile(opts.file, sprite, err => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n\n  }\n})\n```\n\n### 2.3. Set `node.source` for new nodes\n\nEvery node must have a relevant `source` so PostCSS can generate\nan accurate source map.\n\nSo if you add a new declaration based on some existing declaration, you should\nclone the existing declaration in order to save that original `source`.\n\n```js\nif (needPrefix(decl.prop)) {\n  decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n}\n```\n\nYou can also set `source` directly, copying from some existing node:\n\n```js\nif (decl.prop === 'animation') {\n  const keyframe = createAnimationByName(decl.value)\n  keyframes.source = decl.source\n  decl.root().append(keyframes)\n}\n```\n\n### 2.4. Use only the public PostCSS API\n\nPostCSS plugins must not rely on undocumented properties or methods,\nwhich may be subject to change in any minor release. The public API\nis described in [API docs].\n\n[API docs]: http://api.postcss.org/\n\n## 3. Errors\n\n### 3.1. Use `node.error` on CSS relevant errors\n\nIf you have an error because of input CSS (like an unknown name\nin a mixin plugin) you should use `node.error` to create an error\nthat includes source position:\n\n```js\nif (typeof mixins[name] === 'undefined') {\n  throw decl.error('Unknown mixin ' + name, { plugin: 'postcss-mixins' })\n}\n```\n\n### 3.2. Use `result.warn` for warnings\n\nDo not print warnings with `console.log` or `console.warn`,\nbecause some PostCSS runner may not allow console output.\n\n```js\nif (outdated(decl.prop)) {\n  result.warn(decl.prop + ' is outdated', { node: decl })\n}\n```\n\nIf CSS input is a source of the warning, the plugin must set the `node` option.\n\n## 4. Documentation\n\n### 4.1. Document your plugin in English\n\nPostCSS plugins must have their `README.md` wrote in English. Do not be afraid\nof your English skills, as the open source community will fix your errors.\n\nOf course, you are welcome to write documentation in other languages;\njust name them appropriately (e.g. `README.ja.md`).\n\n### 4.2. Include input and output examples\n\nThe plugin's `README.md` must contain example input and output CSS.\nA clear example is the best way to describe how your plugin works.\n\nThe first section of the `README.md` is a good place to put examples.\nSee [postcss-opacity](https://github.com/iamvdo/postcss-opacity) for an example.\n\nOf course, this guideline does not apply if your plugin does not\ntransform the CSS.\n\n### 4.3. Maintain a changelog\n\nPostCSS plugins must describe the changes of all their releases\nin a separate file, such as `CHANGELOG.md`, `History.md`, or [GitHub Releases].\nVisit [Keep A Changelog] for more information about how to write one of these.\n\nOf course, you should be using [SemVer].\n\n[Keep A Changelog]: http://keepachangelog.com/\n[GitHub Releases]:  https://help.github.com/articles/creating-releases/\n[SemVer]:           http://semver.org/\n\n### 4.4. Include `postcss-plugin` keyword in `package.json`\n\nPostCSS plugins written for npm must have the `postcss-plugin` keyword\nin their `package.json`. This special keyword will be useful for feedback about\nthe PostCSS ecosystem.\n\nFor packages not published to npm, this is not mandatory, but is recommended\nif the package format can contain keywords.",
      "metadata": {}
    },
    "runner": {
      "reference": "runner",
      "route": "runner",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss\\docs\\guidelines\\runner.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"postcss-runner-guidelines\">PostCSS Runner Guidelines</h1>\n<p>A PostCSS runner is a tool that processes CSS through a user-defined list\nof plugins; for example, <a href=\"https://github.com/postcss/postcss-cli\"><code>postcss-cli</code></a> or <a href=\"https://github.com/w0rm/gulp-postcss\"><code>gulp‑postcss</code></a>.\nThese rules are mandatory for any such runners.</p>\n<p>For single-plugin tools, like <a href=\"https://github.com/sindresorhus/gulp-autoprefixer\"><code>gulp-autoprefixer</code></a>,\nthese rules are not mandatory but are highly recommended.</p>\n<p>See also <a href=\"http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/\">ClojureWerkz’s recommendations</a> for open source projects.</p>\n<h2 id=\"1-api\">1. API</h2>\n<h3 id=\"1-1-accept-functions-in-plugin-parameters\">1.1. Accept functions in plugin parameters</h3>\n<p>If your runner uses a config file, it must be written in JavaScript, so that\nit can support plugins which accept a function, such as <a href=\"https://github.com/borodean/postcss-assets\"><code>postcss-assets</code></a>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"support variable js\"><span>module</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>exports</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta function-call js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>postcss-assets</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function json js\"><span class=\"entity name function js\"><span>cachebuster</span></span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"storage type function js\"><span>function</span></span><span>&nbsp;</span><span class=\"meta parameters js\"><span class=\"punctuation definition parameters begin bracket round js\"><span>(</span></span><span class=\"variable parameter function js\"><span>file</span></span><span class=\"punctuation definition parameters end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>return</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>fs</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>statSync</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>file</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>mtime</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>getTime</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>toString</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>16</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>]</span></span></span></div></pre><h2 id=\"2-processing\">2. Processing</h2>\n<h3 id=\"2-1-set-from-and-to-processing-options\">2.1. Set <code>from</code> and <code>to</code> processing options</h3>\n<p>To ensure that PostCSS generates source maps and displays better syntax errors,\nrunners must specify the <code>from</code> and <code>to</code> options. If your runner does not handle\nwriting to disk (for example, a gulp transform), you should set both options\nto point to the same file:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;from</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>file</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>path</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;to</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>file</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>path</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><h3 id=\"2-2-use-only-the-asynchronous-api\">2.2. Use only the asynchronous API</h3>\n<p>PostCSS runners must use only the asynchronous API.\nThe synchronous API is provided only for debugging, is slower,\nand can’t work with asynchronous plugins.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>opts</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>then</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>result</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;processing&nbsp;is&nbsp;finished</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h3 id=\"2-3-use-only-the-public-postcss-api\">2.3. Use only the public PostCSS API</h3>\n<p>PostCSS runners must not rely on undocumented properties or methods,\nwhich may be subject to change in any minor release. The public API\nis described in <a href=\"http://api.postcss.org/\">API docs</a>.</p>\n<h2 id=\"3-output\">3. Output</h2>\n<h3 id=\"3-1-don-t-show-js-stack-for-csssyntaxerror\">3.1. Don’t show JS stack for <code>CssSyntaxError</code></h3>\n<p>PostCSS runners must not show a stack trace for CSS syntax errors,\nas the runner can be used by developers who are not familiar with JavaScript.\nInstead, handle such errors gracefully:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>processor</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>opts</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>catch</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>error</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>error</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support variable property dom js\"><span>name</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>CssSyntaxError</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>stderr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>write</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>error</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>message</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>error</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>showSourceCode</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span>&nbsp;</span><span class=\"keyword control js\"><span>else</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>throw</span></span><span>&nbsp;error</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><h3 id=\"3-2-display-result-warnings-\">3.2. Display <code>result.warnings()</code></h3>\n<p>PostCSS runners must output warnings from <code>result.warnings()</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>result</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>warnings</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>forEach</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>warn</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"support variable js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>stderr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>write</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>warn</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>toString</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><p>See also <a href=\"https://github.com/davidtheclark/postcss-log-warnings\">postcss-log-warnings</a> and <a href=\"https://github.com/postcss/postcss-messages\">postcss-messages</a> plugins.</p>\n<h3 id=\"3-3-allow-the-user-to-write-source-maps-to-different-files\">3.3. Allow the user to write source maps to different files</h3>\n<p>PostCSS by default will inline source maps in the generated file; however,\nPostCSS runners must provide an option to save the source map in a different\nfile:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>result</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>map</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>fs</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>writeFile</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>opts</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>to</span></span><span>&nbsp;</span><span class=\"keyword operator js\"><span>+</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>.map</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>result</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>map</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>toString</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><h2 id=\"4-documentation\">4. Documentation</h2>\n<h3 id=\"4-1-document-your-runner-in-english\">4.1. Document your runner in English</h3>\n<p>PostCSS runners must have their <code>README.md</code> wrote in English. Do not be afraid\nof your English skills, as the open source community will fix your errors.</p>\n<p>Of course, you are welcome to write documentation in other languages;\njust name them appropriately (e.g. <code>README.ja.md</code>).</p>\n<h3 id=\"4-2-maintain-a-changelog\">4.2. Maintain a changelog</h3>\n<p>PostCSS runners must describe changes of all releases in a separate file,\nsuch as <code>ChangeLog.md</code>, <code>History.md</code>, or with <a href=\"https://help.github.com/articles/creating-releases/\">GitHub Releases</a>.\nVisit <a href=\"http://keepachangelog.com/\">Keep A Changelog</a> for more information on how to write one of these.</p>\n<p>Of course, you should use <a href=\"http://semver.org/\">SemVer</a>.</p>\n<h3 id=\"4-3-postcss-runner-keyword-in-package-json\">4.3. <code>postcss-runner</code> keyword in <code>package.json</code></h3>\n<p>PostCSS runners written for npm must have the <code>postcss-runner</code> keyword\nin their <code>package.json</code>. This special keyword will be useful for feedback about\nthe PostCSS ecosystem.</p>\n<p>For packages not published to npm, this is not mandatory, but recommended\nif the package format is allowed to contain keywords.</p>\n"
      ],
      "contentsRaw": "# PostCSS Runner Guidelines\n\nA PostCSS runner is a tool that processes CSS through a user-defined list\nof plugins; for example, [`postcss-cli`] or [`gulp‑postcss`].\nThese rules are mandatory for any such runners.\n\nFor single-plugin tools, like [`gulp-autoprefixer`],\nthese rules are not mandatory but are highly recommended.\n\nSee also [ClojureWerkz’s recommendations] for open source projects.\n\n[ClojureWerkz’s recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/\n[`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer\n[`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss\n[`postcss-cli`]:       https://github.com/postcss/postcss-cli\n\n## 1. API\n\n### 1.1. Accept functions in plugin parameters\n\nIf your runner uses a config file, it must be written in JavaScript, so that\nit can support plugins which accept a function, such as [`postcss-assets`]:\n\n```js\nmodule.exports = [\n  require('postcss-assets')({\n    cachebuster: function (file) {\n      return fs.statSync(file).mtime.getTime().toString(16)\n    }\n  })\n]\n```\n\n[`postcss-assets`]: https://github.com/borodean/postcss-assets\n\n## 2. Processing\n\n### 2.1. Set `from` and `to` processing options\n\nTo ensure that PostCSS generates source maps and displays better syntax errors,\nrunners must specify the `from` and `to` options. If your runner does not handle\nwriting to disk (for example, a gulp transform), you should set both options\nto point to the same file:\n\n```js\nprocessor.process({ from: file.path, to: file.path })\n```\n\n### 2.2. Use only the asynchronous API\n\nPostCSS runners must use only the asynchronous API.\nThe synchronous API is provided only for debugging, is slower,\nand can’t work with asynchronous plugins.\n\n```js\nprocessor.process(opts).then(result => {\n  // processing is finished\n});\n```\n\n### 2.3. Use only the public PostCSS API\n\nPostCSS runners must not rely on undocumented properties or methods,\nwhich may be subject to change in any minor release. The public API\nis described in [API docs].\n\n[API docs]: http://api.postcss.org/\n\n## 3. Output\n\n### 3.1. Don’t show JS stack for `CssSyntaxError`\n\nPostCSS runners must not show a stack trace for CSS syntax errors,\nas the runner can be used by developers who are not familiar with JavaScript.\nInstead, handle such errors gracefully:\n\n```js\nprocessor.process(opts).catch(error => {\n  if (error.name === 'CssSyntaxError') {\n    process.stderr.write(error.message + error.showSourceCode())\n  } else {\n    throw error\n  }\n})\n```\n\n### 3.2. Display `result.warnings()`\n\nPostCSS runners must output warnings from `result.warnings()`:\n\n```js\nresult.warnings().forEach(warn => {\n  process.stderr.write(warn.toString())\n})\n```\n\nSee also [postcss-log-warnings] and [postcss-messages] plugins.\n\n[postcss-log-warnings]: https://github.com/davidtheclark/postcss-log-warnings\n[postcss-messages]:     https://github.com/postcss/postcss-messages\n\n### 3.3. Allow the user to write source maps to different files\n\nPostCSS by default will inline source maps in the generated file; however,\nPostCSS runners must provide an option to save the source map in a different\nfile:\n\n```js\nif (result.map) {\n  fs.writeFile(opts.to + '.map', result.map.toString())\n}\n```\n\n## 4. Documentation\n\n### 4.1. Document your runner in English\n\nPostCSS runners must have their `README.md` wrote in English. Do not be afraid\nof your English skills, as the open source community will fix your errors.\n\nOf course, you are welcome to write documentation in other languages;\njust name them appropriately (e.g. `README.ja.md`).\n\n### 4.2. Maintain a changelog\n\nPostCSS runners must describe changes of all releases in a separate file,\nsuch as `ChangeLog.md`, `History.md`, or with [GitHub Releases].\nVisit [Keep A Changelog] for more information on how to write one of these.\n\nOf course, you should use [SemVer].\n\n[Keep A Changelog]: http://keepachangelog.com/\n[GitHub Releases]:  https://help.github.com/articles/creating-releases/\n[SemVer]:           http://semver.org/\n\n### 4.3. `postcss-runner` keyword in `package.json`\n\nPostCSS runners written for npm must have the `postcss-runner` keyword\nin their `package.json`. This special keyword will be useful for feedback about\nthe PostCSS ecosystem.\n\nFor packages not published to npm, this is not mandatory, but recommended\nif the package format is allowed to contain keywords.",
      "metadata": {}
    },
    "source-maps": {
      "reference": "source-maps",
      "route": "source-maps",
      "sourcePath": "react-json-blinkforms\\node_modules\\postcss\\docs\\source-maps.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"postcss-and-source-maps\">PostCSS and Source Maps</h1>\n<p>PostCSS has great <a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\">source maps</a> support. It can read and interpret maps\nfrom previous transformation steps, autodetect the format that you expect,\nand output both external and inline maps.</p>\n<p>To ensure that you generate an accurate source map, you must indicate the input\nand output CSS file paths — using the options <code>from</code> and <code>to</code>, respectively.</p>\n<p>To generate a new source map with the default options, simply set <code>map: true</code>.\nThis will generate an inline source map that contains the source content.\nIf you don’t want the map inlined, you can set <code>map.inline: false</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span>processor</span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>process</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>css</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;from</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>app.sass.css</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;to</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;&nbsp;&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>app.css</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;map</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&nbsp;inline</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false js\"><span>false</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>then</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"meta function arrow js\"><span class=\"meta parameters js\"><span class=\"variable parameter function js\"><span>result</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow js\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition function body begin bracket curly js\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>result</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>map</span></span><span>&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>=&gt;&nbsp;&#39;{&nbsp;&quot;version&quot;:3,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;file&quot;:&quot;app.css&quot;,</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sources&quot;:[&quot;app.sass&quot;],</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;mappings&quot;:&quot;AAAA,KAAI&quot;&nbsp;}&#39;</span></span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;</span><span class=\"punctuation definition function body end bracket curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span></span></div></pre><p>If PostCSS finds source maps from a previous transformation,\nit will automatically update that source map with the same options.</p>\n<h2 id=\"options\">Options</h2>\n<p>If you want more control over source map generation, you can define the <code>map</code>\noption as an object with the following parameters:</p>\n<ul>\n<li><p><code>inline</code> boolean: indicates that the source map should be embedded\nin the output CSS as a Base64-encoded comment. By default, it is <code>true</code>.\nBut if all previous maps are external, not inline, PostCSS will not embed\nthe map even if you do not set this option.</p>\n<p>If you have an inline source map, the <code>result.map</code> property will be empty,\nas the source map will be contained within the text of <code>result.css</code>.</p>\n</li>\n<li><p><code>prev</code> string, object, boolean or function: source map content from\na previous processing step (for example, Sass compilation).\nPostCSS will try to read the previous source map automatically\n(based on comments within the source CSS), but you can use this option\nto identify it manually. If desired, you can omit the previous map\nwith <code>prev: false</code>.</p>\n</li>\n<li><p><code>sourcesContent</code> boolean: indicates that PostCSS should set the origin\ncontent (for example, Sass source) of the source map. By default,\nit is <code>true</code>. But if all previous maps do not contain sources content,\nPostCSS will also leave it out even if you do not set this option.</p>\n</li>\n<li><p><code>annotation</code> boolean or string: indicates that PostCSS should add annotation\ncomments to the CSS. By default, PostCSS will always add a comment with a path\nto the source map. PostCSS will not add annotations to CSS files that\ndo not contain any comments.</p>\n<p>By default, PostCSS presumes that you want to save the source map as\n<code>opts.to + &#39;.map&#39;</code> and will use this path in the annotation comment.\nA different path can be set by providing a string value for <code>annotation</code>.</p>\n<p>If you have set <code>inline: true</code>, annotation cannot be disabled.</p>\n</li>\n<li><p><code>from</code> string: by default, PostCSS will set the <code>sources</code> property of the map\nto the value of the <code>from</code> option. If you want to override this behaviour, you\ncan use <code>map.from</code> to explicitly set the source map&#39;s <code>sources</code> property.\nPath should be absolute or relative from generated file\n(<code>to</code> option in <code>process()</code> method).</p>\n</li>\n</ul>\n"
      ],
      "contentsRaw": "# PostCSS and Source Maps\n\nPostCSS has great [source maps] support. It can read and interpret maps\nfrom previous transformation steps, autodetect the format that you expect,\nand output both external and inline maps.\n\nTo ensure that you generate an accurate source map, you must indicate the input\nand output CSS file paths — using the options `from` and `to`, respectively.\n\nTo generate a new source map with the default options, simply set `map: true`.\nThis will generate an inline source map that contains the source content.\nIf you don’t want the map inlined, you can set `map.inline: false`.\n\n```js\nprocessor\n  .process(css, {\n    from: 'app.sass.css',\n    to:   'app.css',\n    map: { inline: false }\n  })\n  .then(result => {\n      result.map //=> '{ \"version\":3,\n                 //      \"file\":\"app.css\",\n                 //      \"sources\":[\"app.sass\"],\n                 //       \"mappings\":\"AAAA,KAAI\" }'\n  })\n```\n\nIf PostCSS finds source maps from a previous transformation,\nit will automatically update that source map with the same options.\n\n## Options\n\nIf you want more control over source map generation, you can define the `map`\noption as an object with the following parameters:\n\n* `inline` boolean: indicates that the source map should be embedded\n  in the output CSS as a Base64-encoded comment. By default, it is `true`.\n  But if all previous maps are external, not inline, PostCSS will not embed\n  the map even if you do not set this option.\n\n  If you have an inline source map, the `result.map` property will be empty,\n  as the source map will be contained within the text of `result.css`.\n\n* `prev` string, object, boolean or function: source map content from\n  a previous processing step (for example, Sass compilation).\n  PostCSS will try to read the previous source map automatically\n  (based on comments within the source CSS), but you can use this option\n  to identify it manually. If desired, you can omit the previous map\n  with `prev: false`.\n\n* `sourcesContent` boolean: indicates that PostCSS should set the origin\n  content (for example, Sass source) of the source map. By default,\n  it is `true`. But if all previous maps do not contain sources content,\n  PostCSS will also leave it out even if you do not set this option.\n\n* `annotation` boolean or string: indicates that PostCSS should add annotation\n  comments to the CSS. By default, PostCSS will always add a comment with a path\n  to the source map. PostCSS will not add annotations to CSS files that\n  do not contain any comments.\n\n  By default, PostCSS presumes that you want to save the source map as\n  `opts.to + '.map'` and will use this path in the annotation comment.\n  A different path can be set by providing a string value for `annotation`.\n\n  If you have set `inline: true`, annotation cannot be disabled.\n\n* `from` string: by default, PostCSS will set the `sources` property of the map\n  to the value of the `from` option. If you want to override this behaviour, you\n  can use `map.from` to explicitly set the source map's `sources` property.\n  Path should be absolute or relative from generated file\n  (`to` option in `process()` method).\n\n[source maps]: http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/",
      "metadata": {}
    },
    "License": {
      "reference": "License",
      "route": "License",
      "sourcePath": "react-json-blinkforms\\node_modules\\querystring\\License.md",
      "title": "(untitled)",
      "contents": [
        "<p>Copyright 2012 Irakli Gozalishvili. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.</p>\n"
      ],
      "contentsRaw": "Copyright 2012 Irakli Gozalishvili. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.",
      "metadata": {}
    },
    "BOOKMARKLET": {
      "reference": "BOOKMARKLET",
      "route": "BOOKMARKLET",
      "sourcePath": "react-json-blinkforms\\node_modules\\ramda\\BOOKMARKLET.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"ramda-bookmarklet\">Ramda Bookmarklet</h1>\n<p>Use this bookmarklet to load Ramda on any website. To &quot;install&quot;:</p>\n<ol>\n<li><p>Create a new bookmark in your bookmarks bar (what it points to doesn&#39;t\nmatter, any page)</p>\n</li>\n<li><p>Edit the new bookmark and replace the <code>URL</code> with the following:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;javascript:!function(t,n){function&nbsp;r(r){var&nbsp;e=n.createElement(&quot;div&quot;),u=n.body;e.innerHTML=r,e.style.position=&quot;fixed&quot;,e.style.top=&quot;20px&quot;,e.style.right=&quot;20px&quot;,e.style.padding=&quot;5px&nbsp;10px&quot;,e.style.zIndex=&quot;1001&quot;,e.style.fontSize=&quot;18px&quot;,e.style.color=&quot;#222&quot;,e.style.backgroundColor=&quot;#DFF2BF&quot;,e.style.textAlign=&quot;center&quot;,e.style.border=&quot;solid&nbsp;2px&nbsp;black&quot;,e.style.borderRadius=&quot;25px&quot;,u.appendChild(e),t.setTimeout(u.removeChild.bind(u,e),2500)}var&nbsp;e=&quot;???&quot;;return&quot;undefined&quot;!=typeof&nbsp;t.R?r(&quot;This&nbsp;page&nbsp;already&nbsp;using&nbsp;ramda&quot;):(function(){&quot;use&nbsp;strict&quot;;var&nbsp;t={&quot;@@functional/placeholder&quot;:!0},n=function(t,n){switch(t){case&nbsp;0:return&nbsp;function(){return&nbsp;n.apply(this,arguments)};case&nbsp;1:return&nbsp;function(t){return&nbsp;n.apply(this,arguments)};case&nbsp;2:return&nbsp;function(t,r){return&nbsp;n.apply(this,arguments)};case&nbsp;3:return&nbsp;function(t,r,e){return&nbsp;n.apply(this,arguments)};case&nbsp;4:return&nbsp;function(t,r,e,u){return&nbsp;n.apply(this,arguments)};case&nbsp;5:return&nbsp;function(t,r,e,u,i){return&nbsp;n.apply(this,arguments)};case&nbsp;6:return&nbsp;function(t,r,e,u,i,o){return&nbsp;n.apply(this,arguments)};case&nbsp;7:return&nbsp;function(t,r,e,u,i,o,c){return&nbsp;n.apply(this,arguments)};case&nbsp;8:return&nbsp;function(t,r,e,u,i,o,c,s){return&nbsp;n.apply(this,arguments)};case&nbsp;9:return&nbsp;function(t,r,e,u,i,o,c,s,a){return&nbsp;n.apply(this,arguments)};case&nbsp;10:return&nbsp;function(t,r,e,u,i,o,c,s,a,f){return&nbsp;n.apply(this,arguments)};default:throw&nbsp;new&nbsp;Error(&quot;First&nbsp;argument&nbsp;to&nbsp;_arity&nbsp;must&nbsp;be&nbsp;a&nbsp;non-negative&nbsp;integer&nbsp;no&nbsp;greater&nbsp;than&nbsp;ten&quot;)}},r=function(t){for(var&nbsp;n,r=[];!(n=t.next()).done;)r.push(n.value);return&nbsp;r},e=function(){return&nbsp;Array.prototype.slice.call(arguments)},u=function(t){return&nbsp;new&nbsp;RegExp(t.source,(t.global?&quot;g&quot;:&quot;&quot;)+(t.ignoreCase?&quot;i&quot;:&quot;&quot;)+(t.multiline?&quot;m&quot;:&quot;&quot;)+(t.sticky?&quot;y&quot;:&quot;&quot;)+(t.unicode?&quot;u&quot;:&quot;&quot;))},i=function(t){return&nbsp;function(){return!t.apply(this,arguments)}},o=function(t,n){t=t||[],n=n||[];var&nbsp;r,e=t.length,u=n.length,i=[];for(r=0;e&gt;r;)i[i.length]=t[r],r+=1;for(r=0;u&gt;r;)i[i.length]=n[r],r+=1;return&nbsp;i},c=function(t,n,r){for(var&nbsp;e=0,u=r.length;u&gt;e;){if(t(n,r[e]))return!0;e+=1}return!1},s=function(t,n){for(var&nbsp;r=0,e=n.length,u=[];e&gt;r;)t(n[r])&amp;&amp;(u[u.length]=n[r]),r+=1;return&nbsp;u},a=function(t){return{&quot;@@transducer/value&quot;:t,&quot;@@transducer/reduced&quot;:!0}},f=function(t){var&nbsp;n=String(t).match(/^function&nbsp;(\\w*)/);return&nbsp;null==n?&quot;&quot;:n[1]},l=function(t,n){return&nbsp;Object.prototype.hasOwnProperty.call(n,t)},p=function(t){return&nbsp;t},h=function(){var&nbsp;t=Object.prototype.toString;return&quot;[object&nbsp;Arguments]&quot;===t.call(arguments)?function(n){return&quot;[object&nbsp;Arguments]&quot;===t.call(n)}:function(t){return&nbsp;l(&quot;callee&quot;,t)}}(),g=Array.isArray||function(t){return&nbsp;null!=t&amp;&amp;t.length&gt;=0&amp;&amp;&quot;[object&nbsp;Array]&quot;===Object.prototype.toString.call(t)},d=function(t){return&quot;[object&nbsp;Function]&quot;===Object.prototype.toString.call(t)},y=Number.isInteger||function(t){return&nbsp;t&lt;&lt;0===t},m=function(t){return&quot;[object&nbsp;Number]&quot;===Object.prototype.toString.call(t)},v=function(t){return&quot;[object&nbsp;Object]&quot;===Object.prototype.toString.call(t)},b=function(t){return&nbsp;null!=t&amp;&amp;&quot;object&quot;==typeof&nbsp;t&amp;&amp;t[&quot;@@functional/placeholder&quot;]===!0},x=function(t){return&quot;[object&nbsp;RegExp]&quot;===Object.prototype.toString.call(t)},w=function(t){return&quot;[object&nbsp;String]&quot;===Object.prototype.toString.call(t)},j=function(t){return&quot;function&quot;==typeof&nbsp;t[&quot;@@transducer/step&quot;]},O=function(t,n){for(var&nbsp;r=0,e=n.length,u=Array(e);e&gt;r;)u[r]=t(n[r]),r+=1;return&nbsp;u},S=function(t){if(null==t)throw&nbsp;new&nbsp;TypeError(&quot;Cannot&nbsp;convert&nbsp;undefined&nbsp;or&nbsp;null&nbsp;to&nbsp;object&quot;);for(var&nbsp;n=Object(t),r=1,e=arguments.length;e&gt;r;){var&nbsp;u=arguments[r];if(null!=u)for(var&nbsp;i&nbsp;in&nbsp;u)l(i,u)&amp;&amp;(n[i]=u[i]);r+=1}return&nbsp;n},A=function(t){return[t]},E=function(t,n){return&nbsp;function(){return&nbsp;n.call(this,t.apply(this,arguments))}},_=function(t,n){return&nbsp;function(){var&nbsp;r=this;return&nbsp;t.apply(r,arguments).then(function(t){return&nbsp;n.call(r,t)})}},N=function(t){var&nbsp;n=t.replace(/\\\\/g,&quot;\\\\\\\\&quot;).replace(/[\\b]/g,&quot;\\\\b&quot;).replace(/\\f/g,&quot;\\\\f&quot;).replace(/\\n/g,&quot;\\\\n&quot;).replace(/\\r/g,&quot;\\\\r&quot;).replace(/\\t/g,&quot;\\\\t&quot;).replace(/\\v/g,&quot;\\\\v&quot;).replace(/\\0/g,&quot;\\\\0&quot;);return&#39;&quot;&#39;+n.replace(/&quot;/g,&#39;\\\\&quot;&#39;)+&#39;&quot;&#39;},k=function(t){return&nbsp;t&amp;&amp;t[&quot;@@transducer/reduced&quot;]?t:{&quot;@@transducer/value&quot;:t,&quot;@@transducer/reduced&quot;:!0}},I=function&nbsp;Mu(t,n,r){switch(arguments.length){case&nbsp;1:return&nbsp;Mu(t,0,t.length);case&nbsp;2:return&nbsp;Mu(t,n,t.length);default:for(var&nbsp;e=[],u=0,i=Math.max(0,Math.min(t.length,r)-n);i&gt;u;)e[u]=t[n+u],u+=1;return&nbsp;e}},q=function(){var&nbsp;t=function(t){return(10&gt;t?&quot;0&quot;:&quot;&quot;)+t};return&quot;function&quot;==typeof&nbsp;Date.prototype.toISOString?function(t){return&nbsp;t.toISOString()}:function(n){return&nbsp;n.getUTCFullYear()+&quot;-&quot;+t(n.getUTCMonth()+1)+&quot;-&quot;+t(n.getUTCDate())+&quot;T&quot;+t(n.getUTCHours())+&quot;:&quot;+t(n.getUTCMinutes())+&quot;:&quot;+t(n.getUTCSeconds())+&quot;.&quot;+(n.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+&quot;Z&quot;}}(),C={init:function(){return&nbsp;this.xf[&quot;@@transducer/init&quot;]()},result:function(t){return&nbsp;this.xf[&quot;@@transducer/result&quot;](t)}},W=function(){function&nbsp;t(t){this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=function(){throw&nbsp;new&nbsp;Error(&quot;init&nbsp;not&nbsp;implemented&nbsp;on&nbsp;XWrap&quot;)},t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;t},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(t,n)},function(n){return&nbsp;new&nbsp;t(n)}}(),P=function(t,n){for(var&nbsp;r=0,e=n.length-(t-1),u=new&nbsp;Array(e&gt;=0?e:0);e&gt;r;)u[r]=I(n,r,r+t),r+=1;return&nbsp;u},R=&quot;function&quot;==typeof&nbsp;Object.assign?Object.assign:S,T=function(t,n){return&nbsp;function(){var&nbsp;r=arguments.length;if(0===r)return&nbsp;n();var&nbsp;e=arguments[r-1];return&nbsp;g(e)||&quot;function&quot;!=typeof&nbsp;e[t]?n.apply(this,arguments):e[t].apply(e,I(arguments,0,r-1))}},B=function(t){return&nbsp;function&nbsp;n(r){return&nbsp;0===arguments.length||b(r)?n:t.apply(this,arguments)}},F=function(t){return&nbsp;function&nbsp;n(r,e){switch(arguments.length){case&nbsp;0:return&nbsp;n;case&nbsp;1:return&nbsp;b(r)?n:B(function(n){return&nbsp;t(r,n)});default:return&nbsp;b(r)&amp;&amp;b(e)?n:b(r)?B(function(n){return&nbsp;t(n,e)}):b(e)?B(function(n){return&nbsp;t(r,n)}):t(r,e)}}},M=function(t){return&nbsp;function&nbsp;n(r,e,u){switch(arguments.length){case&nbsp;0:return&nbsp;n;case&nbsp;1:return&nbsp;b(r)?n:F(function(n,e){return&nbsp;t(r,n,e)});case&nbsp;2:return&nbsp;b(r)&amp;&amp;b(e)?n:b(r)?F(function(n,r){return&nbsp;t(n,e,r)}):b(e)?F(function(n,e){return&nbsp;t(r,n,e)}):B(function(n){return&nbsp;t(r,e,n)});default:return&nbsp;b(r)&amp;&amp;b(e)&amp;&amp;b(u)?n:b(r)&amp;&amp;b(e)?F(function(n,r){return&nbsp;t(n,r,u)}):b(r)&amp;&amp;b(u)?F(function(n,r){return&nbsp;t(n,e,r)}):b(e)&amp;&amp;b(u)?F(function(n,e){return&nbsp;t(r,n,e)}):b(r)?B(function(n){return&nbsp;t(n,e,u)}):b(e)?B(function(n){return&nbsp;t(r,n,u)}):b(u)?B(function(n){return&nbsp;t(r,e,n)}):t(r,e,u)}}},U=function&nbsp;Uu(t,r,e){return&nbsp;function(){for(var&nbsp;u=[],i=0,o=t,c=0;c&lt;r.length||i&lt;arguments.length;){var&nbsp;s;c&lt;r.length&amp;&amp;(!b(r[c])||i&gt;=arguments.length)?s=r[c]:(s=arguments[i],i+=1),u[c]=s,b(s)||(o-=1),c+=1}return&nbsp;0&gt;=o?e.apply(this,u):n(o,Uu(t,u,e))}},L=function(t,n,r){return&nbsp;function(){var&nbsp;e=arguments.length;if(0===e)return&nbsp;r();var&nbsp;u=arguments[e-1];if(!g(u)){var&nbsp;i=I(arguments,0,e-1);if(&quot;function&quot;==typeof&nbsp;u[t])return&nbsp;u[t].apply(u,i);if(j(u)){var&nbsp;o=n.apply(null,i);return&nbsp;o(u)}}return&nbsp;r.apply(this,arguments)}},z=function(t,n){for(var&nbsp;r=n.length-1;r&gt;=0&amp;&amp;t(n[r]);)r-=1;return&nbsp;I(n,0,r+1)},D=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.all=!0}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.all&amp;&amp;(t=this.xf[&quot;@@transducer/step&quot;](t,!0)),this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)||(this.all=!1,t=k(this.xf[&quot;@@transducer/step&quot;](t,!1))),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),V=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.any=!1}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.any||(t=this.xf[&quot;@@transducer/step&quot;](t,!1)),this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)&amp;&amp;(this.any=!0,t=k(this.xf[&quot;@@transducer/step&quot;](t,!0))),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),K=function(){function&nbsp;t(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new&nbsp;Array(t)}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.acc=null,this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.store(n),this.full?this.xf[&quot;@@transducer/step&quot;](t,this.getCopy()):t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&amp;&amp;(this.pos=0,this.full=!0)},t.prototype.getCopy=function(){return&nbsp;o(I(this.acc,this.pos),I(this.acc,0,this.pos))},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),H=function(){function&nbsp;t(t,n){this.xf=n,this.n=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.n&gt;0?(this.n-=1,t):this.xf[&quot;@@transducer/step&quot;](t,n)},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),$=function(){function&nbsp;t(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new&nbsp;Array(t)}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.acc=null,this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.full&amp;&amp;(t=this.xf[&quot;@@transducer/step&quot;](t,this.acc[this.pos])),this.store(n),t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&amp;&amp;(this.pos=0,this.full=!0)},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),X=function(){function&nbsp;t(t,n){this.xf=n,this.pred=t,this.lastValue=void&nbsp;0,this.seenFirstValue=!1}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=function(){return&nbsp;this.xf[&quot;@@transducer/init&quot;]()},t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){var&nbsp;r=!1;return&nbsp;this.seenFirstValue?this.pred(this.lastValue,n)&amp;&amp;(r=!0):this.seenFirstValue=!0,this.lastValue=n,r?t:this.xf[&quot;@@transducer/step&quot;](t,n)},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),Y=function(){function&nbsp;t(t,n){this.xf=n,this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){if(this.f){if(this.f(n))return&nbsp;t;this.f=null}return&nbsp;this.xf[&quot;@@transducer/step&quot;](t,n)},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),Z=function(){function&nbsp;t(t,n){this.xf=n,this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)?this.xf[&quot;@@transducer/step&quot;](t,n):t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),G=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.found=!1}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.found||(t=this.xf[&quot;@@transducer/step&quot;](t,void&nbsp;0)),this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)&amp;&amp;(this.found=!0,t=k(this.xf[&quot;@@transducer/step&quot;](t,n))),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),J=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.idx=-1,this.found=!1}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.found||(t=this.xf[&quot;@@transducer/step&quot;](t,-1)),this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.idx+=1,this.f(n)&amp;&amp;(this.found=!0,t=k(this.xf[&quot;@@transducer/step&quot;](t,this.idx))),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),Q=function(){function&nbsp;t(t,n){this.xf=n,this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.xf[&quot;@@transducer/result&quot;](this.xf[&quot;@@transducer/step&quot;](t,this.last))},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)&amp;&amp;(this.last=n),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),tt=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.idx=-1,this.lastIdx=-1}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.xf[&quot;@@transducer/result&quot;](this.xf[&quot;@@transducer/step&quot;](t,this.lastIdx))},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.idx+=1,this.f(n)&amp;&amp;(this.lastIdx=this.idx),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),nt=function(){function&nbsp;t(t,n){this.xf=n,this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.xf[&quot;@@transducer/step&quot;](t,this.f(n))},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),rt=function(){function&nbsp;t(t,n){this.xf=n,this.n=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;0===this.n?k(t):(this.n-=1,this.xf[&quot;@@transducer/step&quot;](t,n))},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),et=function(){function&nbsp;t(t,n){this.xf=n,this.f=t}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=C.result,t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)?this.xf[&quot;@@transducer/step&quot;](t,n):k(t)},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),ut=F(function(t,n){return&nbsp;Number(t)+Number(n)}),it=M(function(t,n,r){if(n&gt;=r.length||n&lt;-r.length)return&nbsp;r;var&nbsp;e=0&gt;n?r.length:0,u=e+n,i=o(r);return&nbsp;i[u]=t(r[u]),i}),ot=F(L(&quot;all&quot;,D,function(t,n){for(var&nbsp;r=0;r&lt;n.length;){if(!t(n[r]))return!1;r+=1}return!0})),ct=B(function(t){return&nbsp;function(){return&nbsp;t}}),st=F(function(t,n){return&nbsp;t&amp;&amp;n}),at=F(L(&quot;any&quot;,V,function(t,n){for(var&nbsp;r=0;r&lt;n.length;){if(t(n[r]))return!0;r+=1}return!1})),ft=F(L(&quot;aperture&quot;,K,P)),lt=F(function(t,n){return&nbsp;o(n,[t])}),pt=F(function(t,n){return&nbsp;t.apply(this,n)}),ht=M(function(t,n,r){var&nbsp;e={};for(var&nbsp;u&nbsp;in&nbsp;r)e[u]=r[u];return&nbsp;e[t]=n,e}),gt=M(function&nbsp;Lu(t,n,r){switch(t.length){case&nbsp;0:return&nbsp;n;case&nbsp;1:return&nbsp;ht(t[0],n,r);default:return&nbsp;ht(t[0],Lu(I(t,1),n,Object(r[t[0]])),r)}}),dt=F(function(t,r){return&nbsp;n(t.length,function(){return&nbsp;t.apply(r,arguments)})}),yt=M(function(t,n,r){if(t&gt;n)throw&nbsp;new&nbsp;Error(&quot;min&nbsp;must&nbsp;not&nbsp;be&nbsp;greater&nbsp;than&nbsp;max&nbsp;in&nbsp;clamp(min,&nbsp;max,&nbsp;value)&quot;);return&nbsp;t&gt;r?t:r&gt;n?n:r}),mt=B(function(t){return&nbsp;function(n,r){return&nbsp;t(n,r)?-1:t(r,n)?1:0}}),vt=F(function(t,r){return&nbsp;1===t?B(r):n(t,U(t,[],r))}),bt=ut(-1),xt=F(function(t,n){return&nbsp;null==n||n!==n?t:n}),wt=M(function(t,n,r){for(var&nbsp;e=[],u=0,i=n.length;i&gt;u;)c(t,n[u],r)||c(t,n[u],e)||e.push(n[u]),u+=1;return&nbsp;e}),jt=F(function(t,n){var&nbsp;r={};for(var&nbsp;e&nbsp;in&nbsp;n)e!==t&amp;&amp;(r[e]=n[e]);return&nbsp;r}),Ot=F(function&nbsp;zu(t,n){switch(t.length){case&nbsp;0:return&nbsp;n;case&nbsp;1:return&nbsp;jt(t[0],n);default:var&nbsp;r=t[0],e=I(t,1);return&nbsp;null==n[r]?n:ht(r,zu(e,n[r]),n)}}),St=F(function(t,n){return&nbsp;t/n}),At=F(L(&quot;dropWhile&quot;,Y,function(t,n){for(var&nbsp;r=0,e=n.length;e&gt;r&amp;&amp;t(n[r]);)r+=1;return&nbsp;I(n,r)})),Et=B(function(t){return&nbsp;null!=t&amp;&amp;&quot;function&quot;==typeof&nbsp;t.empty?t.empty():null!=t&amp;&amp;null!=t.constructor&amp;&amp;&quot;function&quot;==typeof&nbsp;t.constructor.empty?t.constructor.empty():g(t)?[]:w(t)?&quot;&quot;:v(t)?{}:h(t)?function(){return&nbsp;arguments}():void&nbsp;0}),_t=F(function&nbsp;Du(t,n){var&nbsp;r,e,u,i={};for(e&nbsp;in&nbsp;n)r=t[e],u=typeof&nbsp;r,i[e]=&quot;function&quot;===u?r(n[e]):&quot;object&quot;===u?Du(t[e],n[e]):n[e];return&nbsp;i}),Nt=F(L(&quot;find&quot;,G,function(t,n){for(var&nbsp;r=0,e=n.length;e&gt;r;){if(t(n[r]))return&nbsp;n[r];r+=1}})),kt=F(L(&quot;findIndex&quot;,J,function(t,n){for(var&nbsp;r=0,e=n.length;e&gt;r;){if(t(n[r]))return&nbsp;r;r+=1}return-1})),It=F(L(&quot;findLast&quot;,Q,function(t,n){for(var&nbsp;r=n.length-1;r&gt;=0;){if(t(n[r]))return&nbsp;n[r];r-=1}})),qt=F(L(&quot;findLastIndex&quot;,tt,function(t,n){for(var&nbsp;r=n.length-1;r&gt;=0;){if(t(n[r]))return&nbsp;r;r-=1}return-1})),Ct=F(T(&quot;forEach&quot;,function(t,n){for(var&nbsp;r=n.length,e=0;r&gt;e;)t(n[e]),e+=1;return&nbsp;n})),Wt=B(function(t){for(var&nbsp;n=0,r=t.length,e={};r&gt;n;)g(t[n])&amp;&amp;t[n].length&amp;&amp;(e[t[n][0]]=t[n][1]),n+=1;return&nbsp;e}),Pt=F(function(t,n){for(var&nbsp;r=[],e=0,u=n.length;u&gt;e;){for(var&nbsp;i=e+1;u&gt;i&amp;&amp;t(n[e],n[i]);)i+=1;r.push(n.slice(e,i)),e=i}return&nbsp;r}),Rt=F(function(t,n){return&nbsp;t&gt;n}),Tt=F(function(t,n){return&nbsp;t&gt;=n}),Bt=F(l),Ft=F(function(t,n){return&nbsp;t&nbsp;in&nbsp;n}),Mt=F(function(t,n){return&nbsp;t===n?0!==t||1/t===1/n:t!==t&amp;&amp;n!==n}),Ut=B(p),Lt=M(function(t,n,r){return&nbsp;vt(Math.max(t.length,n.length,r.length),function(){return&nbsp;t.apply(this,arguments)?n.apply(this,arguments):r.apply(this,arguments)})}),zt=ut(1),Dt=M(function(t,n,r){t=t&lt;r.length&amp;&amp;t&gt;=0?t:r.length;var&nbsp;e=I(r);return&nbsp;e.splice(t,0,n),e}),Vt=M(function(t,n,r){return&nbsp;t=t&lt;r.length&amp;&amp;t&gt;=0?t:r.length,o(o(I(r,0,t),n),I(r,t))}),Kt=F(T(&quot;intersperse&quot;,function(t,n){for(var&nbsp;r=[],e=0,u=n.length;u&gt;e;)e===u-1?r.push(n[e]):r.push(n[e],t),e+=1;return&nbsp;r})),Ht=F(function(t,n){return&nbsp;null!=n&amp;&amp;n.constructor===t||n&nbsp;instanceof&nbsp;t}),$t=B(function(t){return&nbsp;g(t)?!0:t?&quot;object&quot;!=typeof&nbsp;t?!1:t&nbsp;instanceof&nbsp;String?!1:1===t.nodeType?!!t.length:0===t.length?!0:t.length&gt;0?t.hasOwnProperty(0)&amp;&amp;t.hasOwnProperty(t.length-1):!1:!1}),Xt=B(function(t){return&nbsp;null==t}),Yt=function(){var&nbsp;t=!{toString:null}.propertyIsEnumerable(&quot;toString&quot;),n=[&quot;constructor&quot;,&quot;valueOf&quot;,&quot;isPrototypeOf&quot;,&quot;toString&quot;,&quot;propertyIsEnumerable&quot;,&quot;hasOwnProperty&quot;,&quot;toLocaleString&quot;],r=function(){return&nbsp;arguments.propertyIsEnumerable(&quot;length&quot;)}(),e=function(t,n){for(var&nbsp;r=0;r&lt;t.length;){if(t[r]===n)return!0;r+=1}return!1};return&nbsp;B(&quot;function&quot;!=typeof&nbsp;Object.keys||r?function(u){if(Object(u)!==u)return[];var&nbsp;i,o,c=[],s=r&amp;&amp;h(u);for(i&nbsp;in&nbsp;u)!l(i,u)||s&amp;&amp;&quot;length&quot;===i||(c[c.length]=i);if(t)for(o=n.length-1;o&gt;=0;)i=n[o],l(i,u)&amp;&amp;!e(c,i)&amp;&amp;(c[c.length]=i),o-=1;return&nbsp;c}:function(t){return&nbsp;Object(t)!==t?[]:Object.keys(t)})}(),Zt=B(function(t){var&nbsp;n,r=[];for(n&nbsp;in&nbsp;t)r[r.length]=n;return&nbsp;r}),Gt=B(function(t){return&nbsp;null!=t&amp;&amp;Ht(Number,t.length)?t.length:NaN}),Jt=F(function(t,n){return&nbsp;n&gt;t}),Qt=F(function(t,n){return&nbsp;n&gt;=t}),tn=M(function(t,n,r){for(var&nbsp;e=0,u=r.length,i=[],o=[n];u&gt;e;)o=t(o[0],r[e]),i[e]=o[1],e+=1;return[o[0],i]}),nn=M(function(t,n,r){for(var&nbsp;e=r.length-1,u=[],i=[n];e&gt;=0;)i=t(i[0],r[e]),u[e]=i[1],e-=1;return[i[0],u]}),rn=F(function(t,n){return&nbsp;n.match(t)||[]}),en=F(function(t,n){return&nbsp;y(t)?!y(n)||1&gt;n?NaN:(t%n+n)%n:NaN}),un=F(function(t,n){return&nbsp;n&gt;t?n:t}),on=M(function(t,n,r){return&nbsp;t(r)&gt;t(n)?r:n}),cn=F(function(t,n){return&nbsp;R({},t,n)}),sn=B(function(t){return&nbsp;R.apply(null,[{}].concat(t))}),an=M(function(t,n,r){var&nbsp;e,u={};for(e&nbsp;in&nbsp;n)l(e,n)&amp;&amp;(u[e]=l(e,r)?t(e,n[e],r[e]):n[e]);for(e&nbsp;in&nbsp;r)l(e,r)&amp;&amp;!l(e,u)&amp;&amp;(u[e]=r[e]);return&nbsp;u}),fn=F(function(t,n){return&nbsp;t&gt;n?n:t}),ln=M(function(t,n,r){return&nbsp;t(r)&lt;t(n)?r:n}),pn=F(function(t,n){return&nbsp;t%n}),hn=F(function(t,n){return&nbsp;t*n}),gn=F(function(t,n){switch(t){case&nbsp;0:return&nbsp;function(){return&nbsp;n.call(this)};case&nbsp;1:return&nbsp;function(t){return&nbsp;n.call(this,t)};case&nbsp;2:return&nbsp;function(t,r){return&nbsp;n.call(this,t,r)};case&nbsp;3:return&nbsp;function(t,r,e){return&nbsp;n.call(this,t,r,e)};case&nbsp;4:return&nbsp;function(t,r,e,u){return&nbsp;n.call(this,t,r,e,u)};case&nbsp;5:return&nbsp;function(t,r,e,u,i){return&nbsp;n.call(this,t,r,e,u,i)};case&nbsp;6:return&nbsp;function(t,r,e,u,i,o){return&nbsp;n.call(this,t,r,e,u,i,o)};case&nbsp;7:return&nbsp;function(t,r,e,u,i,o,c){return&nbsp;n.call(this,t,r,e,u,i,o,c)};case&nbsp;8:return&nbsp;function(t,r,e,u,i,o,c,s){return&nbsp;n.call(this,t,r,e,u,i,o,c,s)};case&nbsp;9:return&nbsp;function(t,r,e,u,i,o,c,s,a){return&nbsp;n.call(this,t,r,e,u,i,o,c,s,a)};case&nbsp;10:return&nbsp;function(t,r,e,u,i,o,c,s,a,f){return&nbsp;n.call(this,t,r,e,u,i,o,c,s,a,f)};default:throw&nbsp;new&nbsp;Error(&quot;First&nbsp;argument&nbsp;to&nbsp;nAry&nbsp;must&nbsp;be&nbsp;a&nbsp;non-negative&nbsp;integer&nbsp;no&nbsp;greater&nbsp;than&nbsp;ten&quot;)}}),dn=B(function(t){return-t}),yn=F(i(L(&quot;any&quot;,V,at))),mn=B(function(t){return!t}),vn=F(function(t,n){var&nbsp;r=0&gt;t?n.length+t:t;return&nbsp;w(n)?n.charAt(r):n[r]}),bn=B(function(t){return&nbsp;function(){return&nbsp;vn(t,arguments)}}),xn=F(function(t,n){var&nbsp;r={};return&nbsp;r[t]=n,r}),wn=B(A),jn=B(function(t){var&nbsp;r,e=!1;return&nbsp;n(t.length,function(){return&nbsp;e?r:(e=!0,r=t.apply(this,arguments))})}),On=F(function(t,n){return&nbsp;t||n}),Sn=function(){var&nbsp;t=function(n){return{value:n,map:function(r){return&nbsp;t(r(n))}}};return&nbsp;M(function(n,r,e){return&nbsp;n(function(n){return&nbsp;t(r(n))})(e).value})}(),An=F(function(t,n){return[t,n]}),En=F(function(t,n){for(var&nbsp;r=n,e=0;e&lt;t.length;){if(null==r)return;r=r[t[e]],e+=1}return&nbsp;r}),_n=M(function(t,n,r){return&nbsp;xt(t,En(n,r))}),Nn=M(function(t,n,r){return&nbsp;n.length&gt;0&amp;&amp;t(En(n,r))}),kn=F(function(t,n){for(var&nbsp;r={},e=0;e&lt;t.length;)t[e]in&nbsp;n&amp;&amp;(r[t[e]]=n[t[e]]),e+=1;return&nbsp;r}),In=F(function(t,n){for(var&nbsp;r={},e=0,u=t.length;u&gt;e;){var&nbsp;i=t[e];r[i]=n[i],e+=1}return&nbsp;r}),qn=F(function(t,n){var&nbsp;r={};for(var&nbsp;e&nbsp;in&nbsp;n)t(n[e],e,n)&amp;&amp;(r[e]=n[e]);return&nbsp;r}),Cn=F(function(t,n){return&nbsp;o([t],n)}),Wn=F(function(t,n){return&nbsp;n[t]}),Pn=M(function(t,n,r){return&nbsp;null!=r&amp;&amp;l(n,r)?r[n]:t}),Rn=M(function(t,n,r){return&nbsp;t(r[n])}),Tn=F(function(t,n){for(var&nbsp;r=t.length,e=[],u=0;r&gt;u;)e[u]=n[t[u]],u+=1;return&nbsp;e}),Bn=F(function(t,n){if(!m(t)||!m(n))throw&nbsp;new&nbsp;TypeError(&quot;Both&nbsp;arguments&nbsp;to&nbsp;range&nbsp;must&nbsp;be&nbsp;numbers&quot;);for(var&nbsp;r=[],e=t;n&gt;e;)r.push(e),e+=1;return&nbsp;r}),Fn=M(function(t,n,r){for(var&nbsp;e=r.length-1;e&gt;=0;)n=t(n,r[e]),e-=1;return&nbsp;n}),Mn=B(k),Un=M(function(t,n,r){return&nbsp;o(I(r,0,Math.min(t,r.length)),I(r,Math.min(r.length,t+n)))}),Ln=M(function(t,n,r){return&nbsp;r.replace(t,n)}),zn=B(function(t){return&nbsp;w(t)?t.split(&quot;&quot;).reverse().join(&quot;&quot;):I(t).reverse()}),Dn=M(function(t,n,r){for(var&nbsp;e=0,u=r.length,i=[n];u&gt;e;)n=t(n,r[e]),i[e+1]=n,e+=1;return&nbsp;i}),Vn=M(function(t,n,r){return&nbsp;Sn(t,ct(n),r)}),Kn=M(T(&quot;slice&quot;,function(t,n,r){return&nbsp;Array.prototype.slice.call(r,t,n)})),Hn=F(function(t,n){return&nbsp;I(n).sort(t)}),$n=F(function(t,n){return&nbsp;I(n).sort(function(n,r){var&nbsp;e=t(n),u=t(r);return&nbsp;u&gt;e?-1:e&gt;u?1:0})}),Xn=F(function(t,n){return[Kn(0,t,n),Kn(t,Gt(n),n)]}),Yn=F(function(t,n){if(0&gt;=t)throw&nbsp;new&nbsp;Error(&quot;First&nbsp;argument&nbsp;to&nbsp;splitEvery&nbsp;must&nbsp;be&nbsp;a&nbsp;positive&nbsp;integer&quot;);for(var&nbsp;r=[],e=0;e&lt;n.length;)r.push(Kn(e,e+=t,n));return&nbsp;r}),Zn=F(function(t,n){for(var&nbsp;r=0,e=n.length,u=[];e&gt;r&amp;&amp;!t(n[r]);)u.push(n[r]),r+=1;return[u,I(n,r)]}),Gn=F(function(t,n){return&nbsp;Number(t)-Number(n)}),Jn=T(&quot;tail&quot;,Kn(1,1/0)),Qn=F(L(&quot;take&quot;,rt,function(t,n){return&nbsp;Kn(0,0&gt;t?1/0:t,n)})),tr=F(function(t,n){for(var&nbsp;r=n.length-1;r&gt;=0&amp;&amp;t(n[r]);)r-=1;return&nbsp;I(n,r+1,1/0)}),nr=F(L(&quot;takeWhile&quot;,et,function(t,n){for(var&nbsp;r=0,e=n.length;e&gt;r&amp;&amp;t(n[r]);)r+=1;return&nbsp;I(n,0,r)})),rr=F(function(t,n){return&nbsp;t(n),n}),er=F(function(t,n){var&nbsp;r,e=Number(n),u=0;if(0&gt;e||isNaN(e))throw&nbsp;new&nbsp;RangeError(&quot;n&nbsp;must&nbsp;be&nbsp;a&nbsp;non-negative&nbsp;number&quot;);for(r=new&nbsp;Array(e);e&gt;u;)r[u]=t(u),u+=1;return&nbsp;r}),ur=B(function(t){var&nbsp;n=[];for(var&nbsp;r&nbsp;in&nbsp;t)l(r,t)&amp;&amp;(n[n.length]=[r,t[r]]);return&nbsp;n}),ir=B(function(t){var&nbsp;n=[];for(var&nbsp;r&nbsp;in&nbsp;t)n[n.length]=[r,t[r]];return&nbsp;n}),or=B(function(t){for(var&nbsp;n=0,r=[];n&lt;t.length;){for(var&nbsp;e=t[n],u=0;u&lt;e.length;)&quot;undefined&quot;==typeof&nbsp;r[u]&amp;&amp;(r[u]=[]),r[u].push(e[u]),u+=1;n+=1}return&nbsp;r}),cr=function(){var&nbsp;t=&quot;&nbsp;&nbsp;&nbsp;&nbsp;\\n\u000b\\f\\r&nbsp;&nbsp; ᠎             　\\u2028\\u2029\\ufeff&quot;,n=&quot;​&quot;,r=&quot;function&quot;==typeof&nbsp;String.prototype.trim;return&nbsp;B(r&amp;&amp;!t.trim()&amp;&amp;n.trim()?function(t){return&nbsp;t.trim()}:function(n){var&nbsp;r=new&nbsp;RegExp(&quot;^[&quot;+t+&quot;][&quot;+t+&quot;]*&quot;),e=new&nbsp;RegExp(&quot;[&quot;+t+&quot;][&quot;+t+&quot;]*$&quot;);return&nbsp;n.replace(r,&quot;&quot;).replace(e,&quot;&quot;)})}(),sr=F(function(t,r){return&nbsp;n(t.length,function(){try{return&nbsp;t.apply(this,arguments)}catch(n){return&nbsp;r.apply(this,o([n],arguments))}})}),ar=B(function(t){return&nbsp;null===t?&quot;Null&quot;:void&nbsp;0===t?&quot;Undefined&quot;:Object.prototype.toString.call(t).slice(8,-1)}),fr=B(function(t){return&nbsp;function(){return&nbsp;t(I(arguments))}}),lr=B(function(t){return&nbsp;gn(1,t)}),pr=F(function(t,n){return&nbsp;vt(t,function(){for(var&nbsp;r,e=1,u=n,i=0;t&gt;=e&amp;&amp;&quot;function&quot;==typeof&nbsp;u;)r=e===t?arguments.length:i+u.length,u=u.apply(this,I(arguments,i,r)),e+=1,i=r;return&nbsp;u})}),hr=F(function(t,n){for(var&nbsp;r=t(n),e=[];r&amp;&amp;r.length;)e[e.length]=r[0],r=t(r[1]);return&nbsp;e}),gr=F(function(t,n){for(var&nbsp;r,e=0,u=n.length,i=[];u&gt;e;)r=n[e],c(t,r,i)||(i[i.length]=r),e+=1;return&nbsp;i}),dr=M(function(t,n,r){return&nbsp;t(r)?r:n(r)}),yr=M(function(t,n,r){for(var&nbsp;e=r;!t(e);)e=n(e);return&nbsp;e}),mr=M(function(t,n,r){return&nbsp;it(ct(n),t,r)}),vr=F(function(t,n){return&nbsp;vt(n.length,function(){for(var&nbsp;r=[],e=0;e&lt;n.length;)r.push(n[e].call(this,arguments[e])),e+=1;return&nbsp;t.apply(this,r.concat(I(arguments,n.length)))})}),br=B(function(t){for(var&nbsp;n=Yt(t),r=n.length,e=[],u=0;r&gt;u;)e[u]=t[n[u]],u+=1;return&nbsp;e}),xr=B(function(t){var&nbsp;n,r=[];for(n&nbsp;in&nbsp;t)r[r.length]=t[n];return&nbsp;r}),wr=function(){var&nbsp;t=function(t){return{value:t,map:function(){return&nbsp;this}}};return&nbsp;F(function(n,r){return&nbsp;n(t)(r).value})}(),jr=M(function(t,n,r){return&nbsp;t(r)?n(r):r}),Or=F(function(t,n){for(var&nbsp;r&nbsp;in&nbsp;t)if(l(r,t)&amp;&amp;!t[r](n[r]))return!1;return!0}),Sr=F(function(t,n){return&nbsp;vt(t.length,function(){return&nbsp;n.apply(this,o([t],arguments))})}),Ar=F(function(t,n){for(var&nbsp;r,e=0,u=t.length,i=n.length,o=[];u&gt;e;){for(r=0;i&gt;r;)o[o.length]=[t[e],n[r]],r+=1;e+=1}return&nbsp;o}),Er=F(function(t,n){for(var&nbsp;r=[],e=0,u=Math.min(t.length,n.length);u&gt;e;)r[e]=[t[e],n[e]],e+=1;return&nbsp;r}),_r=F(function(t,n){for(var&nbsp;r=0,e=Math.min(t.length,n.length),u={};e&gt;r;)u[t[r]]=n[r],r+=1;return&nbsp;u}),Nr=M(function(t,n,r){for(var&nbsp;e=[],u=0,i=Math.min(n.length,r.length);i&gt;u;)e[u]=t(n[u],r[u]),u+=1;return&nbsp;e}),kr=ct(!1),Ir=ct(!0),qr=function&nbsp;Vu(t,n,r,e){var&nbsp;i=function(u){for(var&nbsp;i=n.length,o=0;i&gt;o;){if(t===n[o])return&nbsp;r[o];o+=1}n[o+1]=t,r[o+1]=u;for(var&nbsp;c&nbsp;in&nbsp;t)u[c]=e?Vu(t[c],n,r,!0):t[c];return&nbsp;u};switch(ar(t)){case&quot;Object&quot;:return&nbsp;i({});case&quot;Array&quot;:return&nbsp;i([]);case&quot;Date&quot;:return&nbsp;new&nbsp;Date(t.valueOf());case&quot;RegExp&quot;:return&nbsp;u(t);default:return&nbsp;t}},Cr=function(t){return&nbsp;F(function(r,e){return&nbsp;n(Math.max(0,r.length-e.length),function(){return&nbsp;r.apply(this,t(e,arguments))})})},Wr=function(t,n){return&nbsp;Qn(t&lt;n.length?n.length-t:0,n)},Pr=function&nbsp;Ku(t,n,e,u){if(Mt(t,n))return!0;if(ar(t)!==ar(n))return!1;if(null==t||null==n)return!1;if(&quot;function&quot;==typeof&nbsp;t.equals||&quot;function&quot;==typeof&nbsp;n.equals)return&quot;function&quot;==typeof&nbsp;t.equals&amp;&amp;t.equals(n)&amp;&amp;&quot;function&quot;==typeof&nbsp;n.equals&amp;&amp;n.equals(t);switch(ar(t)){case&quot;Arguments&quot;:case&quot;Array&quot;:case&quot;Object&quot;:if(&quot;function&quot;==typeof&nbsp;t.constructor&amp;&amp;&quot;Promise&quot;===f(t.constructor))return&nbsp;t===n;break;case&quot;Boolean&quot;:case&quot;Number&quot;:case&quot;String&quot;:if(typeof&nbsp;t!=typeof&nbsp;n||!Mt(t.valueOf(),n.valueOf()))return!1;break;case&quot;Date&quot;:if(!Mt(t.valueOf(),n.valueOf()))return!1;break;case&quot;Error&quot;:return&nbsp;t.name===n.name&amp;&amp;t.message===n.message;case&quot;RegExp&quot;:if(t.source!==n.source||t.global!==n.global||t.ignoreCase!==n.ignoreCase||t.multiline!==n.multiline||t.sticky!==n.sticky||t.unicode!==n.unicode)return!1;break;case&quot;Map&quot;:case&quot;Set&quot;:if(!Ku(r(t.entries()),r(n.entries()),e,u))return!1;break;case&quot;Int8Array&quot;:case&quot;Uint8Array&quot;:case&quot;Uint8ClampedArray&quot;:case&quot;Int16Array&quot;:case&quot;Uint16Array&quot;:case&quot;Int32Array&quot;:case&quot;Uint32Array&quot;:case&quot;Float32Array&quot;:case&quot;Float64Array&quot;:break;case&quot;ArrayBuffer&quot;:break;default:return!1}var&nbsp;i=Yt(t);if(i.length!==Yt(n).length)return!1;for(var&nbsp;o=e.length-1;o&gt;=0;){if(e[o]===t)return&nbsp;u[o]===n;o-=1}for(e.push(t),u.push(n),o=i.length-1;o&gt;=0;){var&nbsp;c=i[o];if(!l(c,n)||!Ku(n[c],t[c],e,u))return!1;o-=1}return&nbsp;e.pop(),u.pop(),!0},Rr=function(t){return&nbsp;function&nbsp;n(r){for(var&nbsp;e,u,i,o=[],c=0,s=r.length;s&gt;c;){if($t(r[c]))for(e=t?n(r[c]):r[c],i=0,u=e.length;u&gt;i;)o[o.length]=e[i],i+=1;else&nbsp;o[o.length]=r[c];c+=1}return&nbsp;o}},Tr=function(){function&nbsp;t(t,n,r){for(var&nbsp;e=0,u=r.length;u&gt;e;){if(n=t[&quot;@@transducer/step&quot;](n,r[e]),n&amp;&amp;n[&quot;@@transducer/reduced&quot;]){n=n[&quot;@@transducer/value&quot;];break}e+=1}return&nbsp;t[&quot;@@transducer/result&quot;](n)}function&nbsp;n(t,n,r){for(var&nbsp;e=r.next();!e.done;){if(n=t[&quot;@@transducer/step&quot;](n,e.value),n&amp;&amp;n[&quot;@@transducer/reduced&quot;]){n=n[&quot;@@transducer/value&quot;];break}e=r.next()}return&nbsp;t[&quot;@@transducer/result&quot;](n)}function&nbsp;r(t,n,r){return&nbsp;t[&quot;@@transducer/result&quot;](r.reduce(dt(t[&quot;@@transducer/step&quot;],t),n))}var&nbsp;e=&quot;undefined&quot;!=typeof&nbsp;Symbol?Symbol.iterator:&quot;@@iterator&quot;;return&nbsp;function(u,i,o){if(&quot;function&quot;==typeof&nbsp;u&amp;&amp;(u=W(u)),$t(o))return&nbsp;t(u,i,o);if(&quot;function&quot;==typeof&nbsp;o.reduce)return&nbsp;r(u,i,o);if(null!=o[e])return&nbsp;n(u,i,o[e]());if(&quot;function&quot;==typeof&nbsp;o.next)return&nbsp;n(u,i,o);throw&nbsp;new&nbsp;TypeError(&quot;reduce:&nbsp;list&nbsp;must&nbsp;be&nbsp;array&nbsp;or&nbsp;iterable&quot;)}}(),Br=function(){var&nbsp;t={&quot;@@transducer/init&quot;:Array,&quot;@@transducer/step&quot;:function(t,n){return&nbsp;t.push(n),t},&quot;@@transducer/result&quot;:p},n={&quot;@@transducer/init&quot;:String,&quot;@@transducer/step&quot;:function(t,n){return&nbsp;t+n},&quot;@@transducer/result&quot;:p},r={&quot;@@transducer/init&quot;:Object,&quot;@@transducer/step&quot;:function(t,n){return&nbsp;R(t,$t(n)?xn(n[0],n[1]):n)},&quot;@@transducer/result&quot;:p};return&nbsp;function(e){if(j(e))return&nbsp;e;if($t(e))return&nbsp;t;if(&quot;string&quot;==typeof&nbsp;e)return&nbsp;n;if(&quot;object&quot;==typeof&nbsp;e)return&nbsp;r;throw&nbsp;new&nbsp;Error(&quot;Cannot&nbsp;create&nbsp;transformer&nbsp;for&nbsp;&quot;+e)}}(),Fr=function(){function&nbsp;t(t,n){this.f=t,this.retained=[],this.xf=n}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){return&nbsp;this.retained=null,this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){return&nbsp;this.f(n)?this.retain(t,n):this.flush(t,n)},t.prototype.flush=function(t,n){return&nbsp;t=Tr(this.xf[&quot;@@transducer/step&quot;],t,this.retained),this.retained=[],this.xf[&quot;@@transducer/step&quot;](t,n)},t.prototype.retain=function(t,n){return&nbsp;this.retained.push(n),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),Mr=function(){function&nbsp;t(t,n){this.xf=n,this.f=t,this.inputs={}}return&nbsp;t.prototype[&quot;@@transducer/init&quot;]=C.init,t.prototype[&quot;@@transducer/result&quot;]=function(t){var&nbsp;n;for(n&nbsp;in&nbsp;this.inputs)if(l(n,this.inputs)&amp;&amp;(t=this.xf[&quot;@@transducer/step&quot;](t,this.inputs[n]),t[&quot;@@transducer/reduced&quot;])){t=t[&quot;@@transducer/value&quot;];break}return&nbsp;this.inputs=null,this.xf[&quot;@@transducer/result&quot;](t)},t.prototype[&quot;@@transducer/step&quot;]=function(t,n){var&nbsp;r=this.f(n);return&nbsp;this.inputs[r]=this.inputs[r]||[r,[]],this.inputs[r][1]=lt(n,this.inputs[r][1]),t},F(function(n,r){return&nbsp;new&nbsp;t(n,r)})}(),Ur=B(function(t){return&nbsp;vt(t.length,function(){var&nbsp;n=0,r=arguments[0],e=arguments[arguments.length-1],u=I(arguments);return&nbsp;u[0]=function(){var&nbsp;t=r.apply(this,o(arguments,[n,e]));return&nbsp;n+=1,t},t.apply(this,u)})}),Lr=B(function(t){return&nbsp;gn(2,t)}),zr=B(function(t){return&nbsp;null!=t&amp;&amp;&quot;function&quot;==typeof&nbsp;t.clone?t.clone():qr(t,[],[],!0)}),Dr=B(function(t){return&nbsp;vt(t.length,t)}),Vr=F(L(&quot;drop&quot;,H,function(t,n){return&nbsp;Kn(Math.max(0,t),1/0,n)})),Kr=F(L(&quot;dropLast&quot;,$,Wr)),Hr=F(L(&quot;dropLastWhile&quot;,Fr,z)),$r=F(function(t,n){return&nbsp;Pr(t,n,[],[])}),Xr=F(L(&quot;filter&quot;,Z,function(t,n){return&nbsp;v(n)?Tr(function(r,e){return&nbsp;t(n[e])&amp;&amp;(r[e]=n[e]),r},{},Yt(n)):s(t,n)})),Yr=B(Rr(!0)),Zr=B(function(t){return&nbsp;Dr(function(n,r){var&nbsp;e=I(arguments);return&nbsp;e[0]=r,e[1]=n,t.apply(this,e)})}),Gr=vn(0),Jr=Kn(0,-1),Qr=M(function(t,n,r){var&nbsp;e,u;n.length&gt;r.length?(e=n,u=r):(e=r,u=n);for(var&nbsp;i=[],o=0;o&lt;u.length;)c(t,u[o],e)&amp;&amp;(i[i.length]=u[o]),o+=1;return&nbsp;gr(t,i)}),te=M(function(t,n,r){return&nbsp;j(t)?Tr(n(t),t[&quot;@@transducer/init&quot;](),r):Tr(n(Br(t)),qr(t,[],[],!1),r)}),ne=B(function(t){for(var&nbsp;n=Yt(t),r=n.length,e=0,u={};r&gt;e;){var&nbsp;i=n[e],o=t[i],c=l(o,u)?u[o]:u[o]=[];c[c.length]=i,e+=1}return&nbsp;u}),re=B(function(t){for(var&nbsp;n=Yt(t),r=n.length,e=0,u={};r&gt;e;){var&nbsp;i=n[e];u[t[i]]=i,e+=1}return&nbsp;u}),ee=B(function(t){return&nbsp;null!=t&amp;&amp;$r(t,Et(t))}),ue=vn(-1),ie=F(function(t,n){if(&quot;function&quot;!=typeof&nbsp;n.lastIndexOf||g(n)){for(var&nbsp;r=n.length-1;r&gt;=0;){if($r(n[r],t))return&nbsp;r;r-=1}return-1}return&nbsp;n.lastIndexOf(t)}),oe=F(L(&quot;map&quot;,nt,function(t,n){switch(Object.prototype.toString.call(n)){case&quot;[object&nbsp;Function]&quot;:return&nbsp;vt(n.length,function(){return&nbsp;t.call(this,n.apply(this,arguments))});case&quot;[object&nbsp;Object]&quot;:return&nbsp;Tr(function(r,e){return&nbsp;r[e]=t(n[e]),r},{},Yt(n));default:return&nbsp;O(t,n)}})),ce=F(function(t,n){return&nbsp;Tr(function(r,e){return&nbsp;r[e]=t(n[e],e,n),r},{},Yt(n))}),se=M(function(t,n,r){return&nbsp;an(function(n,r,e){return&nbsp;t(r,e)},n,r)}),ae=Cr(o),fe=Cr(Zr(o)),le=M(function(t,n,r){return&nbsp;$r(En(t,r),n)}),pe=F(function(t,n){return&nbsp;oe(Wn(t),n)}),he=vr(O,[In,Ut]),ge=M(function(t,n,r){return&nbsp;Rn($r(n),t,r)}),de=M(function(t,n,r){return&nbsp;Rn(Ht(t),n,r)}),ye=M(Tr),me=U(4,[],function(t,n,r,e){return&nbsp;Tr(function(e,u){var&nbsp;i=r(u);return&nbsp;e[i]=t(l(i,e)?e[i]:n,u),e},{},e)}),ve=F(function(t,n){return&nbsp;Xr(i(t),n)}),be=F(function(t,n){return&nbsp;er(ct(t),n)}),xe=ye(ut,0),we=F(function(t,n){return&nbsp;Vr(t&gt;=0?n.length-t:0,n)}),je=vt(4,function(t,n,r,e){return&nbsp;Tr(t(&quot;function&quot;==typeof&nbsp;n?W(n):n),r,e)}),Oe=M(function(t,n,r){return&nbsp;gr(t,o(n,r))}),Se=F(function(t,n){return&nbsp;Or(oe($r,t),n)}),Ae=function(){var&nbsp;t=function(t){return{&quot;@@transducer/init&quot;:C.init,&quot;@@transducer/result&quot;:function(n){return&nbsp;t[&quot;@@transducer/result&quot;](n)},&quot;@@transducer/step&quot;:function(n,r){var&nbsp;e=t[&quot;@@transducer/step&quot;](n,r);return&nbsp;e[&quot;@@transducer/reduced&quot;]?a(e):e}}};return&nbsp;function(n){var&nbsp;r=t(n);return{&quot;@@transducer/init&quot;:C.init,&quot;@@transducer/result&quot;:function(t){return&nbsp;r[&quot;@@transducer/result&quot;](t)},&quot;@@transducer/step&quot;:function(t,n){return&nbsp;$t(n)?Tr(r,t,n):Tr(r,t,[n])}}}}(),Ee=function(t,n,r){var&nbsp;e,u;if(&quot;function&quot;==typeof&nbsp;t.indexOf)switch(typeof&nbsp;n){case&quot;number&quot;:if(0===n){for(e=1/n;r&lt;t.length;){if(u=t[r],0===u&amp;&amp;1/u===e)return&nbsp;r;r+=1}return-1}if(n!==n){for(;r&lt;t.length;){if(u=t[r],&quot;number&quot;==typeof&nbsp;u&amp;&amp;u!==u)return&nbsp;r;r+=1}return-1}return&nbsp;t.indexOf(n,r);case&quot;string&quot;:case&quot;boolean&quot;:case&quot;function&quot;:case&quot;undefined&quot;:return&nbsp;t.indexOf(n,r);</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>case&quot;object&quot;:if(null===n)return&nbsp;t.indexOf(n,r)}for(;r&lt;t.length;){if($r(t[r],n))return&nbsp;r;r+=1}return-1},_e=F(function(t,n){return&nbsp;oe(t,Ae(n))}),Ne=B(function(t){return&nbsp;vt(ye(un,0,pe(&quot;length&quot;,t)),function(){for(var&nbsp;n=0,r=t.length;r&gt;n;){if(!t[n].apply(this,arguments))return!1;n+=1}return!0})}),ke=B(function(t){for(var&nbsp;n=t.length,r=0;n&gt;r;){if(Ee(t,t[r],r+1)&gt;=0)return!1;r+=1}return!0}),Ie=B(function(t){return&nbsp;vt(ye(un,0,pe(&quot;length&quot;,t)),function(){for(var&nbsp;n=0,r=t.length;r&gt;n;){if(t[n].apply(this,arguments))return!0;n+=1}return!1})}),qe=F(function(t,n){return&quot;function&quot;==typeof&nbsp;t.ap?t.ap(n):&quot;function&quot;==typeof&nbsp;t?vt(Math.max(t.length,n.length),function(){return&nbsp;t.apply(this,arguments)(n.apply(this,arguments))}):Tr(function(t,r){return&nbsp;o(t,oe(r,n))},[],t)}),Ce=B(function&nbsp;Hu(t){return&nbsp;t=oe(function(t){return&quot;function&quot;==typeof&nbsp;t?t:Hu(t)},t),vt(ye(un,0,pe(&quot;length&quot;,br(t))),function(){var&nbsp;n=arguments;return&nbsp;oe(function(t){return&nbsp;pt(t,n)},t)})}),We=Dr(function(t){return&nbsp;t.apply(this,I(arguments,1))}),Pe=F(L(&quot;chain&quot;,_e,function(t,n){return&quot;function&quot;==typeof&nbsp;n?function(){return&nbsp;n.call(this,t.apply(this,arguments)).apply(this,arguments)}:Rr(!1)(oe(t,n))})),Re=B(function(t){var&nbsp;r=ye(un,0,oe(function(t){return&nbsp;t[0].length},t));return&nbsp;n(r,function(){for(var&nbsp;n=0;n&lt;t.length;){if(t[n][0].apply(this,arguments))return&nbsp;t[n][1].apply(this,arguments);n+=1}})}),Te=F(function(t,n){if(t&gt;10)throw&nbsp;new&nbsp;Error(&quot;Constructor&nbsp;with&nbsp;greater&nbsp;than&nbsp;ten&nbsp;arguments&quot;);return&nbsp;0===t?function(){return&nbsp;new&nbsp;n}:Dr(gn(t,function(t,r,e,u,i,o,c,s,a,f){switch(arguments.length){case&nbsp;1:return&nbsp;new&nbsp;n(t);case&nbsp;2:return&nbsp;new&nbsp;n(t,r);case&nbsp;3:return&nbsp;new&nbsp;n(t,r,e);case&nbsp;4:return&nbsp;new&nbsp;n(t,r,e,u);case&nbsp;5:return&nbsp;new&nbsp;n(t,r,e,u,i);case&nbsp;6:return&nbsp;new&nbsp;n(t,r,e,u,i,o);case&nbsp;7:return&nbsp;new&nbsp;n(t,r,e,u,i,o,c);case&nbsp;8:return&nbsp;new&nbsp;n(t,r,e,u,i,o,c,s);case&nbsp;9:return&nbsp;new&nbsp;n(t,r,e,u,i,o,c,s,a);case&nbsp;10:return&nbsp;new&nbsp;n(t,r,e,u,i,o,c,s,a,f)}}))}),Be=F(function(t,n){return&nbsp;vt(ye(un,0,pe(&quot;length&quot;,n)),function(){var&nbsp;r=arguments,e=this;return&nbsp;t.apply(e,O(function(t){return&nbsp;t.apply(e,r)},n))})}),Fe=me(function(t,n){return&nbsp;t+1},0),Me=F(L(&quot;dropRepeatsWith&quot;,X,function(t,n){var&nbsp;r=[],e=1,u=n.length;if(0!==u)for(r[0]=n[0];u&gt;e;)t(ue(r),n[e])||(r[r.length]=n[e]),e+=1;return&nbsp;r})),Ue=M(function(t,n,r){return&nbsp;$r(t(n),t(r))}),Le=M(function(t,n,r){return&nbsp;$r(n[t],r[t])}),ze=F(L(&quot;groupBy&quot;,Mr,me(function(t,n){return&nbsp;null==t&amp;&amp;(t=[]),t.push(n),t},null))),De=me(function(t,n){return&nbsp;n},null),Ve=F(function(t,n){return&quot;function&quot;!=typeof&nbsp;n.indexOf||g(n)?Ee(n,t,0):n.indexOf(t)}),Ke=B(function(t){return&nbsp;Be(e,t)}),He=F(function(t,n){return&nbsp;function(r){return&nbsp;function(e){return&nbsp;oe(function(t){return&nbsp;n(t,e)},r(t(e)))}}}),$e=B(function(t){return&nbsp;He(vn(t),mr(t))}),Xe=B(function(t){return&nbsp;He(En(t),gt(t))}),Ye=B(function(t){return&nbsp;He(Wn(t),ht(t))}),Ze=F(function(t,n){var&nbsp;r=vt(t,n);return&nbsp;vt(t,function(){return&nbsp;Tr(qe,oe(r,arguments[0]),I(arguments,1))})}),Ge=B(function(t){return&nbsp;xe(t)/t.length}),Je=B(function(t){var&nbsp;n=t.length;if(0===n)return&nbsp;NaN;var&nbsp;r=2-n%2,e=(n-r)/2;return&nbsp;Ge(I(t).sort(function(t,n){return&nbsp;n&gt;t?-1:t&gt;n?1:0}).slice(e,e+r))}),Qe=Ke([Xr,ve]),tu=function(){if(0===arguments.length)throw&nbsp;new&nbsp;Error(&quot;pipe&nbsp;requires&nbsp;at&nbsp;least&nbsp;one&nbsp;argument&quot;);return&nbsp;n(arguments[0].length,ye(E,arguments[0],Jn(arguments)))},nu=function(){if(0===arguments.length)throw&nbsp;new&nbsp;Error(&quot;pipeP&nbsp;requires&nbsp;at&nbsp;least&nbsp;one&nbsp;argument&quot;);return&nbsp;n(arguments[0].length,ye(_,arguments[0],Jn(arguments)))},ru=ye(hn,1),eu=F(function(t,n){return&quot;function&quot;==typeof&nbsp;n.sequence?n.sequence(t):Fn(function(t,n){return&nbsp;qe(oe(Cn,n),t)},t([]),n)}),uu=M(function(t,n,r){return&nbsp;eu(t,oe(n,r))}),iu=Pe(p),ou=function(t,n){return&nbsp;Ee(n,t,0)&gt;=0},cu=function&nbsp;$u(t,n){var&nbsp;r=function(r){var&nbsp;e=n.concat([t]);return&nbsp;ou(r,e)?&quot;&lt;Circular&gt;&quot;:$u(r,e)},e=function(t,n){return&nbsp;O(function(n){return&nbsp;N(n)+&quot;:&nbsp;&quot;+r(t[n])},n.slice().sort())};switch(Object.prototype.toString.call(t)){case&quot;[object&nbsp;Arguments]&quot;:return&quot;(function()&nbsp;{&nbsp;return&nbsp;arguments;&nbsp;}(&quot;+O(r,t).join(&quot;,&nbsp;&quot;)+&quot;))&quot;;case&quot;[object&nbsp;Array]&quot;:return&quot;[&quot;+O(r,t).concat(e(t,ve(function(t){return/^\\d+$/.test(t)},Yt(t)))).join(&quot;,&nbsp;&quot;)+&quot;]&quot;;case&quot;[object&nbsp;Boolean]&quot;:return&quot;object&quot;==typeof&nbsp;t?&quot;new&nbsp;Boolean(&quot;+r(t.valueOf())+&quot;)&quot;:t.toString();case&quot;[object&nbsp;Date]&quot;:return&quot;new&nbsp;Date(&quot;+(isNaN(t.valueOf())?r(NaN):N(q(t)))+&quot;)&quot;;case&quot;[object&nbsp;Null]&quot;:return&quot;null&quot;;case&quot;[object&nbsp;Number]&quot;:return&quot;object&quot;==typeof&nbsp;t?&quot;new&nbsp;Number(&quot;+r(t.valueOf())+&quot;)&quot;:1/t===-(1/0)?&quot;-0&quot;:t.toString(10);case&quot;[object&nbsp;String]&quot;:return&quot;object&quot;==typeof&nbsp;t?&quot;new&nbsp;String(&quot;+r(t.valueOf())+&quot;)&quot;:N(t);case&quot;[object&nbsp;Undefined]&quot;:return&quot;undefined&quot;;default:if(&quot;function&quot;==typeof&nbsp;t.toString){var&nbsp;u=t.toString();if(&quot;[object&nbsp;Object]&quot;!==u)return&nbsp;u}return&quot;{&quot;+e(t,Yt(t)).join(&quot;,&nbsp;&quot;)+&quot;}&quot;}},su=function(){if(0===arguments.length)throw&nbsp;new&nbsp;Error(&quot;compose&nbsp;requires&nbsp;at&nbsp;least&nbsp;one&nbsp;argument&quot;);return&nbsp;tu.apply(this,zn(arguments))},au=function(){return&nbsp;su.apply(this,Cn(Ut,oe(Pe,arguments)))},fu=function(){if(0===arguments.length)throw&nbsp;new&nbsp;Error(&quot;composeP&nbsp;requires&nbsp;at&nbsp;least&nbsp;one&nbsp;argument&quot;);return&nbsp;nu.apply(this,zn(arguments))},lu=B(function(t){return&nbsp;Te(t.length,t)}),pu=F(ou),hu=F(function(t,n){for(var&nbsp;r=[],e=0,u=t.length;u&gt;e;)ou(t[e],n)||ou(t[e],r)||(r[r.length]=t[e]),e+=1;return&nbsp;r}),gu=B(L(&quot;dropRepeats&quot;,X($r),Me($r))),du=B(function(t){return&nbsp;Ze(t.length,t)}),yu=F(function(t,n){var&nbsp;r={};for(var&nbsp;e&nbsp;in&nbsp;n)ou(e,t)||(r[e]=n[e]);return&nbsp;r}),mu=function(){return&nbsp;au.apply(this,zn(arguments))},vu=B(function(t){return&nbsp;cu(t,[])}),bu=F(function(t,n){return&nbsp;ve(Zr(ou)(t),n)}),xu=function(){function&nbsp;t(){this._nativeSet=&quot;function&quot;==typeof&nbsp;Set?new&nbsp;Set:null,this._items={}}function&nbsp;n(t,n,r){var&nbsp;e,u,i=typeof&nbsp;t;switch(i){case&quot;string&quot;:case&quot;number&quot;:return&nbsp;0!==t||r._items[&quot;-0&quot;]||1/t!==-(1/0)?null!==r._nativeSet?n?(e=r._nativeSet.size,r._nativeSet.add(t),u=r._nativeSet.size,u&gt;e):r._nativeSet.has(t):i&nbsp;in&nbsp;r._items?t&nbsp;in&nbsp;r._items[i]?!n:(n&amp;&amp;(r._items[i][t]=!0),n):(n&amp;&amp;(r._items[i]={},r._items[i][t]=!0),n):(n&amp;&amp;(r._items[&quot;-0&quot;]=!0),n);case&quot;boolean&quot;:if(i&nbsp;in&nbsp;r._items){var&nbsp;o=t?1:0;return&nbsp;r._items[i][o]?!n:(n&amp;&amp;(r._items[i][o]=!0),n)}return&nbsp;n&amp;&amp;(r._items[i]=t?[!1,!0]:[!0,!1]),n;case&quot;function&quot;:return&nbsp;null!==r._nativeSet?n?(e=r._nativeSet.size,r._nativeSet.add(t),u=r._nativeSet.size,u&gt;e):r._nativeSet.has(t):i&nbsp;in&nbsp;r._items?ou(t,r._items[i])?!n:(n&amp;&amp;r._items[i].push(t),n):(n&amp;&amp;(r._items[i]=[t]),n);case&quot;undefined&quot;:return&nbsp;r._items[i]?!n:(n&amp;&amp;(r._items[i]=!0),n);case&quot;object&quot;:if(null===t)return&nbsp;r._items[&quot;null&quot;]?!n:(n&amp;&amp;(r._items[&quot;null&quot;]=!0),n);default:return&nbsp;i=Object.prototype.toString.call(t),i&nbsp;in&nbsp;r._items?ou(t,r._items[i])?!n:(n&amp;&amp;r._items[i].push(t),n):(n&amp;&amp;(r._items[i]=[t]),n)}}return&nbsp;t.prototype.add=function(t){return&nbsp;n(t,!0,this)},t.prototype.has=function(t){return&nbsp;n(t,!1,this)},t}(),wu=F(function(t,n){return&nbsp;d(t)?function(){return&nbsp;t.apply(this,arguments)&amp;&amp;n.apply(this,arguments)}:du(st)(t,n)}),ju=du(mn),Ou=F(function(t,n){return&nbsp;d(t)?function(){return&nbsp;t.apply(this,arguments)||n.apply(this,arguments)}:du(On)(t,n)}),Su=F(function(t,n){return&nbsp;vt(t+1,function(){var&nbsp;r=arguments[t];if(null!=r&amp;&amp;Ht(Function,r[n]))return&nbsp;r[n].apply(r,I(arguments,0,t));throw&nbsp;new&nbsp;TypeError(vu(r)+&#39;&nbsp;does&nbsp;not&nbsp;have&nbsp;a&nbsp;method&nbsp;named&nbsp;&quot;&#39;+n+&#39;&quot;&#39;)})}),Au=Su(1,&quot;join&quot;),Eu=B(function(t){var&nbsp;r={};return&nbsp;n(t.length,function(){var&nbsp;n=vu(arguments);return&nbsp;l(n,r)||(r[n]=t.apply(this,arguments)),r[n]})}),_u=Su(1,&quot;split&quot;),Nu=F(function(t,n){if(!x(t))throw&nbsp;new&nbsp;TypeError(&quot;‘test’&nbsp;requires&nbsp;a&nbsp;value&nbsp;of&nbsp;type&nbsp;RegExp&nbsp;as&nbsp;its&nbsp;first&nbsp;argument;&nbsp;received&nbsp;&quot;+vu(t));return&nbsp;u(t).test(n)}),ku=Su(0,&quot;toLowerCase&quot;),Iu=Su(0,&quot;toUpperCase&quot;),qu=F(function(t,n){for(var&nbsp;r,e,u=new&nbsp;xu,i=[],o=0;o&lt;n.length;)e=n[o],r=t(e),u.add(r)&amp;&amp;i.push(e),o+=1;return&nbsp;i}),Cu=Zr(Su(1,&quot;concat&quot;)),Wu=F(function(t,n){return&nbsp;Cu(hu(t,n),hu(n,t))}),Pu=M(function(t,n,r){return&nbsp;Cu(wt(t,n,r),wt(t,r,n))}),Ru=qu(Ut),Tu=F(function(t,n){var&nbsp;r,e;return&nbsp;t.length&gt;n.length?(r=t,e=n):(r=n,e=t),Ru(s(Zr(ou)(r),e))}),Bu=F(su(Ru,o)),Fu={F:kr,T:Ir,__:t,add:ut,addIndex:Ur,adjust:it,all:ot,allPass:Ne,allUniq:ke,always:ct,and:st,any:at,anyPass:Ie,ap:qe,aperture:ft,append:lt,apply:pt,applySpec:Ce,assoc:ht,assocPath:gt,binary:Lr,bind:dt,both:wu,call:We,chain:Pe,clamp:yt,clone:zr,comparator:mt,complement:ju,compose:su,composeK:au,composeP:fu,concat:Cu,cond:Re,construct:lu,constructN:Te,contains:pu,converge:Be,countBy:Fe,curry:Dr,curryN:vt,dec:bt,defaultTo:xt,difference:hu,differenceWith:wt,dissoc:jt,dissocPath:Ot,divide:St,drop:Vr,dropLast:Kr,dropLastWhile:Hr,dropRepeats:gu,dropRepeatsWith:Me,dropWhile:At,either:Ou,empty:Et,eqBy:Ue,eqProps:Le,equals:$r,evolve:_t,filter:Xr,find:Nt,findIndex:kt,findLast:It,findLastIndex:qt,flatten:Yr,flip:Zr,forEach:Ct,fromPairs:Wt,groupBy:ze,groupWith:Pt,gt:Rt,gte:Tt,has:Bt,hasIn:Ft,head:Gr,identical:Mt,identity:Ut,ifElse:Lt,inc:zt,indexBy:De,indexOf:Ve,init:Jr,insert:Dt,insertAll:Vt,intersection:Tu,intersectionWith:Qr,intersperse:Kt,into:te,invert:ne,invertObj:re,invoker:Su,is:Ht,isArrayLike:$t,isEmpty:ee,isNil:Xt,join:Au,juxt:Ke,keys:Yt,keysIn:Zt,last:ue,lastIndexOf:ie,length:Gt,lens:He,lensIndex:$e,lensPath:Xe,lensProp:Ye,lift:du,liftN:Ze,lt:Jt,lte:Qt,map:oe,mapAccum:tn,mapAccumRight:nn,mapObjIndexed:ce,match:rn,mathMod:en,max:un,maxBy:on,mean:Ge,median:Je,memoize:Eu,merge:cn,mergeAll:sn,mergeWith:se,mergeWithKey:an,min:fn,minBy:ln,modulo:pn,multiply:hn,nAry:gn,negate:dn,none:yn,not:mn,nth:vn,nthArg:bn,objOf:xn,of:wn,omit:yu,once:jn,or:On,over:Sn,pair:An,partial:ae,partialRight:fe,partition:Qe,path:En,pathEq:le,pathOr:_n,pathSatisfies:Nn,pick:kn,pickAll:In,pickBy:qn,pipe:tu,pipeK:mu,pipeP:nu,pluck:pe,prepend:Cn,product:ru,project:he,prop:Wn,propEq:ge,propIs:de,propOr:Pn,propSatisfies:Rn,props:Tn,range:Bn,reduce:ye,reduceBy:me,reduceRight:Fn,reduced:Mn,reject:ve,remove:Un,repeat:be,replace:Ln,reverse:zn,scan:Dn,sequence:eu,set:Vn,slice:Kn,sort:Hn,sortBy:$n,split:_u,splitAt:Xn,splitEvery:Yn,splitWhen:Zn,subtract:Gn,sum:xe,symmetricDifference:Wu,symmetricDifferenceWith:Pu,tail:Jn,take:Qn,takeLast:we,takeLastWhile:tr,takeWhile:nr,tap:rr,test:Nu,times:er,toLower:ku,toPairs:ur,toPairsIn:ir,toString:vu,toUpper:Iu,transduce:je,transpose:or,traverse:uu,trim:cr,tryCatch:sr,type:ar,unapply:fr,unary:lr,uncurryN:pr,unfold:hr,union:Bu,unionWith:Oe,uniq:Ru,uniqBy:qu,uniqWith:gr,unless:dr,unnest:iu,until:yr,update:mr,useWith:vr,values:br,valuesIn:xr,view:wr,when:jr,where:Or,whereEq:Se,without:bu,wrap:Sr,xprod:Ar,zip:Er,zipObj:_r,zipWith:Nr};&quot;object&quot;==typeof&nbsp;exports?module.exports=Fu:&quot;function&quot;==typeof&nbsp;define&amp;&amp;define.amd?define(function(){return&nbsp;Fu}):this.R=Fu}.call(this),e=&quot;0.20.1&quot;,void&nbsp;r(&quot;Ramda&nbsp;v&quot;+e+&quot;&nbsp;loaded&quot;))}(window,document);</span></span></div></pre></li>\n</ol>\n"
      ],
      "contentsRaw": "# Ramda Bookmarklet\n\nUse this bookmarklet to load Ramda on any website. To \"install\":\n\n1. Create a new bookmark in your bookmarks bar (what it points to doesn't\n   matter, any page)\n\n2. Edit the new bookmark and replace the `URL` with the following:\n\n    ```javascript\n    javascript:!function(t,n){function r(r){var e=n.createElement(\"div\"),u=n.body;e.innerHTML=r,e.style.position=\"fixed\",e.style.top=\"20px\",e.style.right=\"20px\",e.style.padding=\"5px 10px\",e.style.zIndex=\"1001\",e.style.fontSize=\"18px\",e.style.color=\"#222\",e.style.backgroundColor=\"#DFF2BF\",e.style.textAlign=\"center\",e.style.border=\"solid 2px black\",e.style.borderRadius=\"25px\",u.appendChild(e),t.setTimeout(u.removeChild.bind(u,e),2500)}var e=\"???\";return\"undefined\"!=typeof t.R?r(\"This page already using ramda\"):(function(){\"use strict\";var t={\"@@functional/placeholder\":!0},n=function(t,n){switch(t){case 0:return function(){return n.apply(this,arguments)};case 1:return function(t){return n.apply(this,arguments)};case 2:return function(t,r){return n.apply(this,arguments)};case 3:return function(t,r,e){return n.apply(this,arguments)};case 4:return function(t,r,e,u){return n.apply(this,arguments)};case 5:return function(t,r,e,u,i){return n.apply(this,arguments)};case 6:return function(t,r,e,u,i,o){return n.apply(this,arguments)};case 7:return function(t,r,e,u,i,o,c){return n.apply(this,arguments)};case 8:return function(t,r,e,u,i,o,c,s){return n.apply(this,arguments)};case 9:return function(t,r,e,u,i,o,c,s,a){return n.apply(this,arguments)};case 10:return function(t,r,e,u,i,o,c,s,a,f){return n.apply(this,arguments)};default:throw new Error(\"First argument to _arity must be a non-negative integer no greater than ten\")}},r=function(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r},e=function(){return Array.prototype.slice.call(arguments)},u=function(t){return new RegExp(t.source,(t.global?\"g\":\"\")+(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.sticky?\"y\":\"\")+(t.unicode?\"u\":\"\"))},i=function(t){return function(){return!t.apply(this,arguments)}},o=function(t,n){t=t||[],n=n||[];var r,e=t.length,u=n.length,i=[];for(r=0;e>r;)i[i.length]=t[r],r+=1;for(r=0;u>r;)i[i.length]=n[r],r+=1;return i},c=function(t,n,r){for(var e=0,u=r.length;u>e;){if(t(n,r[e]))return!0;e+=1}return!1},s=function(t,n){for(var r=0,e=n.length,u=[];e>r;)t(n[r])&&(u[u.length]=n[r]),r+=1;return u},a=function(t){return{\"@@transducer/value\":t,\"@@transducer/reduced\":!0}},f=function(t){var n=String(t).match(/^function (\\w*)/);return null==n?\"\":n[1]},l=function(t,n){return Object.prototype.hasOwnProperty.call(n,t)},p=function(t){return t},h=function(){var t=Object.prototype.toString;return\"[object Arguments]\"===t.call(arguments)?function(n){return\"[object Arguments]\"===t.call(n)}:function(t){return l(\"callee\",t)}}(),g=Array.isArray||function(t){return null!=t&&t.length>=0&&\"[object Array]\"===Object.prototype.toString.call(t)},d=function(t){return\"[object Function]\"===Object.prototype.toString.call(t)},y=Number.isInteger||function(t){return t<<0===t},m=function(t){return\"[object Number]\"===Object.prototype.toString.call(t)},v=function(t){return\"[object Object]\"===Object.prototype.toString.call(t)},b=function(t){return null!=t&&\"object\"==typeof t&&t[\"@@functional/placeholder\"]===!0},x=function(t){return\"[object RegExp]\"===Object.prototype.toString.call(t)},w=function(t){return\"[object String]\"===Object.prototype.toString.call(t)},j=function(t){return\"function\"==typeof t[\"@@transducer/step\"]},O=function(t,n){for(var r=0,e=n.length,u=Array(e);e>r;)u[r]=t(n[r]),r+=1;return u},S=function(t){if(null==t)throw new TypeError(\"Cannot convert undefined or null to object\");for(var n=Object(t),r=1,e=arguments.length;e>r;){var u=arguments[r];if(null!=u)for(var i in u)l(i,u)&&(n[i]=u[i]);r+=1}return n},A=function(t){return[t]},E=function(t,n){return function(){return n.call(this,t.apply(this,arguments))}},_=function(t,n){return function(){var r=this;return t.apply(r,arguments).then(function(t){return n.call(r,t)})}},N=function(t){var n=t.replace(/\\\\/g,\"\\\\\\\\\").replace(/[\\b]/g,\"\\\\b\").replace(/\\f/g,\"\\\\f\").replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\").replace(/\\t/g,\"\\\\t\").replace(/\\v/g,\"\\\\v\").replace(/\\0/g,\"\\\\0\");return'\"'+n.replace(/\"/g,'\\\\\"')+'\"'},k=function(t){return t&&t[\"@@transducer/reduced\"]?t:{\"@@transducer/value\":t,\"@@transducer/reduced\":!0}},I=function Mu(t,n,r){switch(arguments.length){case 1:return Mu(t,0,t.length);case 2:return Mu(t,n,t.length);default:for(var e=[],u=0,i=Math.max(0,Math.min(t.length,r)-n);i>u;)e[u]=t[n+u],u+=1;return e}},q=function(){var t=function(t){return(10>t?\"0\":\"\")+t};return\"function\"==typeof Date.prototype.toISOString?function(t){return t.toISOString()}:function(n){return n.getUTCFullYear()+\"-\"+t(n.getUTCMonth()+1)+\"-\"+t(n.getUTCDate())+\"T\"+t(n.getUTCHours())+\":\"+t(n.getUTCMinutes())+\":\"+t(n.getUTCSeconds())+\".\"+(n.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+\"Z\"}}(),C={init:function(){return this.xf[\"@@transducer/init\"]()},result:function(t){return this.xf[\"@@transducer/result\"](t)}},W=function(){function t(t){this.f=t}return t.prototype[\"@@transducer/init\"]=function(){throw new Error(\"init not implemented on XWrap\")},t.prototype[\"@@transducer/result\"]=function(t){return t},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(t,n)},function(n){return new t(n)}}(),P=function(t,n){for(var r=0,e=n.length-(t-1),u=new Array(e>=0?e:0);e>r;)u[r]=I(n,r,r+t),r+=1;return u},R=\"function\"==typeof Object.assign?Object.assign:S,T=function(t,n){return function(){var r=arguments.length;if(0===r)return n();var e=arguments[r-1];return g(e)||\"function\"!=typeof e[t]?n.apply(this,arguments):e[t].apply(e,I(arguments,0,r-1))}},B=function(t){return function n(r){return 0===arguments.length||b(r)?n:t.apply(this,arguments)}},F=function(t){return function n(r,e){switch(arguments.length){case 0:return n;case 1:return b(r)?n:B(function(n){return t(r,n)});default:return b(r)&&b(e)?n:b(r)?B(function(n){return t(n,e)}):b(e)?B(function(n){return t(r,n)}):t(r,e)}}},M=function(t){return function n(r,e,u){switch(arguments.length){case 0:return n;case 1:return b(r)?n:F(function(n,e){return t(r,n,e)});case 2:return b(r)&&b(e)?n:b(r)?F(function(n,r){return t(n,e,r)}):b(e)?F(function(n,e){return t(r,n,e)}):B(function(n){return t(r,e,n)});default:return b(r)&&b(e)&&b(u)?n:b(r)&&b(e)?F(function(n,r){return t(n,r,u)}):b(r)&&b(u)?F(function(n,r){return t(n,e,r)}):b(e)&&b(u)?F(function(n,e){return t(r,n,e)}):b(r)?B(function(n){return t(n,e,u)}):b(e)?B(function(n){return t(r,n,u)}):b(u)?B(function(n){return t(r,e,n)}):t(r,e,u)}}},U=function Uu(t,r,e){return function(){for(var u=[],i=0,o=t,c=0;c<r.length||i<arguments.length;){var s;c<r.length&&(!b(r[c])||i>=arguments.length)?s=r[c]:(s=arguments[i],i+=1),u[c]=s,b(s)||(o-=1),c+=1}return 0>=o?e.apply(this,u):n(o,Uu(t,u,e))}},L=function(t,n,r){return function(){var e=arguments.length;if(0===e)return r();var u=arguments[e-1];if(!g(u)){var i=I(arguments,0,e-1);if(\"function\"==typeof u[t])return u[t].apply(u,i);if(j(u)){var o=n.apply(null,i);return o(u)}}return r.apply(this,arguments)}},z=function(t,n){for(var r=n.length-1;r>=0&&t(n[r]);)r-=1;return I(n,0,r+1)},D=function(){function t(t,n){this.xf=n,this.f=t,this.all=!0}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.all&&(t=this.xf[\"@@transducer/step\"](t,!0)),this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)||(this.all=!1,t=k(this.xf[\"@@transducer/step\"](t,!1))),t},F(function(n,r){return new t(n,r)})}(),V=function(){function t(t,n){this.xf=n,this.f=t,this.any=!1}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.any||(t=this.xf[\"@@transducer/step\"](t,!1)),this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)&&(this.any=!0,t=k(this.xf[\"@@transducer/step\"](t,!0))),t},F(function(n,r){return new t(n,r)})}(),K=function(){function t(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(t)}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.acc=null,this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.store(n),this.full?this.xf[\"@@transducer/step\"](t,this.getCopy()):t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},t.prototype.getCopy=function(){return o(I(this.acc,this.pos),I(this.acc,0,this.pos))},F(function(n,r){return new t(n,r)})}(),H=function(){function t(t,n){this.xf=n,this.n=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){return this.n>0?(this.n-=1,t):this.xf[\"@@transducer/step\"](t,n)},F(function(n,r){return new t(n,r)})}(),$=function(){function t(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(t)}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.acc=null,this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.full&&(t=this.xf[\"@@transducer/step\"](t,this.acc[this.pos])),this.store(n),t},t.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},F(function(n,r){return new t(n,r)})}(),X=function(){function t(t,n){this.xf=n,this.pred=t,this.lastValue=void 0,this.seenFirstValue=!1}return t.prototype[\"@@transducer/init\"]=function(){return this.xf[\"@@transducer/init\"]()},t.prototype[\"@@transducer/result\"]=function(t){return this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){var r=!1;return this.seenFirstValue?this.pred(this.lastValue,n)&&(r=!0):this.seenFirstValue=!0,this.lastValue=n,r?t:this.xf[\"@@transducer/step\"](t,n)},F(function(n,r){return new t(n,r)})}(),Y=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){if(this.f){if(this.f(n))return t;this.f=null}return this.xf[\"@@transducer/step\"](t,n)},F(function(n,r){return new t(n,r)})}(),Z=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)?this.xf[\"@@transducer/step\"](t,n):t},F(function(n,r){return new t(n,r)})}(),G=function(){function t(t,n){this.xf=n,this.f=t,this.found=!1}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.found||(t=this.xf[\"@@transducer/step\"](t,void 0)),this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)&&(this.found=!0,t=k(this.xf[\"@@transducer/step\"](t,n))),t},F(function(n,r){return new t(n,r)})}(),J=function(){function t(t,n){this.xf=n,this.f=t,this.idx=-1,this.found=!1}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.found||(t=this.xf[\"@@transducer/step\"](t,-1)),this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.idx+=1,this.f(n)&&(this.found=!0,t=k(this.xf[\"@@transducer/step\"](t,this.idx))),t},F(function(n,r){return new t(n,r)})}(),Q=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.xf[\"@@transducer/result\"](this.xf[\"@@transducer/step\"](t,this.last))},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)&&(this.last=n),t},F(function(n,r){return new t(n,r)})}(),tt=function(){function t(t,n){this.xf=n,this.f=t,this.idx=-1,this.lastIdx=-1}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.xf[\"@@transducer/result\"](this.xf[\"@@transducer/step\"](t,this.lastIdx))},t.prototype[\"@@transducer/step\"]=function(t,n){return this.idx+=1,this.f(n)&&(this.lastIdx=this.idx),t},F(function(n,r){return new t(n,r)})}(),nt=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){return this.xf[\"@@transducer/step\"](t,this.f(n))},F(function(n,r){return new t(n,r)})}(),rt=function(){function t(t,n){this.xf=n,this.n=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){return 0===this.n?k(t):(this.n-=1,this.xf[\"@@transducer/step\"](t,n))},F(function(n,r){return new t(n,r)})}(),et=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=C.result,t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)?this.xf[\"@@transducer/step\"](t,n):k(t)},F(function(n,r){return new t(n,r)})}(),ut=F(function(t,n){return Number(t)+Number(n)}),it=M(function(t,n,r){if(n>=r.length||n<-r.length)return r;var e=0>n?r.length:0,u=e+n,i=o(r);return i[u]=t(r[u]),i}),ot=F(L(\"all\",D,function(t,n){for(var r=0;r<n.length;){if(!t(n[r]))return!1;r+=1}return!0})),ct=B(function(t){return function(){return t}}),st=F(function(t,n){return t&&n}),at=F(L(\"any\",V,function(t,n){for(var r=0;r<n.length;){if(t(n[r]))return!0;r+=1}return!1})),ft=F(L(\"aperture\",K,P)),lt=F(function(t,n){return o(n,[t])}),pt=F(function(t,n){return t.apply(this,n)}),ht=M(function(t,n,r){var e={};for(var u in r)e[u]=r[u];return e[t]=n,e}),gt=M(function Lu(t,n,r){switch(t.length){case 0:return n;case 1:return ht(t[0],n,r);default:return ht(t[0],Lu(I(t,1),n,Object(r[t[0]])),r)}}),dt=F(function(t,r){return n(t.length,function(){return t.apply(r,arguments)})}),yt=M(function(t,n,r){if(t>n)throw new Error(\"min must not be greater than max in clamp(min, max, value)\");return t>r?t:r>n?n:r}),mt=B(function(t){return function(n,r){return t(n,r)?-1:t(r,n)?1:0}}),vt=F(function(t,r){return 1===t?B(r):n(t,U(t,[],r))}),bt=ut(-1),xt=F(function(t,n){return null==n||n!==n?t:n}),wt=M(function(t,n,r){for(var e=[],u=0,i=n.length;i>u;)c(t,n[u],r)||c(t,n[u],e)||e.push(n[u]),u+=1;return e}),jt=F(function(t,n){var r={};for(var e in n)e!==t&&(r[e]=n[e]);return r}),Ot=F(function zu(t,n){switch(t.length){case 0:return n;case 1:return jt(t[0],n);default:var r=t[0],e=I(t,1);return null==n[r]?n:ht(r,zu(e,n[r]),n)}}),St=F(function(t,n){return t/n}),At=F(L(\"dropWhile\",Y,function(t,n){for(var r=0,e=n.length;e>r&&t(n[r]);)r+=1;return I(n,r)})),Et=B(function(t){return null!=t&&\"function\"==typeof t.empty?t.empty():null!=t&&null!=t.constructor&&\"function\"==typeof t.constructor.empty?t.constructor.empty():g(t)?[]:w(t)?\"\":v(t)?{}:h(t)?function(){return arguments}():void 0}),_t=F(function Du(t,n){var r,e,u,i={};for(e in n)r=t[e],u=typeof r,i[e]=\"function\"===u?r(n[e]):\"object\"===u?Du(t[e],n[e]):n[e];return i}),Nt=F(L(\"find\",G,function(t,n){for(var r=0,e=n.length;e>r;){if(t(n[r]))return n[r];r+=1}})),kt=F(L(\"findIndex\",J,function(t,n){for(var r=0,e=n.length;e>r;){if(t(n[r]))return r;r+=1}return-1})),It=F(L(\"findLast\",Q,function(t,n){for(var r=n.length-1;r>=0;){if(t(n[r]))return n[r];r-=1}})),qt=F(L(\"findLastIndex\",tt,function(t,n){for(var r=n.length-1;r>=0;){if(t(n[r]))return r;r-=1}return-1})),Ct=F(T(\"forEach\",function(t,n){for(var r=n.length,e=0;r>e;)t(n[e]),e+=1;return n})),Wt=B(function(t){for(var n=0,r=t.length,e={};r>n;)g(t[n])&&t[n].length&&(e[t[n][0]]=t[n][1]),n+=1;return e}),Pt=F(function(t,n){for(var r=[],e=0,u=n.length;u>e;){for(var i=e+1;u>i&&t(n[e],n[i]);)i+=1;r.push(n.slice(e,i)),e=i}return r}),Rt=F(function(t,n){return t>n}),Tt=F(function(t,n){return t>=n}),Bt=F(l),Ft=F(function(t,n){return t in n}),Mt=F(function(t,n){return t===n?0!==t||1/t===1/n:t!==t&&n!==n}),Ut=B(p),Lt=M(function(t,n,r){return vt(Math.max(t.length,n.length,r.length),function(){return t.apply(this,arguments)?n.apply(this,arguments):r.apply(this,arguments)})}),zt=ut(1),Dt=M(function(t,n,r){t=t<r.length&&t>=0?t:r.length;var e=I(r);return e.splice(t,0,n),e}),Vt=M(function(t,n,r){return t=t<r.length&&t>=0?t:r.length,o(o(I(r,0,t),n),I(r,t))}),Kt=F(T(\"intersperse\",function(t,n){for(var r=[],e=0,u=n.length;u>e;)e===u-1?r.push(n[e]):r.push(n[e],t),e+=1;return r})),Ht=F(function(t,n){return null!=n&&n.constructor===t||n instanceof t}),$t=B(function(t){return g(t)?!0:t?\"object\"!=typeof t?!1:t instanceof String?!1:1===t.nodeType?!!t.length:0===t.length?!0:t.length>0?t.hasOwnProperty(0)&&t.hasOwnProperty(t.length-1):!1:!1}),Xt=B(function(t){return null==t}),Yt=function(){var t=!{toString:null}.propertyIsEnumerable(\"toString\"),n=[\"constructor\",\"valueOf\",\"isPrototypeOf\",\"toString\",\"propertyIsEnumerable\",\"hasOwnProperty\",\"toLocaleString\"],r=function(){return arguments.propertyIsEnumerable(\"length\")}(),e=function(t,n){for(var r=0;r<t.length;){if(t[r]===n)return!0;r+=1}return!1};return B(\"function\"!=typeof Object.keys||r?function(u){if(Object(u)!==u)return[];var i,o,c=[],s=r&&h(u);for(i in u)!l(i,u)||s&&\"length\"===i||(c[c.length]=i);if(t)for(o=n.length-1;o>=0;)i=n[o],l(i,u)&&!e(c,i)&&(c[c.length]=i),o-=1;return c}:function(t){return Object(t)!==t?[]:Object.keys(t)})}(),Zt=B(function(t){var n,r=[];for(n in t)r[r.length]=n;return r}),Gt=B(function(t){return null!=t&&Ht(Number,t.length)?t.length:NaN}),Jt=F(function(t,n){return n>t}),Qt=F(function(t,n){return n>=t}),tn=M(function(t,n,r){for(var e=0,u=r.length,i=[],o=[n];u>e;)o=t(o[0],r[e]),i[e]=o[1],e+=1;return[o[0],i]}),nn=M(function(t,n,r){for(var e=r.length-1,u=[],i=[n];e>=0;)i=t(i[0],r[e]),u[e]=i[1],e-=1;return[i[0],u]}),rn=F(function(t,n){return n.match(t)||[]}),en=F(function(t,n){return y(t)?!y(n)||1>n?NaN:(t%n+n)%n:NaN}),un=F(function(t,n){return n>t?n:t}),on=M(function(t,n,r){return t(r)>t(n)?r:n}),cn=F(function(t,n){return R({},t,n)}),sn=B(function(t){return R.apply(null,[{}].concat(t))}),an=M(function(t,n,r){var e,u={};for(e in n)l(e,n)&&(u[e]=l(e,r)?t(e,n[e],r[e]):n[e]);for(e in r)l(e,r)&&!l(e,u)&&(u[e]=r[e]);return u}),fn=F(function(t,n){return t>n?n:t}),ln=M(function(t,n,r){return t(r)<t(n)?r:n}),pn=F(function(t,n){return t%n}),hn=F(function(t,n){return t*n}),gn=F(function(t,n){switch(t){case 0:return function(){return n.call(this)};case 1:return function(t){return n.call(this,t)};case 2:return function(t,r){return n.call(this,t,r)};case 3:return function(t,r,e){return n.call(this,t,r,e)};case 4:return function(t,r,e,u){return n.call(this,t,r,e,u)};case 5:return function(t,r,e,u,i){return n.call(this,t,r,e,u,i)};case 6:return function(t,r,e,u,i,o){return n.call(this,t,r,e,u,i,o)};case 7:return function(t,r,e,u,i,o,c){return n.call(this,t,r,e,u,i,o,c)};case 8:return function(t,r,e,u,i,o,c,s){return n.call(this,t,r,e,u,i,o,c,s)};case 9:return function(t,r,e,u,i,o,c,s,a){return n.call(this,t,r,e,u,i,o,c,s,a)};case 10:return function(t,r,e,u,i,o,c,s,a,f){return n.call(this,t,r,e,u,i,o,c,s,a,f)};default:throw new Error(\"First argument to nAry must be a non-negative integer no greater than ten\")}}),dn=B(function(t){return-t}),yn=F(i(L(\"any\",V,at))),mn=B(function(t){return!t}),vn=F(function(t,n){var r=0>t?n.length+t:t;return w(n)?n.charAt(r):n[r]}),bn=B(function(t){return function(){return vn(t,arguments)}}),xn=F(function(t,n){var r={};return r[t]=n,r}),wn=B(A),jn=B(function(t){var r,e=!1;return n(t.length,function(){return e?r:(e=!0,r=t.apply(this,arguments))})}),On=F(function(t,n){return t||n}),Sn=function(){var t=function(n){return{value:n,map:function(r){return t(r(n))}}};return M(function(n,r,e){return n(function(n){return t(r(n))})(e).value})}(),An=F(function(t,n){return[t,n]}),En=F(function(t,n){for(var r=n,e=0;e<t.length;){if(null==r)return;r=r[t[e]],e+=1}return r}),_n=M(function(t,n,r){return xt(t,En(n,r))}),Nn=M(function(t,n,r){return n.length>0&&t(En(n,r))}),kn=F(function(t,n){for(var r={},e=0;e<t.length;)t[e]in n&&(r[t[e]]=n[t[e]]),e+=1;return r}),In=F(function(t,n){for(var r={},e=0,u=t.length;u>e;){var i=t[e];r[i]=n[i],e+=1}return r}),qn=F(function(t,n){var r={};for(var e in n)t(n[e],e,n)&&(r[e]=n[e]);return r}),Cn=F(function(t,n){return o([t],n)}),Wn=F(function(t,n){return n[t]}),Pn=M(function(t,n,r){return null!=r&&l(n,r)?r[n]:t}),Rn=M(function(t,n,r){return t(r[n])}),Tn=F(function(t,n){for(var r=t.length,e=[],u=0;r>u;)e[u]=n[t[u]],u+=1;return e}),Bn=F(function(t,n){if(!m(t)||!m(n))throw new TypeError(\"Both arguments to range must be numbers\");for(var r=[],e=t;n>e;)r.push(e),e+=1;return r}),Fn=M(function(t,n,r){for(var e=r.length-1;e>=0;)n=t(n,r[e]),e-=1;return n}),Mn=B(k),Un=M(function(t,n,r){return o(I(r,0,Math.min(t,r.length)),I(r,Math.min(r.length,t+n)))}),Ln=M(function(t,n,r){return r.replace(t,n)}),zn=B(function(t){return w(t)?t.split(\"\").reverse().join(\"\"):I(t).reverse()}),Dn=M(function(t,n,r){for(var e=0,u=r.length,i=[n];u>e;)n=t(n,r[e]),i[e+1]=n,e+=1;return i}),Vn=M(function(t,n,r){return Sn(t,ct(n),r)}),Kn=M(T(\"slice\",function(t,n,r){return Array.prototype.slice.call(r,t,n)})),Hn=F(function(t,n){return I(n).sort(t)}),$n=F(function(t,n){return I(n).sort(function(n,r){var e=t(n),u=t(r);return u>e?-1:e>u?1:0})}),Xn=F(function(t,n){return[Kn(0,t,n),Kn(t,Gt(n),n)]}),Yn=F(function(t,n){if(0>=t)throw new Error(\"First argument to splitEvery must be a positive integer\");for(var r=[],e=0;e<n.length;)r.push(Kn(e,e+=t,n));return r}),Zn=F(function(t,n){for(var r=0,e=n.length,u=[];e>r&&!t(n[r]);)u.push(n[r]),r+=1;return[u,I(n,r)]}),Gn=F(function(t,n){return Number(t)-Number(n)}),Jn=T(\"tail\",Kn(1,1/0)),Qn=F(L(\"take\",rt,function(t,n){return Kn(0,0>t?1/0:t,n)})),tr=F(function(t,n){for(var r=n.length-1;r>=0&&t(n[r]);)r-=1;return I(n,r+1,1/0)}),nr=F(L(\"takeWhile\",et,function(t,n){for(var r=0,e=n.length;e>r&&t(n[r]);)r+=1;return I(n,0,r)})),rr=F(function(t,n){return t(n),n}),er=F(function(t,n){var r,e=Number(n),u=0;if(0>e||isNaN(e))throw new RangeError(\"n must be a non-negative number\");for(r=new Array(e);e>u;)r[u]=t(u),u+=1;return r}),ur=B(function(t){var n=[];for(var r in t)l(r,t)&&(n[n.length]=[r,t[r]]);return n}),ir=B(function(t){var n=[];for(var r in t)n[n.length]=[r,t[r]];return n}),or=B(function(t){for(var n=0,r=[];n<t.length;){for(var e=t[n],u=0;u<e.length;)\"undefined\"==typeof r[u]&&(r[u]=[]),r[u].push(e[u]),u+=1;n+=1}return r}),cr=function(){var t=\"\t\\n\u000b\\f\\r   ᠎             　\\u2028\\u2029\\ufeff\",n=\"​\",r=\"function\"==typeof String.prototype.trim;return B(r&&!t.trim()&&n.trim()?function(t){return t.trim()}:function(n){var r=new RegExp(\"^[\"+t+\"][\"+t+\"]*\"),e=new RegExp(\"[\"+t+\"][\"+t+\"]*$\");return n.replace(r,\"\").replace(e,\"\")})}(),sr=F(function(t,r){return n(t.length,function(){try{return t.apply(this,arguments)}catch(n){return r.apply(this,o([n],arguments))}})}),ar=B(function(t){return null===t?\"Null\":void 0===t?\"Undefined\":Object.prototype.toString.call(t).slice(8,-1)}),fr=B(function(t){return function(){return t(I(arguments))}}),lr=B(function(t){return gn(1,t)}),pr=F(function(t,n){return vt(t,function(){for(var r,e=1,u=n,i=0;t>=e&&\"function\"==typeof u;)r=e===t?arguments.length:i+u.length,u=u.apply(this,I(arguments,i,r)),e+=1,i=r;return u})}),hr=F(function(t,n){for(var r=t(n),e=[];r&&r.length;)e[e.length]=r[0],r=t(r[1]);return e}),gr=F(function(t,n){for(var r,e=0,u=n.length,i=[];u>e;)r=n[e],c(t,r,i)||(i[i.length]=r),e+=1;return i}),dr=M(function(t,n,r){return t(r)?r:n(r)}),yr=M(function(t,n,r){for(var e=r;!t(e);)e=n(e);return e}),mr=M(function(t,n,r){return it(ct(n),t,r)}),vr=F(function(t,n){return vt(n.length,function(){for(var r=[],e=0;e<n.length;)r.push(n[e].call(this,arguments[e])),e+=1;return t.apply(this,r.concat(I(arguments,n.length)))})}),br=B(function(t){for(var n=Yt(t),r=n.length,e=[],u=0;r>u;)e[u]=t[n[u]],u+=1;return e}),xr=B(function(t){var n,r=[];for(n in t)r[r.length]=t[n];return r}),wr=function(){var t=function(t){return{value:t,map:function(){return this}}};return F(function(n,r){return n(t)(r).value})}(),jr=M(function(t,n,r){return t(r)?n(r):r}),Or=F(function(t,n){for(var r in t)if(l(r,t)&&!t[r](n[r]))return!1;return!0}),Sr=F(function(t,n){return vt(t.length,function(){return n.apply(this,o([t],arguments))})}),Ar=F(function(t,n){for(var r,e=0,u=t.length,i=n.length,o=[];u>e;){for(r=0;i>r;)o[o.length]=[t[e],n[r]],r+=1;e+=1}return o}),Er=F(function(t,n){for(var r=[],e=0,u=Math.min(t.length,n.length);u>e;)r[e]=[t[e],n[e]],e+=1;return r}),_r=F(function(t,n){for(var r=0,e=Math.min(t.length,n.length),u={};e>r;)u[t[r]]=n[r],r+=1;return u}),Nr=M(function(t,n,r){for(var e=[],u=0,i=Math.min(n.length,r.length);i>u;)e[u]=t(n[u],r[u]),u+=1;return e}),kr=ct(!1),Ir=ct(!0),qr=function Vu(t,n,r,e){var i=function(u){for(var i=n.length,o=0;i>o;){if(t===n[o])return r[o];o+=1}n[o+1]=t,r[o+1]=u;for(var c in t)u[c]=e?Vu(t[c],n,r,!0):t[c];return u};switch(ar(t)){case\"Object\":return i({});case\"Array\":return i([]);case\"Date\":return new Date(t.valueOf());case\"RegExp\":return u(t);default:return t}},Cr=function(t){return F(function(r,e){return n(Math.max(0,r.length-e.length),function(){return r.apply(this,t(e,arguments))})})},Wr=function(t,n){return Qn(t<n.length?n.length-t:0,n)},Pr=function Ku(t,n,e,u){if(Mt(t,n))return!0;if(ar(t)!==ar(n))return!1;if(null==t||null==n)return!1;if(\"function\"==typeof t.equals||\"function\"==typeof n.equals)return\"function\"==typeof t.equals&&t.equals(n)&&\"function\"==typeof n.equals&&n.equals(t);switch(ar(t)){case\"Arguments\":case\"Array\":case\"Object\":if(\"function\"==typeof t.constructor&&\"Promise\"===f(t.constructor))return t===n;break;case\"Boolean\":case\"Number\":case\"String\":if(typeof t!=typeof n||!Mt(t.valueOf(),n.valueOf()))return!1;break;case\"Date\":if(!Mt(t.valueOf(),n.valueOf()))return!1;break;case\"Error\":return t.name===n.name&&t.message===n.message;case\"RegExp\":if(t.source!==n.source||t.global!==n.global||t.ignoreCase!==n.ignoreCase||t.multiline!==n.multiline||t.sticky!==n.sticky||t.unicode!==n.unicode)return!1;break;case\"Map\":case\"Set\":if(!Ku(r(t.entries()),r(n.entries()),e,u))return!1;break;case\"Int8Array\":case\"Uint8Array\":case\"Uint8ClampedArray\":case\"Int16Array\":case\"Uint16Array\":case\"Int32Array\":case\"Uint32Array\":case\"Float32Array\":case\"Float64Array\":break;case\"ArrayBuffer\":break;default:return!1}var i=Yt(t);if(i.length!==Yt(n).length)return!1;for(var o=e.length-1;o>=0;){if(e[o]===t)return u[o]===n;o-=1}for(e.push(t),u.push(n),o=i.length-1;o>=0;){var c=i[o];if(!l(c,n)||!Ku(n[c],t[c],e,u))return!1;o-=1}return e.pop(),u.pop(),!0},Rr=function(t){return function n(r){for(var e,u,i,o=[],c=0,s=r.length;s>c;){if($t(r[c]))for(e=t?n(r[c]):r[c],i=0,u=e.length;u>i;)o[o.length]=e[i],i+=1;else o[o.length]=r[c];c+=1}return o}},Tr=function(){function t(t,n,r){for(var e=0,u=r.length;u>e;){if(n=t[\"@@transducer/step\"](n,r[e]),n&&n[\"@@transducer/reduced\"]){n=n[\"@@transducer/value\"];break}e+=1}return t[\"@@transducer/result\"](n)}function n(t,n,r){for(var e=r.next();!e.done;){if(n=t[\"@@transducer/step\"](n,e.value),n&&n[\"@@transducer/reduced\"]){n=n[\"@@transducer/value\"];break}e=r.next()}return t[\"@@transducer/result\"](n)}function r(t,n,r){return t[\"@@transducer/result\"](r.reduce(dt(t[\"@@transducer/step\"],t),n))}var e=\"undefined\"!=typeof Symbol?Symbol.iterator:\"@@iterator\";return function(u,i,o){if(\"function\"==typeof u&&(u=W(u)),$t(o))return t(u,i,o);if(\"function\"==typeof o.reduce)return r(u,i,o);if(null!=o[e])return n(u,i,o[e]());if(\"function\"==typeof o.next)return n(u,i,o);throw new TypeError(\"reduce: list must be array or iterable\")}}(),Br=function(){var t={\"@@transducer/init\":Array,\"@@transducer/step\":function(t,n){return t.push(n),t},\"@@transducer/result\":p},n={\"@@transducer/init\":String,\"@@transducer/step\":function(t,n){return t+n},\"@@transducer/result\":p},r={\"@@transducer/init\":Object,\"@@transducer/step\":function(t,n){return R(t,$t(n)?xn(n[0],n[1]):n)},\"@@transducer/result\":p};return function(e){if(j(e))return e;if($t(e))return t;if(\"string\"==typeof e)return n;if(\"object\"==typeof e)return r;throw new Error(\"Cannot create transformer for \"+e)}}(),Fr=function(){function t(t,n){this.f=t,this.retained=[],this.xf=n}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){return this.retained=null,this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){return this.f(n)?this.retain(t,n):this.flush(t,n)},t.prototype.flush=function(t,n){return t=Tr(this.xf[\"@@transducer/step\"],t,this.retained),this.retained=[],this.xf[\"@@transducer/step\"](t,n)},t.prototype.retain=function(t,n){return this.retained.push(n),t},F(function(n,r){return new t(n,r)})}(),Mr=function(){function t(t,n){this.xf=n,this.f=t,this.inputs={}}return t.prototype[\"@@transducer/init\"]=C.init,t.prototype[\"@@transducer/result\"]=function(t){var n;for(n in this.inputs)if(l(n,this.inputs)&&(t=this.xf[\"@@transducer/step\"](t,this.inputs[n]),t[\"@@transducer/reduced\"])){t=t[\"@@transducer/value\"];break}return this.inputs=null,this.xf[\"@@transducer/result\"](t)},t.prototype[\"@@transducer/step\"]=function(t,n){var r=this.f(n);return this.inputs[r]=this.inputs[r]||[r,[]],this.inputs[r][1]=lt(n,this.inputs[r][1]),t},F(function(n,r){return new t(n,r)})}(),Ur=B(function(t){return vt(t.length,function(){var n=0,r=arguments[0],e=arguments[arguments.length-1],u=I(arguments);return u[0]=function(){var t=r.apply(this,o(arguments,[n,e]));return n+=1,t},t.apply(this,u)})}),Lr=B(function(t){return gn(2,t)}),zr=B(function(t){return null!=t&&\"function\"==typeof t.clone?t.clone():qr(t,[],[],!0)}),Dr=B(function(t){return vt(t.length,t)}),Vr=F(L(\"drop\",H,function(t,n){return Kn(Math.max(0,t),1/0,n)})),Kr=F(L(\"dropLast\",$,Wr)),Hr=F(L(\"dropLastWhile\",Fr,z)),$r=F(function(t,n){return Pr(t,n,[],[])}),Xr=F(L(\"filter\",Z,function(t,n){return v(n)?Tr(function(r,e){return t(n[e])&&(r[e]=n[e]),r},{},Yt(n)):s(t,n)})),Yr=B(Rr(!0)),Zr=B(function(t){return Dr(function(n,r){var e=I(arguments);return e[0]=r,e[1]=n,t.apply(this,e)})}),Gr=vn(0),Jr=Kn(0,-1),Qr=M(function(t,n,r){var e,u;n.length>r.length?(e=n,u=r):(e=r,u=n);for(var i=[],o=0;o<u.length;)c(t,u[o],e)&&(i[i.length]=u[o]),o+=1;return gr(t,i)}),te=M(function(t,n,r){return j(t)?Tr(n(t),t[\"@@transducer/init\"](),r):Tr(n(Br(t)),qr(t,[],[],!1),r)}),ne=B(function(t){for(var n=Yt(t),r=n.length,e=0,u={};r>e;){var i=n[e],o=t[i],c=l(o,u)?u[o]:u[o]=[];c[c.length]=i,e+=1}return u}),re=B(function(t){for(var n=Yt(t),r=n.length,e=0,u={};r>e;){var i=n[e];u[t[i]]=i,e+=1}return u}),ee=B(function(t){return null!=t&&$r(t,Et(t))}),ue=vn(-1),ie=F(function(t,n){if(\"function\"!=typeof n.lastIndexOf||g(n)){for(var r=n.length-1;r>=0;){if($r(n[r],t))return r;r-=1}return-1}return n.lastIndexOf(t)}),oe=F(L(\"map\",nt,function(t,n){switch(Object.prototype.toString.call(n)){case\"[object Function]\":return vt(n.length,function(){return t.call(this,n.apply(this,arguments))});case\"[object Object]\":return Tr(function(r,e){return r[e]=t(n[e]),r},{},Yt(n));default:return O(t,n)}})),ce=F(function(t,n){return Tr(function(r,e){return r[e]=t(n[e],e,n),r},{},Yt(n))}),se=M(function(t,n,r){return an(function(n,r,e){return t(r,e)},n,r)}),ae=Cr(o),fe=Cr(Zr(o)),le=M(function(t,n,r){return $r(En(t,r),n)}),pe=F(function(t,n){return oe(Wn(t),n)}),he=vr(O,[In,Ut]),ge=M(function(t,n,r){return Rn($r(n),t,r)}),de=M(function(t,n,r){return Rn(Ht(t),n,r)}),ye=M(Tr),me=U(4,[],function(t,n,r,e){return Tr(function(e,u){var i=r(u);return e[i]=t(l(i,e)?e[i]:n,u),e},{},e)}),ve=F(function(t,n){return Xr(i(t),n)}),be=F(function(t,n){return er(ct(t),n)}),xe=ye(ut,0),we=F(function(t,n){return Vr(t>=0?n.length-t:0,n)}),je=vt(4,function(t,n,r,e){return Tr(t(\"function\"==typeof n?W(n):n),r,e)}),Oe=M(function(t,n,r){return gr(t,o(n,r))}),Se=F(function(t,n){return Or(oe($r,t),n)}),Ae=function(){var t=function(t){return{\"@@transducer/init\":C.init,\"@@transducer/result\":function(n){return t[\"@@transducer/result\"](n)},\"@@transducer/step\":function(n,r){var e=t[\"@@transducer/step\"](n,r);return e[\"@@transducer/reduced\"]?a(e):e}}};return function(n){var r=t(n);return{\"@@transducer/init\":C.init,\"@@transducer/result\":function(t){return r[\"@@transducer/result\"](t)},\"@@transducer/step\":function(t,n){return $t(n)?Tr(r,t,n):Tr(r,t,[n])}}}}(),Ee=function(t,n,r){var e,u;if(\"function\"==typeof t.indexOf)switch(typeof n){case\"number\":if(0===n){for(e=1/n;r<t.length;){if(u=t[r],0===u&&1/u===e)return r;r+=1}return-1}if(n!==n){for(;r<t.length;){if(u=t[r],\"number\"==typeof u&&u!==u)return r;r+=1}return-1}return t.indexOf(n,r);case\"string\":case\"boolean\":case\"function\":case\"undefined\":return t.indexOf(n,r);\ncase\"object\":if(null===n)return t.indexOf(n,r)}for(;r<t.length;){if($r(t[r],n))return r;r+=1}return-1},_e=F(function(t,n){return oe(t,Ae(n))}),Ne=B(function(t){return vt(ye(un,0,pe(\"length\",t)),function(){for(var n=0,r=t.length;r>n;){if(!t[n].apply(this,arguments))return!1;n+=1}return!0})}),ke=B(function(t){for(var n=t.length,r=0;n>r;){if(Ee(t,t[r],r+1)>=0)return!1;r+=1}return!0}),Ie=B(function(t){return vt(ye(un,0,pe(\"length\",t)),function(){for(var n=0,r=t.length;r>n;){if(t[n].apply(this,arguments))return!0;n+=1}return!1})}),qe=F(function(t,n){return\"function\"==typeof t.ap?t.ap(n):\"function\"==typeof t?vt(Math.max(t.length,n.length),function(){return t.apply(this,arguments)(n.apply(this,arguments))}):Tr(function(t,r){return o(t,oe(r,n))},[],t)}),Ce=B(function Hu(t){return t=oe(function(t){return\"function\"==typeof t?t:Hu(t)},t),vt(ye(un,0,pe(\"length\",br(t))),function(){var n=arguments;return oe(function(t){return pt(t,n)},t)})}),We=Dr(function(t){return t.apply(this,I(arguments,1))}),Pe=F(L(\"chain\",_e,function(t,n){return\"function\"==typeof n?function(){return n.call(this,t.apply(this,arguments)).apply(this,arguments)}:Rr(!1)(oe(t,n))})),Re=B(function(t){var r=ye(un,0,oe(function(t){return t[0].length},t));return n(r,function(){for(var n=0;n<t.length;){if(t[n][0].apply(this,arguments))return t[n][1].apply(this,arguments);n+=1}})}),Te=F(function(t,n){if(t>10)throw new Error(\"Constructor with greater than ten arguments\");return 0===t?function(){return new n}:Dr(gn(t,function(t,r,e,u,i,o,c,s,a,f){switch(arguments.length){case 1:return new n(t);case 2:return new n(t,r);case 3:return new n(t,r,e);case 4:return new n(t,r,e,u);case 5:return new n(t,r,e,u,i);case 6:return new n(t,r,e,u,i,o);case 7:return new n(t,r,e,u,i,o,c);case 8:return new n(t,r,e,u,i,o,c,s);case 9:return new n(t,r,e,u,i,o,c,s,a);case 10:return new n(t,r,e,u,i,o,c,s,a,f)}}))}),Be=F(function(t,n){return vt(ye(un,0,pe(\"length\",n)),function(){var r=arguments,e=this;return t.apply(e,O(function(t){return t.apply(e,r)},n))})}),Fe=me(function(t,n){return t+1},0),Me=F(L(\"dropRepeatsWith\",X,function(t,n){var r=[],e=1,u=n.length;if(0!==u)for(r[0]=n[0];u>e;)t(ue(r),n[e])||(r[r.length]=n[e]),e+=1;return r})),Ue=M(function(t,n,r){return $r(t(n),t(r))}),Le=M(function(t,n,r){return $r(n[t],r[t])}),ze=F(L(\"groupBy\",Mr,me(function(t,n){return null==t&&(t=[]),t.push(n),t},null))),De=me(function(t,n){return n},null),Ve=F(function(t,n){return\"function\"!=typeof n.indexOf||g(n)?Ee(n,t,0):n.indexOf(t)}),Ke=B(function(t){return Be(e,t)}),He=F(function(t,n){return function(r){return function(e){return oe(function(t){return n(t,e)},r(t(e)))}}}),$e=B(function(t){return He(vn(t),mr(t))}),Xe=B(function(t){return He(En(t),gt(t))}),Ye=B(function(t){return He(Wn(t),ht(t))}),Ze=F(function(t,n){var r=vt(t,n);return vt(t,function(){return Tr(qe,oe(r,arguments[0]),I(arguments,1))})}),Ge=B(function(t){return xe(t)/t.length}),Je=B(function(t){var n=t.length;if(0===n)return NaN;var r=2-n%2,e=(n-r)/2;return Ge(I(t).sort(function(t,n){return n>t?-1:t>n?1:0}).slice(e,e+r))}),Qe=Ke([Xr,ve]),tu=function(){if(0===arguments.length)throw new Error(\"pipe requires at least one argument\");return n(arguments[0].length,ye(E,arguments[0],Jn(arguments)))},nu=function(){if(0===arguments.length)throw new Error(\"pipeP requires at least one argument\");return n(arguments[0].length,ye(_,arguments[0],Jn(arguments)))},ru=ye(hn,1),eu=F(function(t,n){return\"function\"==typeof n.sequence?n.sequence(t):Fn(function(t,n){return qe(oe(Cn,n),t)},t([]),n)}),uu=M(function(t,n,r){return eu(t,oe(n,r))}),iu=Pe(p),ou=function(t,n){return Ee(n,t,0)>=0},cu=function $u(t,n){var r=function(r){var e=n.concat([t]);return ou(r,e)?\"<Circular>\":$u(r,e)},e=function(t,n){return O(function(n){return N(n)+\": \"+r(t[n])},n.slice().sort())};switch(Object.prototype.toString.call(t)){case\"[object Arguments]\":return\"(function() { return arguments; }(\"+O(r,t).join(\", \")+\"))\";case\"[object Array]\":return\"[\"+O(r,t).concat(e(t,ve(function(t){return/^\\d+$/.test(t)},Yt(t)))).join(\", \")+\"]\";case\"[object Boolean]\":return\"object\"==typeof t?\"new Boolean(\"+r(t.valueOf())+\")\":t.toString();case\"[object Date]\":return\"new Date(\"+(isNaN(t.valueOf())?r(NaN):N(q(t)))+\")\";case\"[object Null]\":return\"null\";case\"[object Number]\":return\"object\"==typeof t?\"new Number(\"+r(t.valueOf())+\")\":1/t===-(1/0)?\"-0\":t.toString(10);case\"[object String]\":return\"object\"==typeof t?\"new String(\"+r(t.valueOf())+\")\":N(t);case\"[object Undefined]\":return\"undefined\";default:if(\"function\"==typeof t.toString){var u=t.toString();if(\"[object Object]\"!==u)return u}return\"{\"+e(t,Yt(t)).join(\", \")+\"}\"}},su=function(){if(0===arguments.length)throw new Error(\"compose requires at least one argument\");return tu.apply(this,zn(arguments))},au=function(){return su.apply(this,Cn(Ut,oe(Pe,arguments)))},fu=function(){if(0===arguments.length)throw new Error(\"composeP requires at least one argument\");return nu.apply(this,zn(arguments))},lu=B(function(t){return Te(t.length,t)}),pu=F(ou),hu=F(function(t,n){for(var r=[],e=0,u=t.length;u>e;)ou(t[e],n)||ou(t[e],r)||(r[r.length]=t[e]),e+=1;return r}),gu=B(L(\"dropRepeats\",X($r),Me($r))),du=B(function(t){return Ze(t.length,t)}),yu=F(function(t,n){var r={};for(var e in n)ou(e,t)||(r[e]=n[e]);return r}),mu=function(){return au.apply(this,zn(arguments))},vu=B(function(t){return cu(t,[])}),bu=F(function(t,n){return ve(Zr(ou)(t),n)}),xu=function(){function t(){this._nativeSet=\"function\"==typeof Set?new Set:null,this._items={}}function n(t,n,r){var e,u,i=typeof t;switch(i){case\"string\":case\"number\":return 0!==t||r._items[\"-0\"]||1/t!==-(1/0)?null!==r._nativeSet?n?(e=r._nativeSet.size,r._nativeSet.add(t),u=r._nativeSet.size,u>e):r._nativeSet.has(t):i in r._items?t in r._items[i]?!n:(n&&(r._items[i][t]=!0),n):(n&&(r._items[i]={},r._items[i][t]=!0),n):(n&&(r._items[\"-0\"]=!0),n);case\"boolean\":if(i in r._items){var o=t?1:0;return r._items[i][o]?!n:(n&&(r._items[i][o]=!0),n)}return n&&(r._items[i]=t?[!1,!0]:[!0,!1]),n;case\"function\":return null!==r._nativeSet?n?(e=r._nativeSet.size,r._nativeSet.add(t),u=r._nativeSet.size,u>e):r._nativeSet.has(t):i in r._items?ou(t,r._items[i])?!n:(n&&r._items[i].push(t),n):(n&&(r._items[i]=[t]),n);case\"undefined\":return r._items[i]?!n:(n&&(r._items[i]=!0),n);case\"object\":if(null===t)return r._items[\"null\"]?!n:(n&&(r._items[\"null\"]=!0),n);default:return i=Object.prototype.toString.call(t),i in r._items?ou(t,r._items[i])?!n:(n&&r._items[i].push(t),n):(n&&(r._items[i]=[t]),n)}}return t.prototype.add=function(t){return n(t,!0,this)},t.prototype.has=function(t){return n(t,!1,this)},t}(),wu=F(function(t,n){return d(t)?function(){return t.apply(this,arguments)&&n.apply(this,arguments)}:du(st)(t,n)}),ju=du(mn),Ou=F(function(t,n){return d(t)?function(){return t.apply(this,arguments)||n.apply(this,arguments)}:du(On)(t,n)}),Su=F(function(t,n){return vt(t+1,function(){var r=arguments[t];if(null!=r&&Ht(Function,r[n]))return r[n].apply(r,I(arguments,0,t));throw new TypeError(vu(r)+' does not have a method named \"'+n+'\"')})}),Au=Su(1,\"join\"),Eu=B(function(t){var r={};return n(t.length,function(){var n=vu(arguments);return l(n,r)||(r[n]=t.apply(this,arguments)),r[n]})}),_u=Su(1,\"split\"),Nu=F(function(t,n){if(!x(t))throw new TypeError(\"‘test’ requires a value of type RegExp as its first argument; received \"+vu(t));return u(t).test(n)}),ku=Su(0,\"toLowerCase\"),Iu=Su(0,\"toUpperCase\"),qu=F(function(t,n){for(var r,e,u=new xu,i=[],o=0;o<n.length;)e=n[o],r=t(e),u.add(r)&&i.push(e),o+=1;return i}),Cu=Zr(Su(1,\"concat\")),Wu=F(function(t,n){return Cu(hu(t,n),hu(n,t))}),Pu=M(function(t,n,r){return Cu(wt(t,n,r),wt(t,r,n))}),Ru=qu(Ut),Tu=F(function(t,n){var r,e;return t.length>n.length?(r=t,e=n):(r=n,e=t),Ru(s(Zr(ou)(r),e))}),Bu=F(su(Ru,o)),Fu={F:kr,T:Ir,__:t,add:ut,addIndex:Ur,adjust:it,all:ot,allPass:Ne,allUniq:ke,always:ct,and:st,any:at,anyPass:Ie,ap:qe,aperture:ft,append:lt,apply:pt,applySpec:Ce,assoc:ht,assocPath:gt,binary:Lr,bind:dt,both:wu,call:We,chain:Pe,clamp:yt,clone:zr,comparator:mt,complement:ju,compose:su,composeK:au,composeP:fu,concat:Cu,cond:Re,construct:lu,constructN:Te,contains:pu,converge:Be,countBy:Fe,curry:Dr,curryN:vt,dec:bt,defaultTo:xt,difference:hu,differenceWith:wt,dissoc:jt,dissocPath:Ot,divide:St,drop:Vr,dropLast:Kr,dropLastWhile:Hr,dropRepeats:gu,dropRepeatsWith:Me,dropWhile:At,either:Ou,empty:Et,eqBy:Ue,eqProps:Le,equals:$r,evolve:_t,filter:Xr,find:Nt,findIndex:kt,findLast:It,findLastIndex:qt,flatten:Yr,flip:Zr,forEach:Ct,fromPairs:Wt,groupBy:ze,groupWith:Pt,gt:Rt,gte:Tt,has:Bt,hasIn:Ft,head:Gr,identical:Mt,identity:Ut,ifElse:Lt,inc:zt,indexBy:De,indexOf:Ve,init:Jr,insert:Dt,insertAll:Vt,intersection:Tu,intersectionWith:Qr,intersperse:Kt,into:te,invert:ne,invertObj:re,invoker:Su,is:Ht,isArrayLike:$t,isEmpty:ee,isNil:Xt,join:Au,juxt:Ke,keys:Yt,keysIn:Zt,last:ue,lastIndexOf:ie,length:Gt,lens:He,lensIndex:$e,lensPath:Xe,lensProp:Ye,lift:du,liftN:Ze,lt:Jt,lte:Qt,map:oe,mapAccum:tn,mapAccumRight:nn,mapObjIndexed:ce,match:rn,mathMod:en,max:un,maxBy:on,mean:Ge,median:Je,memoize:Eu,merge:cn,mergeAll:sn,mergeWith:se,mergeWithKey:an,min:fn,minBy:ln,modulo:pn,multiply:hn,nAry:gn,negate:dn,none:yn,not:mn,nth:vn,nthArg:bn,objOf:xn,of:wn,omit:yu,once:jn,or:On,over:Sn,pair:An,partial:ae,partialRight:fe,partition:Qe,path:En,pathEq:le,pathOr:_n,pathSatisfies:Nn,pick:kn,pickAll:In,pickBy:qn,pipe:tu,pipeK:mu,pipeP:nu,pluck:pe,prepend:Cn,product:ru,project:he,prop:Wn,propEq:ge,propIs:de,propOr:Pn,propSatisfies:Rn,props:Tn,range:Bn,reduce:ye,reduceBy:me,reduceRight:Fn,reduced:Mn,reject:ve,remove:Un,repeat:be,replace:Ln,reverse:zn,scan:Dn,sequence:eu,set:Vn,slice:Kn,sort:Hn,sortBy:$n,split:_u,splitAt:Xn,splitEvery:Yn,splitWhen:Zn,subtract:Gn,sum:xe,symmetricDifference:Wu,symmetricDifferenceWith:Pu,tail:Jn,take:Qn,takeLast:we,takeLastWhile:tr,takeWhile:nr,tap:rr,test:Nu,times:er,toLower:ku,toPairs:ur,toPairsIn:ir,toString:vu,toUpper:Iu,transduce:je,transpose:or,traverse:uu,trim:cr,tryCatch:sr,type:ar,unapply:fr,unary:lr,uncurryN:pr,unfold:hr,union:Bu,unionWith:Oe,uniq:Ru,uniqBy:qu,uniqWith:gr,unless:dr,unnest:iu,until:yr,update:mr,useWith:vr,values:br,valuesIn:xr,view:wr,when:jr,where:Or,whereEq:Se,without:bu,wrap:Sr,xprod:Ar,zip:Er,zipObj:_r,zipWith:Nr};\"object\"==typeof exports?module.exports=Fu:\"function\"==typeof define&&define.amd?define(function(){return Fu}):this.R=Fu}.call(this),e=\"0.20.1\",void r(\"Ramda v\"+e+\" loaded\"))}(window,document);\n    ```",
      "metadata": {}
    },
    "2015-01-30": {
      "reference": "2015-01-30",
      "route": "2015-01-30",
      "sourcePath": "react-json-blinkforms\\node_modules\\readable-stream\\doc\\wg-meetings\\2015-01-30.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"streams-wg-meeting-2015-01-30\">streams WG Meeting 2015-01-30</h1>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><strong>Google Hangouts Video</strong>: <a href=\"http://www.youtube.com/watch?v=I9nDOSGfwZg\">http://www.youtube.com/watch?v=I9nDOSGfwZg</a></li>\n<li><strong>GitHub Issue</strong>: <a href=\"https://github.com/iojs/readable-stream/issues/106\">https://github.com/iojs/readable-stream/issues/106</a></li>\n<li><strong>Original Minutes Google Doc</strong>: <a href=\"https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/\">https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/</a></li>\n</ul>\n<h2 id=\"agenda\">Agenda</h2>\n<p>Extracted from <a href=\"https://github.com/iojs/readable-stream/labels/wg-agenda\">https://github.com/iojs/readable-stream/labels/wg-agenda</a> prior to meeting.</p>\n<ul>\n<li>adopt a charter <a href=\"https://github.com/iojs/readable-stream/issues/105\">#105</a></li>\n<li>release and versioning strategy <a href=\"https://github.com/iojs/readable-stream/issues/101\">#101</a></li>\n<li>simpler stream creation <a href=\"https://github.com/iojs/readable-stream/issues/102\">#102</a></li>\n<li>proposal: deprecate implicit flowing of streams <a href=\"https://github.com/iojs/readable-stream/issues/99\">#99</a></li>\n</ul>\n<h2 id=\"minutes\">Minutes</h2>\n<h3 id=\"adopt-a-charter\">adopt a charter</h3>\n<ul>\n<li>group: +1&#39;s all around</li>\n</ul>\n<h3 id=\"what-versioning-scheme-should-be-adopted-\">What versioning scheme should be adopted?</h3>\n<ul>\n<li>group: +1’s 3.0.0</li>\n<li>domenic+group: pulling in patches from other sources where appropriate</li>\n<li>mikeal: version independently, suggesting versions for io.js</li>\n<li>mikeal+domenic: work with TC to notify in advance of changes\nsimpler stream creation</li>\n</ul>\n<h3 id=\"streamline-creation-of-streams\">streamline creation of streams</h3>\n<ul>\n<li>sam: streamline creation of streams</li>\n<li><p>domenic: nice simple solution posted\nbut, we lose the opportunity to change the model\nmay not be backwards incompatible (double check keys)</p>\n<p><strong>action item:</strong> domenic will check</p>\n</li>\n</ul>\n<h3 id=\"remove-implicit-flowing-of-streams-on-data-\">remove implicit flowing of streams on(‘data’)</h3>\n<ul>\n<li>add isFlowing / isPaused</li>\n<li>mikeal: worrying that we’re documenting polyfill methods – confuses users</li>\n<li>domenic: more reflective API is probably good, with warning labels for users</li>\n<li>new section for mad scientists (reflective stream access)</li>\n<li>calvin: name the “third state”</li>\n<li>mikeal: maybe borrow the name from whatwg?</li>\n<li>domenic: we’re missing the “third state”</li>\n<li>consensus: kind of difficult to name the third state</li>\n<li>mikeal: figure out differences in states / compat</li>\n<li>mathias: always flow on data – eliminates third state<ul>\n<li>explore what it breaks</li>\n</ul>\n</li>\n</ul>\n<p><strong>action items:</strong></p>\n<ul>\n<li>ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)</li>\n<li>ask rod/build for infrastructure</li>\n<li><strong>chris</strong>: explore the “flow on data” approach</li>\n<li>add isPaused/isFlowing</li>\n<li>add new docs section</li>\n<li>move isPaused to that section</li>\n</ul>\n"
      ],
      "contentsRaw": "# streams WG Meeting 2015-01-30\n\n## Links\n\n* **Google Hangouts Video**: http://www.youtube.com/watch?v=I9nDOSGfwZg\n* **GitHub Issue**: https://github.com/iojs/readable-stream/issues/106\n* **Original Minutes Google Doc**: https://docs.google.com/document/d/17aTgLnjMXIrfjgNaTUnHQO7m3xgzHR2VXBTmi03Qii4/\n\n## Agenda\n\nExtracted from https://github.com/iojs/readable-stream/labels/wg-agenda prior to meeting.\n\n* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n* release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101)\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n* proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99)\n\n## Minutes\n\n### adopt a charter\n\n* group: +1's all around\n\n### What versioning scheme should be adopted?\n* group: +1’s 3.0.0\n* domenic+group: pulling in patches from other sources where appropriate\n* mikeal: version independently, suggesting versions for io.js\n* mikeal+domenic: work with TC to notify in advance of changes\nsimpler stream creation\n\n### streamline creation of streams\n* sam: streamline creation of streams\n* domenic: nice simple solution posted\n  but, we lose the opportunity to change the model\n  may not be backwards incompatible (double check keys)\n\n  **action item:** domenic will check\n\n### remove implicit flowing of streams on(‘data’)\n* add isFlowing / isPaused\n* mikeal: worrying that we’re documenting polyfill methods – confuses users\n* domenic: more reflective API is probably good, with warning labels for users\n* new section for mad scientists (reflective stream access)\n* calvin: name the “third state”\n* mikeal: maybe borrow the name from whatwg?\n* domenic: we’re missing the “third state”\n* consensus: kind of difficult to name the third state\n* mikeal: figure out differences in states / compat\n* mathias: always flow on data – eliminates third state\n  * explore what it breaks\n\n**action items:**\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n* ask rod/build for infrastructure\n* **chris**: explore the “flow on data” approach\n* add isPaused/isFlowing\n* add new docs section\n* move isPaused to that section",
      "metadata": {}
    },
    "history": {
      "reference": "history",
      "route": "history",
      "sourcePath": "react-json-blinkforms\\node_modules\\remove-trailing-separator\\history.md",
      "title": "(untitled)",
      "contents": [
        "<h2 id=\"history\">History</h2>\n<h3 id=\"1-1-0-16th-aug-2017\">1.1.0 - 16th Aug 2017</h3>\n<ul>\n<li><a href=\"https://github.com/darsain/remove-trailing-separator/commit/f4576e3638c39b794998b533fffb27854dcbee01\">f4576e3</a> Implement faster slash slicing</li>\n</ul>\n<h3 id=\"1-0-2-07th-jun-2017\">1.0.2 - 07th Jun 2017</h3>\n<ul>\n<li><a href=\"https://github.com/darsain/remove-trailing-separator/commit/8e13ecbfd7b9f5fdf97c5d5ff923e4718b874e31\">8e13ecb</a> ES5 compatibility</li>\n</ul>\n<h3 id=\"1-0-1-25th-sep-2016\">1.0.1 - 25th Sep 2016</h3>\n<ul>\n<li><a href=\"https://github.com/darsain/remove-trailing-separator/commit/af90b4e153a4527894741af6c7005acaeb78606d\">b78606d</a> Remove backslash only on win32 systems</li>\n</ul>\n<h3 id=\"1-0-0-24th-sep-2016\">1.0.0 - 24th Sep 2016</h3>\n<p>Initial release.</p>\n"
      ],
      "contentsRaw": "## History\n\n### 1.1.0 - 16th Aug 2017\n\n- [f4576e3](https://github.com/darsain/remove-trailing-separator/commit/f4576e3638c39b794998b533fffb27854dcbee01) Implement faster slash slicing\n\n### 1.0.2 - 07th Jun 2017\n\n- [8e13ecb](https://github.com/darsain/remove-trailing-separator/commit/8e13ecbfd7b9f5fdf97c5d5ff923e4718b874e31) ES5 compatibility\n\n### 1.0.1 - 25th Sep 2016\n\n- [b78606d](https://github.com/darsain/remove-trailing-separator/commit/af90b4e153a4527894741af6c7005acaeb78606d) Remove backslash only on win32 systems\n\n### 1.0.0 - 24th Sep 2016\n\nInitial release.",
      "metadata": {}
    },
    "Porting-Buffer": {
      "reference": "Porting-Buffer",
      "route": "Porting-Buffer",
      "sourcePath": "react-json-blinkforms\\node_modules\\safer-buffer\\Porting-Buffer.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"porting-to-the-buffer-from-buffer-alloc-api\">Porting to the Buffer.from/Buffer.alloc API</h1>\n<p><a id=\"overview\"></a></p>\n<h2 id=\"overview\">Overview</h2>\n<ul>\n<li><a href=\"#variant-1\">Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x.</a> (<em>recommended</em>)</li>\n<li><a href=\"#variant-2\">Variant 2: Use a polyfill</a></li>\n<li><a href=\"#variant-3\">Variant 3: manual detection, with safeguards</a></li>\n</ul>\n<h3 id=\"finding-problematic-bits-of-code-using-grep\">Finding problematic bits of code using grep</h3>\n<p>Just run <code>grep -nrE &#39;[^a-zA-Z](Slow)?Buffer\\s*\\(&#39; --exclude-dir node_modules</code>.</p>\n<p>It will find all the potentially unsafe places in your own code (with some considerably unlikely\nexceptions).</p>\n<h3 id=\"finding-problematic-bits-of-code-using-node-js-8\">Finding problematic bits of code using Node.js 8</h3>\n<p>If you’re using Node.js ≥ 8.0.0 (which is recommended), Node.js exposes multiple options that help with finding the relevant pieces of code:</p>\n<ul>\n<li><code>--trace-warnings</code> will make Node.js show a stack trace for this warning and other warnings that are printed by Node.js.</li>\n<li><code>--trace-deprecation</code> does the same thing, but only for deprecation warnings.</li>\n<li><code>--pending-deprecation</code> will show more types of deprecation warnings. In particular, it will show the <code>Buffer()</code> deprecation warning, even on Node.js 8.</li>\n</ul>\n<p>You can set these flags using an environment variable:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>$&nbsp;export&nbsp;NODE_OPTIONS=&#39;--trace-warnings&nbsp;--pending-deprecation&#39;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>$&nbsp;cat&nbsp;example.js</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&#39;use&nbsp;strict&#39;;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;foo&nbsp;=&nbsp;new&nbsp;Buffer(&#39;foo&#39;);</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>$&nbsp;node&nbsp;example.js</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>(node:7147)&nbsp;[DEP0005]&nbsp;DeprecationWarning:&nbsp;The&nbsp;Buffer()&nbsp;and&nbsp;new&nbsp;Buffer()&nbsp;constructors&nbsp;are&nbsp;not&nbsp;recommended&nbsp;for&nbsp;use&nbsp;due&nbsp;to&nbsp;security&nbsp;and&nbsp;usability&nbsp;concerns.&nbsp;Please&nbsp;use&nbsp;the&nbsp;new&nbsp;Buffer.alloc(),&nbsp;Buffer.allocUnsafe(),&nbsp;or&nbsp;Buffer.from()&nbsp;construction&nbsp;methods&nbsp;instead.</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;showFlaggedDeprecation&nbsp;(buffer.js:127:13)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;new&nbsp;Buffer&nbsp;(buffer.js:148:3)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;Object.&lt;anonymous&gt;&nbsp;(/path/to/example.js:2:13)</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;[...&nbsp;more&nbsp;stack&nbsp;trace&nbsp;lines&nbsp;...]</span></span></div></pre><h3 id=\"finding-problematic-bits-of-code-using-linters\">Finding problematic bits of code using linters</h3>\n<p>Eslint rules <a href=\"https://eslint.org/docs/rules/no-buffer-constructor\">no-buffer-constructor</a>\nor\n<a href=\"https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md\">node/no-deprecated-api</a>\nalso find calls to deprecated <code>Buffer()</code> API. Those rules are included in some pre-sets.</p>\n<p>There is a drawback, though, that it doesn&#39;t always\n<a href=\"https://github.com/chalker/safer-buffer#why-not-safe-buffer\">work correctly</a> when <code>Buffer</code> is\noverriden e.g. with a polyfill, so recommended is a combination of this and some other method\ndescribed above.</p>\n<p><a id=\"variant-1\"></a></p>\n<h2 id=\"variant-1-drop-support-for-node-js-4-4-x-and-5-0-0-5-9-x-\">Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x.</h2>\n<p>This is the recommended solution nowadays that would imply only minimal overhead.</p>\n<p>The Node.js 5.x release line has been unsupported since July 2016, and the Node.js 4.x release line reaches its End of Life in April 2018 (→ <a href=\"https://github.com/nodejs/Release#release-schedule\">Schedule</a>). This means that these versions of Node.js will <em>not</em> receive any updates, even in case of security issues, so using these release lines should be avoided, if at all possible.</p>\n<p>What you would do in this case is to convert all <code>new Buffer()</code> or <code>Buffer()</code> calls to use <code>Buffer.alloc()</code> or <code>Buffer.from()</code>, in the following way:</p>\n<ul>\n<li>For <code>new Buffer(number)</code>, replace it with <code>Buffer.alloc(number)</code>.</li>\n<li>For <code>new Buffer(string)</code> (or <code>new Buffer(string, encoding)</code>), replace it with <code>Buffer.from(string)</code> (or <code>Buffer.from(string, encoding)</code>).</li>\n<li>For all other combinations of arguments (these are much rarer), also replace <code>new Buffer(...arguments)</code> with <code>Buffer.from(...arguments)</code>.</li>\n</ul>\n<p>Note that <code>Buffer.alloc()</code> is also <em>faster</em> on the current Node.js versions than\n<code>new Buffer(size).fill(0)</code>, which is what you would otherwise need to ensure zero-filling.</p>\n<p>Enabling eslint rule <a href=\"https://eslint.org/docs/rules/no-buffer-constructor\">no-buffer-constructor</a>\nor\n<a href=\"https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md\">node/no-deprecated-api</a>\nis recommended to avoid accidential unsafe Buffer API usage.</p>\n<p>There is also a <a href=\"https://github.com/joyeecheung/node-dep-codemod#dep005\">JSCodeshift codemod</a>\nfor automatically migrating Buffer constructors to <code>Buffer.alloc()</code> or <code>Buffer.from()</code>.\nNote that it currently only works with cases where the arguments are literals or where the\nconstructor is invoked with two arguments.</p>\n<p><em>If you currently support those older Node.js versions and dropping them would be a semver-major change\nfor you, or if you support older branches of your packages, consider using <a href=\"#variant-2\">Variant 2</a>\nor <a href=\"#variant-3\">Variant 3</a> on older branches, so people using those older branches will also receive\nthe fix. That way, you will eradicate potential issues caused by unguarded Buffer API usage and\nyour users will not observe a runtime deprecation warning when running your code on Node.js 10.</em></p>\n<p><a id=\"variant-2\"></a></p>\n<h2 id=\"variant-2-use-a-polyfill\">Variant 2: Use a polyfill</h2>\n<p>Utilize <a href=\"https://www.npmjs.com/package/safer-buffer\">safer-buffer</a> as a polyfill to support older\nNode.js versions.</p>\n<p>You would take exacly the same steps as in <a href=\"#variant-1\">Variant 1</a>, but with a polyfill\n<code>const Buffer = require(&#39;safer-buffer&#39;).Buffer</code> in all files where you use the new <code>Buffer</code> api.</p>\n<p>Make sure that you do not use old <code>new Buffer</code> API — in any files where the line above is added,\nusing old <code>new Buffer()</code> API will <em>throw</em>. It will be easy to notice that in CI, though.</p>\n<p>Alternatively, you could use <a href=\"https://www.npmjs.com/package/buffer-from\">buffer-from</a> and/or\n<a href=\"https://www.npmjs.com/package/buffer-alloc\">buffer-alloc</a> <a href=\"https://ponyfill.com/\">ponyfills</a> —\nthose are great, the only downsides being 4 deps in the tree and slightly more code changes to\nmigrate off them (as you would be using e.g. <code>Buffer.from</code> under a different name). If you need only\n<code>Buffer.from</code> polyfilled — <code>buffer-from</code> alone which comes with no extra dependencies.</p>\n<p><em>Alternatively, you could use <a href=\"https://www.npmjs.com/package/safe-buffer\">safe-buffer</a> — it also\nprovides a polyfill, but takes a different approach which has\n<a href=\"https://github.com/chalker/safer-buffer#why-not-safe-buffer\">it&#39;s drawbacks</a>. It will allow you\nto also use the older <code>new Buffer()</code> API in your code, though — but that&#39;s arguably a benefit, as\nit is problematic, can cause issues in your code, and will start emitting runtime deprecation\nwarnings starting with Node.js 10.</em></p>\n<p>Note that in either case, it is important that you also remove all calls to the old Buffer\nAPI manually — just throwing in <code>safe-buffer</code> doesn&#39;t fix the problem by itself, it just provides\na polyfill for the new API. I have seen people doing that mistake.</p>\n<p>Enabling eslint rule <a href=\"https://eslint.org/docs/rules/no-buffer-constructor\">no-buffer-constructor</a>\nor\n<a href=\"https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md\">node/no-deprecated-api</a>\nis recommended.</p>\n<p><em>Don&#39;t forget to drop the polyfill usage once you drop support for Node.js &lt; 4.5.0.</em></p>\n<p><a id=\"variant-3\"></a></p>\n<h2 id=\"variant-3-manual-detection-with-safeguards\">Variant 3 — manual detection, with safeguards</h2>\n<p>This is useful if you create Buffer instances in only a few places (e.g. one), or you have your own\nwrapper around them.</p>\n<h3 id=\"buffer-0-\">Buffer(0)</h3>\n<p>This special case for creating empty buffers can be safely replaced with <code>Buffer.concat([])</code>, which\nreturns the same result all the way down to Node.js 0.8.x.</p>\n<h3 id=\"buffer-notnumber-\">Buffer(notNumber)</h3>\n<p>Before:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;buf&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Buffer</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span>notNumber</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;encoding</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><p>After:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;buf</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>from</span></span><span>&nbsp;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>from</span></span><span>&nbsp;</span><span class=\"keyword operator comparison js\"><span>!==</span></span><span>&nbsp;</span><span class=\"support class js\"><span>Uint8Array</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>from</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;buf&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>from</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>notNumber</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;encoding</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span>&nbsp;</span><span class=\"keyword control js\"><span>else</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"keyword operator typeof js\"><span>typeof</span></span><span>&nbsp;notNumber&nbsp;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&nbsp;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>number</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control js\"><span>throw</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Error</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&#39;</span></span><span>The&nbsp;&quot;size&quot;&nbsp;argument&nbsp;must&nbsp;be&nbsp;of&nbsp;type&nbsp;number.</span><span class=\"punctuation definition string end js\"><span>&#39;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;buf&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Buffer</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span>notNumber</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;encoding</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p><code>encoding</code> is optional.</p>\n<p>Note that the <code>typeof notNumber</code> before <code>new Buffer</code> is required (for cases when <code>notNumber</code> argument is not\nhard-coded) and <em>is not caused by the deprecation of Buffer constructor</em> — it&#39;s exactly <em>why</em> the\nBuffer constructor is deprecated. Ecosystem packages lacking this type-check caused numereous\nsecurity issues — situations when unsanitized user input could end up in the <code>Buffer(arg)</code> create\nproblems ranging from DoS to leaking sensitive information to the attacker from the process memory.</p>\n<p>When <code>notNumber</code> argument is hardcoded (e.g. literal <code>&quot;abc&quot;</code> or <code>[0,1,2]</code>), the <code>typeof</code> check can\nbe omitted.</p>\n<p>Also note that using TypeScript does not fix this problem for you — when libs written in\n<code>TypeScript</code> are used from JS, or when user input ends up there — it behaves exactly as pure JS, as\nall type checks are translation-time only and are not present in the actual JS code which TS\ncompiles to.</p>\n<h3 id=\"buffer-number-\">Buffer(number)</h3>\n<p>For Node.js 0.10.x (and below) support:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&nbsp;buf</span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>alloc</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;buf&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>alloc</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>number</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span>&nbsp;</span><span class=\"keyword control js\"><span>else</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;buf&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Buffer</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span>number</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>buf</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>fill</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div></pre><p>Otherwise (Node.js ≥ 0.12.x):</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>buf</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>alloc</span></span><span>&nbsp;</span><span class=\"keyword operator ternary js\"><span>?</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>Buffer</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>alloc</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>number</span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"keyword operator ternary js\"><span>:</span></span><span>&nbsp;</span><span class=\"meta class instance constructor js\"><span class=\"keyword operator new js\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type instance js\"><span>Buffer</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span>number</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>fill</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"constant numeric decimal js\"><span>0</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div></pre><h2 id=\"regarding-buffer-allocunsafe\">Regarding Buffer.allocUnsafe</h2>\n<p>Be extra cautious when using <code>Buffer.allocUnsafe</code>:</p>\n<ul>\n<li>Don&#39;t use it if you don&#39;t have a good reason to<ul>\n<li>e.g. you probably won&#39;t ever see a performance difference for small buffers, in fact, those\nmight be even faster with <code>Buffer.alloc()</code>,</li>\n<li>if your code is not in the hot code path — you also probably won&#39;t notice a difference,</li>\n<li>keep in mind that zero-filling minimizes the potential risks.</li>\n</ul>\n</li>\n<li>If you use it, make sure that you never return the buffer in a partially-filled state,<ul>\n<li>if you are writing to it sequentially — always truncate it to the actuall written length</li>\n</ul>\n</li>\n</ul>\n<p>Errors in handling buffers allocated with <code>Buffer.allocUnsafe</code> could result in various issues,\nranged from undefined behaviour of your code to sensitive data (user input, passwords, certs)\nleaking to the remote attacker.</p>\n<p><em>Note that the same applies to <code>new Buffer</code> usage without zero-filling, depending on the Node.js\nversion (and lacking type checks also adds DoS to the list of potential problems).</em></p>\n<p><a id=\"faq\"></a></p>\n<h2 id=\"faq\">FAQ</h2>\n<p><a id=\"design-flaws\"></a></p>\n<h3 id=\"what-is-wrong-with-the-buffer-constructor-\">What is wrong with the <code>Buffer</code> constructor?</h3>\n<p>The <code>Buffer</code> constructor could be used to create a buffer in many different ways:</p>\n<ul>\n<li><code>new Buffer(42)</code> creates a <code>Buffer</code> of 42 bytes. Before Node.js 8, this buffer contained\n<em>arbitrary memory</em> for performance reasons, which could include anything ranging from\nprogram source code to passwords and encryption keys.</li>\n<li><code>new Buffer(&#39;abc&#39;)</code> creates a <code>Buffer</code> that contains the UTF-8-encoded version of\nthe string <code>&#39;abc&#39;</code>. A second argument could specify another encoding: For example,\n<code>new Buffer(string, &#39;base64&#39;)</code> could be used to convert a Base64 string into the original\nsequence of bytes that it represents.</li>\n<li>There are several other combinations of arguments.</li>\n</ul>\n<p>This meant that, in code like <code>var buffer = new Buffer(foo);</code>, <em>it is not possible to tell\nwhat exactly the contents of the generated buffer are</em> without knowing the type of <code>foo</code>.</p>\n<p>Sometimes, the value of <code>foo</code> comes from an external source. For example, this function\ncould be exposed as a service on a web server, converting a UTF-8 string into its Base64 form:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"storage type function tsx\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function tsx entity name function tsx\"><span>stringToBase64</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>req</span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>res</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;The&nbsp;request&nbsp;body&nbsp;should&nbsp;have&nbsp;the&nbsp;format&nbsp;of&nbsp;`{&nbsp;string:&nbsp;&#39;foobar&#39;&nbsp;}`</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>rawBytes</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"new expr tsx\"><span class=\"keyword operator new tsx\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Buffer</span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other object tsx\"><span>req</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>body</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>string</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>encoded</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>rawBytes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>toString</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>base64</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>res</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>end</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>encoded</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>encoded</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></div></pre><p>Note that this code does <em>not</em> validate the type of <code>req.body.string</code>:</p>\n<ul>\n<li><code>req.body.string</code> is expected to be a string. If this is the case, all goes well.</li>\n<li><code>req.body.string</code> is controlled by the client that sends the request.</li>\n<li>If <code>req.body.string</code> is the <em>number</em> <code>50</code>, the <code>rawBytes</code> would be 50 bytes:<ul>\n<li>Before Node.js 8, the content would be uninitialized</li>\n<li>After Node.js 8, the content would be <code>50</code> bytes with the value <code>0</code></li>\n</ul>\n</li>\n</ul>\n<p>Because of the missing type check, an attacker could intentionally send a number\nas part of the request. Using this, they can either:</p>\n<ul>\n<li>Read uninitialized memory. This <strong>will</strong> leak passwords, encryption keys and other\nkinds of sensitive information. (Information leak)</li>\n<li>Force the program to allocate a large amount of memory. For example, when specifying\n<code>500000000</code> as the input value, each request will allocate 500MB of memory.\nThis can be used to either exhaust the memory available of a program completely\nand make it crash, or slow it down significantly. (Denial of Service)</li>\n</ul>\n<p>Both of these scenarios are considered serious security issues in a real-world\nweb server context.</p>\n<p>when using <code>Buffer.from(req.body.string)</code> instead, passing a number will always\nthrow an exception instead, giving a controlled behaviour that can always be\nhandled by the program.</p>\n<p><a id=\"ecosystem-usage\"></a></p>\n<h3 id=\"the-buffer-constructor-has-been-deprecated-for-a-while-is-this-really-an-issue-\">The <code>Buffer()</code> constructor has been deprecated for a while. Is this really an issue?</h3>\n<p>Surveys of code in the <code>npm</code> ecosystem have shown that the <code>Buffer()</code> constructor is still\nwidely used. This includes new code, and overall usage of such code has actually been\n<em>increasing</em>.</p>\n"
      ],
      "contentsRaw": "# Porting to the Buffer.from/Buffer.alloc API\n\n<a id=\"overview\"></a>\n## Overview\n\n- [Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x.](#variant-1) (*recommended*)\n- [Variant 2: Use a polyfill](#variant-2)\n- [Variant 3: manual detection, with safeguards](#variant-3)\n\n### Finding problematic bits of code using grep\n\nJust run `grep -nrE '[^a-zA-Z](Slow)?Buffer\\s*\\(' --exclude-dir node_modules`.\n\nIt will find all the potentially unsafe places in your own code (with some considerably unlikely\nexceptions).\n\n### Finding problematic bits of code using Node.js 8\n\nIf you’re using Node.js ≥ 8.0.0 (which is recommended), Node.js exposes multiple options that help with finding the relevant pieces of code:\n\n- `--trace-warnings` will make Node.js show a stack trace for this warning and other warnings that are printed by Node.js.\n- `--trace-deprecation` does the same thing, but only for deprecation warnings.\n- `--pending-deprecation` will show more types of deprecation warnings. In particular, it will show the `Buffer()` deprecation warning, even on Node.js 8.\n\nYou can set these flags using an environment variable:\n\n```console\n$ export NODE_OPTIONS='--trace-warnings --pending-deprecation'\n$ cat example.js\n'use strict';\nconst foo = new Buffer('foo');\n$ node example.js\n(node:7147) [DEP0005] DeprecationWarning: The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead.\n    at showFlaggedDeprecation (buffer.js:127:13)\n    at new Buffer (buffer.js:148:3)\n    at Object.<anonymous> (/path/to/example.js:2:13)\n    [... more stack trace lines ...]\n```\n\n### Finding problematic bits of code using linters\n\nEslint rules [no-buffer-constructor](https://eslint.org/docs/rules/no-buffer-constructor)\nor\n[node/no-deprecated-api](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md)\nalso find calls to deprecated `Buffer()` API. Those rules are included in some pre-sets.\n\nThere is a drawback, though, that it doesn't always\n[work correctly](https://github.com/chalker/safer-buffer#why-not-safe-buffer) when `Buffer` is\noverriden e.g. with a polyfill, so recommended is a combination of this and some other method\ndescribed above.\n\n<a id=\"variant-1\"></a>\n## Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x.\n\nThis is the recommended solution nowadays that would imply only minimal overhead.\n\nThe Node.js 5.x release line has been unsupported since July 2016, and the Node.js 4.x release line reaches its End of Life in April 2018 (→ [Schedule](https://github.com/nodejs/Release#release-schedule)). This means that these versions of Node.js will *not* receive any updates, even in case of security issues, so using these release lines should be avoided, if at all possible.\n\nWhat you would do in this case is to convert all `new Buffer()` or `Buffer()` calls to use `Buffer.alloc()` or `Buffer.from()`, in the following way:\n\n- For `new Buffer(number)`, replace it with `Buffer.alloc(number)`.\n- For `new Buffer(string)` (or `new Buffer(string, encoding)`), replace it with `Buffer.from(string)` (or `Buffer.from(string, encoding)`).\n- For all other combinations of arguments (these are much rarer), also replace `new Buffer(...arguments)` with `Buffer.from(...arguments)`.\n\nNote that `Buffer.alloc()` is also _faster_ on the current Node.js versions than\n`new Buffer(size).fill(0)`, which is what you would otherwise need to ensure zero-filling.\n\nEnabling eslint rule [no-buffer-constructor](https://eslint.org/docs/rules/no-buffer-constructor)\nor\n[node/no-deprecated-api](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md)\nis recommended to avoid accidential unsafe Buffer API usage.\n\nThere is also a [JSCodeshift codemod](https://github.com/joyeecheung/node-dep-codemod#dep005)\nfor automatically migrating Buffer constructors to `Buffer.alloc()` or `Buffer.from()`.\nNote that it currently only works with cases where the arguments are literals or where the\nconstructor is invoked with two arguments.\n\n_If you currently support those older Node.js versions and dropping them would be a semver-major change\nfor you, or if you support older branches of your packages, consider using [Variant 2](#variant-2)\nor [Variant 3](#variant-3) on older branches, so people using those older branches will also receive\nthe fix. That way, you will eradicate potential issues caused by unguarded Buffer API usage and\nyour users will not observe a runtime deprecation warning when running your code on Node.js 10._\n\n<a id=\"variant-2\"></a>\n## Variant 2: Use a polyfill\n\nUtilize [safer-buffer](https://www.npmjs.com/package/safer-buffer) as a polyfill to support older\nNode.js versions.\n\nYou would take exacly the same steps as in [Variant 1](#variant-1), but with a polyfill\n`const Buffer = require('safer-buffer').Buffer` in all files where you use the new `Buffer` api.\n\nMake sure that you do not use old `new Buffer` API — in any files where the line above is added,\nusing old `new Buffer()` API will _throw_. It will be easy to notice that in CI, though.\n\nAlternatively, you could use [buffer-from](https://www.npmjs.com/package/buffer-from) and/or\n[buffer-alloc](https://www.npmjs.com/package/buffer-alloc) [ponyfills](https://ponyfill.com/) —\nthose are great, the only downsides being 4 deps in the tree and slightly more code changes to\nmigrate off them (as you would be using e.g. `Buffer.from` under a different name). If you need only\n`Buffer.from` polyfilled — `buffer-from` alone which comes with no extra dependencies.\n\n_Alternatively, you could use [safe-buffer](https://www.npmjs.com/package/safe-buffer) — it also\nprovides a polyfill, but takes a different approach which has\n[it's drawbacks](https://github.com/chalker/safer-buffer#why-not-safe-buffer). It will allow you\nto also use the older `new Buffer()` API in your code, though — but that's arguably a benefit, as\nit is problematic, can cause issues in your code, and will start emitting runtime deprecation\nwarnings starting with Node.js 10._\n\nNote that in either case, it is important that you also remove all calls to the old Buffer\nAPI manually — just throwing in `safe-buffer` doesn't fix the problem by itself, it just provides\na polyfill for the new API. I have seen people doing that mistake.\n\nEnabling eslint rule [no-buffer-constructor](https://eslint.org/docs/rules/no-buffer-constructor)\nor\n[node/no-deprecated-api](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md)\nis recommended.\n\n_Don't forget to drop the polyfill usage once you drop support for Node.js < 4.5.0._\n\n<a id=\"variant-3\"></a>\n## Variant 3 — manual detection, with safeguards\n\nThis is useful if you create Buffer instances in only a few places (e.g. one), or you have your own\nwrapper around them.\n\n### Buffer(0)\n\nThis special case for creating empty buffers can be safely replaced with `Buffer.concat([])`, which\nreturns the same result all the way down to Node.js 0.8.x.\n\n### Buffer(notNumber)\n\nBefore:\n\n```js\nvar buf = new Buffer(notNumber, encoding);\n```\n\nAfter:\n\n```js\nvar buf;\nif (Buffer.from && Buffer.from !== Uint8Array.from) {\n  buf = Buffer.from(notNumber, encoding);\n} else {\n  if (typeof notNumber === 'number')\n    throw new Error('The \"size\" argument must be of type number.');\n  buf = new Buffer(notNumber, encoding);\n}\n```\n\n`encoding` is optional.\n\nNote that the `typeof notNumber` before `new Buffer` is required (for cases when `notNumber` argument is not\nhard-coded) and _is not caused by the deprecation of Buffer constructor_ — it's exactly _why_ the\nBuffer constructor is deprecated. Ecosystem packages lacking this type-check caused numereous\nsecurity issues — situations when unsanitized user input could end up in the `Buffer(arg)` create\nproblems ranging from DoS to leaking sensitive information to the attacker from the process memory.\n\nWhen `notNumber` argument is hardcoded (e.g. literal `\"abc\"` or `[0,1,2]`), the `typeof` check can\nbe omitted.\n\nAlso note that using TypeScript does not fix this problem for you — when libs written in\n`TypeScript` are used from JS, or when user input ends up there — it behaves exactly as pure JS, as\nall type checks are translation-time only and are not present in the actual JS code which TS\ncompiles to.\n\n### Buffer(number)\n\nFor Node.js 0.10.x (and below) support:\n\n```js\nvar buf;\nif (Buffer.alloc) {\n  buf = Buffer.alloc(number);\n} else {\n  buf = new Buffer(number);\n  buf.fill(0);\n}\n```\n\nOtherwise (Node.js ≥ 0.12.x):\n\n```js\nconst buf = Buffer.alloc ? Buffer.alloc(number) : new Buffer(number).fill(0);\n```\n\n## Regarding Buffer.allocUnsafe\n\nBe extra cautious when using `Buffer.allocUnsafe`:\n * Don't use it if you don't have a good reason to\n   * e.g. you probably won't ever see a performance difference for small buffers, in fact, those\n     might be even faster with `Buffer.alloc()`,\n   * if your code is not in the hot code path — you also probably won't notice a difference,\n   * keep in mind that zero-filling minimizes the potential risks.\n * If you use it, make sure that you never return the buffer in a partially-filled state,\n   * if you are writing to it sequentially — always truncate it to the actuall written length\n\nErrors in handling buffers allocated with `Buffer.allocUnsafe` could result in various issues,\nranged from undefined behaviour of your code to sensitive data (user input, passwords, certs)\nleaking to the remote attacker.\n\n_Note that the same applies to `new Buffer` usage without zero-filling, depending on the Node.js\nversion (and lacking type checks also adds DoS to the list of potential problems)._\n\n<a id=\"faq\"></a>\n## FAQ\n\n<a id=\"design-flaws\"></a>\n### What is wrong with the `Buffer` constructor?\n\nThe `Buffer` constructor could be used to create a buffer in many different ways:\n\n- `new Buffer(42)` creates a `Buffer` of 42 bytes. Before Node.js 8, this buffer contained\n  *arbitrary memory* for performance reasons, which could include anything ranging from\n  program source code to passwords and encryption keys.\n- `new Buffer('abc')` creates a `Buffer` that contains the UTF-8-encoded version of\n  the string `'abc'`. A second argument could specify another encoding: For example,\n  `new Buffer(string, 'base64')` could be used to convert a Base64 string into the original\n  sequence of bytes that it represents.\n- There are several other combinations of arguments.\n\nThis meant that, in code like `var buffer = new Buffer(foo);`, *it is not possible to tell\nwhat exactly the contents of the generated buffer are* without knowing the type of `foo`.\n\nSometimes, the value of `foo` comes from an external source. For example, this function\ncould be exposed as a service on a web server, converting a UTF-8 string into its Base64 form:\n\n```\nfunction stringToBase64(req, res) {\n  // The request body should have the format of `{ string: 'foobar' }`\n  const rawBytes = new Buffer(req.body.string)\n  const encoded = rawBytes.toString('base64')\n  res.end({ encoded: encoded })\n}\n```\n\nNote that this code does *not* validate the type of `req.body.string`:\n\n- `req.body.string` is expected to be a string. If this is the case, all goes well.\n- `req.body.string` is controlled by the client that sends the request.\n- If `req.body.string` is the *number* `50`, the `rawBytes` would be 50 bytes:\n  - Before Node.js 8, the content would be uninitialized\n  - After Node.js 8, the content would be `50` bytes with the value `0`\n\nBecause of the missing type check, an attacker could intentionally send a number\nas part of the request. Using this, they can either:\n\n- Read uninitialized memory. This **will** leak passwords, encryption keys and other\n  kinds of sensitive information. (Information leak)\n- Force the program to allocate a large amount of memory. For example, when specifying\n  `500000000` as the input value, each request will allocate 500MB of memory.\n  This can be used to either exhaust the memory available of a program completely\n  and make it crash, or slow it down significantly. (Denial of Service)\n\nBoth of these scenarios are considered serious security issues in a real-world\nweb server context.\n\nwhen using `Buffer.from(req.body.string)` instead, passing a number will always\nthrow an exception instead, giving a controlled behaviour that can always be\nhandled by the program.\n\n<a id=\"ecosystem-usage\"></a>\n### The `Buffer()` constructor has been deprecated for a while. Is this really an issue?\n\nSurveys of code in the `npm` ecosystem have shown that the `Buffer()` constructor is still\nwidely used. This includes new code, and overall usage of such code has actually been\n*increasing*.",
      "metadata": {}
    },
    "collaborators": {
      "reference": "collaborators",
      "route": "collaborators",
      "sourcePath": "react-json-blinkforms\\node_modules\\stream-each\\collaborators.md",
      "title": "(untitled)",
      "contents": [
        "<h2 id=\"collaborators\">Collaborators</h2>\n<p>stream-each is only possible due to the excellent work of the following collaborators:</p>\n<table><tbody><tr><th align=\"left\">maxogden</th><td><a href=\"https://github.com/maxogden\">GitHub/maxogden</a></td></tr>\n<tr><th align=\"left\">mafintosh</th><td><a href=\"https://github.com/mafintosh\">GitHub/mafintosh</a></td></tr>\n</tbody></table>"
      ],
      "contentsRaw": "## Collaborators\n\nstream-each is only possible due to the excellent work of the following collaborators:\n\n<table><tbody><tr><th align=\"left\">maxogden</th><td><a href=\"https://github.com/maxogden\">GitHub/maxogden</a></td></tr>\n<tr><th align=\"left\">mafintosh</th><td><a href=\"https://github.com/mafintosh\">GitHub/mafintosh</a></td></tr>\n</tbody></table>",
      "metadata": {}
    },
    "PATRONS": {
      "reference": "PATRONS",
      "route": "PATRONS",
      "sourcePath": "react-json-blinkforms\\node_modules\\terser\\PATRONS.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"our-patrons\">Our patrons</h1>\n<p>These are the first-tier patrons from <a href=\"https://www.patreon.com/fabiosantoscode\">Patreon</a>. My appreciation goes to everyone on this list for supporting the project!</p>\n<ul>\n<li>38elements</li>\n<li>Alan Orozco</li>\n<li>CKEditor</li>\n<li>Mariusz Nowak</li>\n<li>Philippe Léger</li>\n<li>Piotrek Koszuliński</li>\n<li>Viktor Hubert</li>\n</ul>\n"
      ],
      "contentsRaw": "# Our patrons\n\nThese are the first-tier patrons from [Patreon](https://www.patreon.com/fabiosantoscode). My appreciation goes to everyone on this list for supporting the project!\n\n * 38elements\n * Alan Orozco\n * CKEditor\n * Mariusz Nowak\n * Philippe Léger\n * Piotrek Koszuliński\n * Viktor Hubert",
      "metadata": {}
    },
    "README_js": {
      "reference": "README_js",
      "route": "README_js",
      "sourcePath": "react-json-blinkforms\\node_modules\\webpack-dev-middleware\\node_modules\\mime\\src\\README_js.md",
      "title": "(untitled)",
      "contents": [
        "<p><code>`</code>javascript --hide\nrunmd.onRequire = path =&gt; path.replace(/^mime/, &#39;..&#39;);</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>#&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Mime</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other constant tsx\"><span>A</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>comprehensive</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>compact</span></span><span>&nbsp;</span><span class=\"variable other constant tsx\"><span>MIME</span></span><span>&nbsp;</span><span class=\"meta type declaration tsx\"><span class=\"storage type type tsx\"><span>type</span></span><span>&nbsp;</span><span class=\"entity name type alias tsx\"><span>module</span></span><span>.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span>!</span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"entity name type tsx\"><span>Build</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Status</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>https</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>travis-ci.org/broofa/node-mime.svg?branch=master)](</span><span class=\"markup underline link https hyperlink\"><span>https://travis-ci.org/broofa/node-mime</span></span><span>)</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>##</span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>Version</span></span><span>&nbsp;</span><span>2</span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>Notes</span></span><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"variable parameter tsx\"><span>Version</span></span><span>&nbsp;</span><span>2</span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>is</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>a</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>breaking</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>change</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>from</span></span><span>&nbsp;</span><span>1.</span><span class=\"variable parameter tsx\"><span>x</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>semver</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>implies</span></span><span>.</span><span>&nbsp;&nbsp;</span><span class=\"variable parameter tsx\"><span>Specifically</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>*&nbsp;`</span><span class=\"variable parameter tsx\"><span>lookup</span></span><span>(</span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`&nbsp;</span><span class=\"entity name type tsx\"><span>renamed</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>to</span></span><span>&nbsp;`</span><span class=\"entity name type tsx\"><span>getType</span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span>*&nbsp;`</span><span class=\"entity name type tsx\"><span>extension</span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`&nbsp;</span><span class=\"entity name type tsx\"><span>renamed</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>to</span></span><span>&nbsp;`</span><span class=\"entity name type tsx\"><span>getExtension</span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span>*&nbsp;`</span><span class=\"entity name type tsx\"><span>charset</span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`&nbsp;</span><span class=\"entity name type tsx\"><span>and</span></span><span>&nbsp;`</span><span class=\"entity name type tsx\"><span>load</span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>`&nbsp;</span><span class=\"entity name type tsx\"><span>methods</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>have</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>been</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>removed</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"entity name type tsx\"><span>If</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>you</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>prefer</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>legacy</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>version</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>of</span></span><span>&nbsp;</span><span class=\"support type builtin tsx\"><span>this</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>module</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>please</span></span><span>&nbsp;`</span><span class=\"entity name type tsx\"><span>npm</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>install</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>mime</span></span><span>@^</span><span class=\"constant numeric decimal tsx\"><span>1</span></span><span>`.&nbsp;&nbsp;</span><span class=\"entity name type tsx\"><span>Version</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>1</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>docs</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>may</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>be</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>found</span></span><span>&nbsp;</span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"entity name type tsx\"><span>here</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>https</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>github.com/broofa/node-mime/tree/v1.4.0).</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>##</span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>Install</span></span><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"meta type tuple tsx\"><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span>###</span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>NPM</span></span></span></span></span></span></span></div></pre><p>npm install mime</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>###&nbsp;</span><span class=\"variable other readwrite tsx\"><span>Browser</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>It</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>is</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>recommended</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>that</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>you</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>use</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>a</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>bundler</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>such</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other readwrite tsx\"><span>webpack</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>https</span></span><span>:</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>webpack.github.io/)&nbsp;or&nbsp;[browserify](</span><span class=\"markup underline link http hyperlink\"><span>http://browserify.org/</span></span><span>)&nbsp;to</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>package</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>your</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>code</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span>&nbsp;&nbsp;</span><span class=\"variable other property tsx\"><span>However</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>browser</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>ready</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>versions</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>are</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>available</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>via</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>wzrd</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>in</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other constant object tsx\"><span>E</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>g</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span>&nbsp;</span><span class=\"variable other property tsx\"><span>For</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>full</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>version</span></span><span>:</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>src</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://wzrd.in/standalone/mime@latest</span></span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;mime.getType(...);&nbsp;//&nbsp;etc.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>Or,&nbsp;for&nbsp;the&nbsp;`mime/lite`&nbsp;version:</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>src</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://wzrd.in/standalone/mime%2flite@latest</span></span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;mimelite.getType(...);&nbsp;//&nbsp;(Note&nbsp;`mimelite`&nbsp;here)</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>script</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>##&nbsp;Quick&nbsp;Start</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>For&nbsp;the&nbsp;full&nbsp;version&nbsp;(800+&nbsp;MIME&nbsp;types,&nbsp;1,000+&nbsp;extensions):</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>```javascript&nbsp;--run&nbsp;default</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>const&nbsp;mime&nbsp;=&nbsp;require(&#39;mime&#39;);</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>mime.getType(&#39;txt&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;RESULT</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>mime.getExtension(&#39;text/plain&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;RESULT</span></span></span></span></span></span></span></span></span></span></div></pre><p>See <a href=\"#mime-api\">Mime API</a> below for API details.</p>\n<h2 id=\"lite-version\">Lite Version</h2>\n<p>There is also a &quot;lite&quot; version of this module that omits vendor-specific\n(<code>*/vnd.*</code>) and experimental (<code>*/x-*</code>) types.  It weighs in at ~2.5KB, compared\nto 8KB for the full version.  To load the lite version:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>const&nbsp;mime&nbsp;=&nbsp;require(&#39;mime/lite&#39;);</span></span></div></pre><h2 id=\"mime-vs-mime-types-vs-mime-db-modules\">Mime .vs. mime-types .vs. mime-db modules</h2>\n<p>For those of you wondering about the difference between these [popular] NPM modules,\nhere&#39;s a brief rundown ...</p>\n<p><a href=\"https://github.com/jshttp/mime-db\"><code>mime-db</code></a> is &quot;the source of\ntruth&quot; for MIME type information.  It is not an API.  Rather, it is a canonical\ndataset of mime type definitions pulled from IANA, Apache, NGINX, and custom mappings\nsubmitted by the Node.js community.</p>\n<p><a href=\"https://github.com/jshttp/mime-types\"><code>mime-types</code></a> is a thin\nwrapper around mime-db that provides an API drop-in compatible(ish) with <code>mime @ &lt; v1.3.6</code> API.</p>\n<p><code>mime</code> is, as of v2, a self-contained module bundled with a pre-optimized version\nof the <code>mime-db</code> dataset.  It provides a simplified API with the following characteristics:</p>\n<ul>\n<li>Intelligently resolved type conflicts (See <a href=\"https://github.com/broofa/mime-score\">mime-score</a> for details)</li>\n<li>Method naming consistent with industry best-practices</li>\n<li>Compact footprint.  E.g. The minified+compressed sizes of the various modules:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Module</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mime-db</code></td>\n<td>18 KB</td>\n</tr>\n<tr>\n<td><code>mime-types</code></td>\n<td>same as mime-db</td>\n</tr>\n<tr>\n<td><code>mime</code></td>\n<td>8 KB</td>\n</tr>\n<tr>\n<td><code>mime/lite</code></td>\n<td>2 KB</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mime-api\">Mime API</h2>\n<p>Both <code>require(&#39;mime&#39;)</code> and <code>require(&#39;mime/lite&#39;)</code> return instances of the MIME\nclass, documented below.</p>\n<p>Note: Inputs to this API are case-insensitive.  Outputs (returned values) will\nbe lowercase.</p>\n<h3 id=\"new-mime-typemap-more-maps-\">new Mime(typeMap, ... more maps)</h3>\n<p>Most users of this module will not need to create Mime instances directly.\nHowever if you would like to create custom mappings, you may do so as follows\n...</p>\n<p><code>`</code>javascript --run default\n// Require Mime class\nconst Mime = require(&#39;mime/Mime&#39;);</p>\n<p>// Define mime type -&gt; extensions map\nconst typeMap = {\n  &#39;text/abc&#39;: [&#39;abc&#39;, &#39;alpha&#39;, &#39;bet&#39;],\n  &#39;text/def&#39;: [&#39;leppard&#39;]\n};</p>\n<p>// Create and use Mime instance\nconst myMime = new Mime(typeMap);\nmyMime.getType(&#39;abc&#39;);            // RESULT\nmyMime.getExtension(&#39;text/def&#39;);  // RESULT</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>If</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>more</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>than</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>one</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>map</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>argument</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>is</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>provided</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>each</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>map</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>is</span></span><span>&nbsp;</span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>define()</span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>ed</span></span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>see</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>below</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator expression in tsx\"><span>in</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>order</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>###&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>pathOrExtension</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Get</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>mime</span></span><span>&nbsp;</span><span class=\"meta type declaration tsx\"><span class=\"storage type type tsx\"><span>type</span></span><span>&nbsp;</span><span class=\"entity name type alias tsx\"><span>for</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>given</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>path</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>or</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>extension</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span>&nbsp;&nbsp;</span><span class=\"entity name type module tsx\"><span>E</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name type module tsx\"><span>g</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span>```</span><span class=\"entity name type tsx\"><span>javascript</span></span><span>&nbsp;--</span><span class=\"entity name type tsx\"><span>run</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>default</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta type declaration tsx\"><span class=\"entity name type module tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name type tsx\"><span>getType</span></span><span class=\"meta type paren cover tsx\"><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>js</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>json</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>txt</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>dir/text.txt</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>dir</span><span class=\"constant character escape tsx\"><span>\\\\</span></span><span>text.txt</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>.text.txt</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getType</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted single tsx\"><span class=\"punctuation definition string begin tsx\"><span>&#39;</span></span><span>.txt</span><span class=\"punctuation definition string end tsx\"><span>&#39;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RESULT</span></span></span></div></pre><p><code>null</code> is returned in cases where an extension is not detected or recognized</p>\n<p><code>`</code>javascript --run default\nmime.getType(&#39;foo/txt&#39;);        // RESULT\nmime.getType(&#39;bogus_type&#39;);     // RESULT</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span>###&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>mime</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getExtension</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>type</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Get</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>extension</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>for</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>the</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>given</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>mime</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>type</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span>&nbsp;&nbsp;</span><span class=\"variable other property tsx\"><span>Charset</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>options</span></span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>often</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>included</span></span><span>&nbsp;</span><span class=\"keyword operator expression in tsx\"><span>in</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>Content</span></span><span class=\"keyword operator arithmetic tsx\"><span>-</span></span><span class=\"variable other readwrite tsx\"><span>Type</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>headers</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>are</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>ignored</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span class=\"punctuation definition string template end tsx\"><span>`</span></span><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>javascript&nbsp;--run&nbsp;default</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"string template tsx\"><span>mime.getExtension(&#39;text/plain&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"string template tsx\"><span>mime.getExtension(&#39;application/json&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;RESULT</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"string template tsx\"><span>mime.getExtension(&#39;text/html;&nbsp;charset=utf8&#39;);&nbsp;&nbsp;//&nbsp;RESULT</span></span></span></div></pre><h3 id=\"mime-define-typemap-force-false-\">mime.define(typeMap[, force = false])</h3>\n<p>Define [more] type mappings.</p>\n<p><code>typeMap</code> is a map of type -&gt; extensions, as documented in <code>new Mime</code>, above.</p>\n<p>By default this method will throw an error if you try to map a type to an\nextension that is already assigned to another type.  Passing <code>true</code> for the\n<code>force</code> argument will suppress this behavior (overriding any previous mapping).</p>\n<p><code>`</code>javascript --run default\nmime.define({&#39;text/x-abc&#39;: [&#39;abc&#39;, &#39;abcd&#39;]});</p>\n<p>mime.getType(&#39;abcd&#39;);            // RESULT\nmime.getExtension(&#39;text/x-abc&#39;)  // RESULT\n<code>`</code></p>\n<h2 id=\"command-line\">Command Line</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>mime</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other readwrite tsx\"><span>path_or_extension</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span></span></div></pre><p>E.g.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"keyword operator relational tsx\"><span>&gt;</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>mime</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>scripts</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other object tsx\"><span>jquery</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>js</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>application</span></span><span class=\"keyword operator arithmetic tsx\"><span>/</span></span><span class=\"variable other readwrite tsx\"><span>javascript</span></span></span></div></pre>"
      ],
      "contentsRaw": "```javascript --hide\nrunmd.onRequire = path => path.replace(/^mime/, '..');\n```\n# Mime\n\nA comprehensive, compact MIME type module.\n\n[![Build Status](https://travis-ci.org/broofa/node-mime.svg?branch=master)](https://travis-ci.org/broofa/node-mime)\n\n## Version 2 Notes\n\nVersion 2 is a breaking change from 1.x as the semver implies.  Specifically:\n\n* `lookup()` renamed to `getType()`\n* `extension()` renamed to `getExtension()`\n* `charset()` and `load()` methods have been removed\n\nIf you prefer the legacy version of this module please `npm install mime@^1`.  Version 1 docs may be found [here](https://github.com/broofa/node-mime/tree/v1.4.0).\n\n## Install\n\n### NPM\n```\nnpm install mime\n```\n\n### Browser\n\nIt is recommended that you use a bundler such as\n[webpack](https://webpack.github.io/) or [browserify](http://browserify.org/) to\npackage your code.  However, browser-ready versions are available via wzrd.in.\nE.g. For the full version:\n\n    <script src=\"https://wzrd.in/standalone/mime@latest\"></script>\n    <script>\n    mime.getType(...); // etc.\n    <script>\n\nOr, for the `mime/lite` version:\n\n    <script src=\"https://wzrd.in/standalone/mime%2flite@latest\"></script>\n    <script>\n    mimelite.getType(...); // (Note `mimelite` here)\n    <script>\n\n## Quick Start\n\nFor the full version (800+ MIME types, 1,000+ extensions):\n\n```javascript --run default\nconst mime = require('mime');\n\nmime.getType('txt');                    // RESULT\nmime.getExtension('text/plain');        // RESULT\n```\n\nSee [Mime API](#mime-api) below for API details.\n\n## Lite Version\n\nThere is also a \"lite\" version of this module that omits vendor-specific\n(`*/vnd.*`) and experimental (`*/x-*`) types.  It weighs in at ~2.5KB, compared\nto 8KB for the full version.  To load the lite version:\n\n```javascript\nconst mime = require('mime/lite');\n```\n\n## Mime .vs. mime-types .vs. mime-db modules\n\nFor those of you wondering about the difference between these [popular] NPM modules,\nhere's a brief rundown ...\n\n[`mime-db`](https://github.com/jshttp/mime-db) is \"the source of\ntruth\" for MIME type information.  It is not an API.  Rather, it is a canonical\ndataset of mime type definitions pulled from IANA, Apache, NGINX, and custom mappings\nsubmitted by the Node.js community.\n\n[`mime-types`](https://github.com/jshttp/mime-types) is a thin\nwrapper around mime-db that provides an API drop-in compatible(ish) with `mime @ < v1.3.6` API.\n\n`mime` is, as of v2, a self-contained module bundled with a pre-optimized version\nof the `mime-db` dataset.  It provides a simplified API with the following characteristics:\n\n* Intelligently resolved type conflicts (See [mime-score](https://github.com/broofa/mime-score) for details)\n* Method naming consistent with industry best-practices\n* Compact footprint.  E.g. The minified+compressed sizes of the various modules:\n\nModule | Size\n--- | ---\n`mime-db`  | 18 KB\n`mime-types` | same as mime-db\n`mime` | 8 KB\n`mime/lite` | 2 KB\n\n## Mime API\n\nBoth `require('mime')` and `require('mime/lite')` return instances of the MIME\nclass, documented below.\n\nNote: Inputs to this API are case-insensitive.  Outputs (returned values) will\nbe lowercase.\n\n### new Mime(typeMap, ... more maps)\n\nMost users of this module will not need to create Mime instances directly.\nHowever if you would like to create custom mappings, you may do so as follows\n...\n\n```javascript --run default\n// Require Mime class\nconst Mime = require('mime/Mime');\n\n// Define mime type -> extensions map\nconst typeMap = {\n  'text/abc': ['abc', 'alpha', 'bet'],\n  'text/def': ['leppard']\n};\n\n// Create and use Mime instance\nconst myMime = new Mime(typeMap);\nmyMime.getType('abc');            // RESULT\nmyMime.getExtension('text/def');  // RESULT\n```\n\nIf more than one map argument is provided, each map is `define()`ed (see below), in order.\n\n### mime.getType(pathOrExtension)\n\nGet mime type for the given path or extension.  E.g.\n\n```javascript --run default\nmime.getType('js');             // RESULT\nmime.getType('json');           // RESULT\n\nmime.getType('txt');            // RESULT\nmime.getType('dir/text.txt');   // RESULT\nmime.getType('dir\\\\text.txt');  // RESULT\nmime.getType('.text.txt');      // RESULT\nmime.getType('.txt');           // RESULT\n```\n\n`null` is returned in cases where an extension is not detected or recognized\n\n```javascript --run default\nmime.getType('foo/txt');        // RESULT\nmime.getType('bogus_type');     // RESULT\n```\n\n### mime.getExtension(type)\nGet extension for the given mime type.  Charset options (often included in\nContent-Type headers) are ignored.\n\n```javascript --run default\nmime.getExtension('text/plain');               // RESULT\nmime.getExtension('application/json');         // RESULT\nmime.getExtension('text/html; charset=utf8');  // RESULT\n```\n\n### mime.define(typeMap[, force = false])\n\nDefine [more] type mappings.\n\n`typeMap` is a map of type -> extensions, as documented in `new Mime`, above.\n\nBy default this method will throw an error if you try to map a type to an\nextension that is already assigned to another type.  Passing `true` for the\n`force` argument will suppress this behavior (overriding any previous mapping).\n\n```javascript --run default\nmime.define({'text/x-abc': ['abc', 'abcd']});\n\nmime.getType('abcd');            // RESULT\nmime.getExtension('text/x-abc')  // RESULT\n```\n\n## Command Line\n\n    mime [path_or_extension]\n\nE.g.\n\n    > mime scripts/jquery.js\n    application/javascript",
      "metadata": {}
    },
    "SECURITY": {
      "reference": "SECURITY",
      "route": "SECURITY",
      "sourcePath": "react-json-blinkforms\\node_modules\\webpack\\SECURITY.md",
      "title": "(untitled)",
      "contents": [
        "<h1 id=\"reporting-security-issues\">Reporting Security Issues</h1>\n<p>If you discover a security issue in webpack, please report it by sending an\nemail to <a href=\"mailto:webpack@opencollective.com\">webpack@opencollective.com</a>.</p>\n<p>This will allow us to assess the risk, and make a fix available before we add a\nbug report to the GitHub repository.</p>\n<p>Thanks for helping make webpack safe for everyone.</p>\n"
      ],
      "contentsRaw": "# Reporting Security Issues\n\nIf you discover a security issue in webpack, please report it by sending an\nemail to [webpack@opencollective.com](mailto:webpack@opencollective.com).\n\nThis will allow us to assess the risk, and make a fix available before we add a\nbug report to the GitHub repository.\n\nThanks for helping make webpack safe for everyone.",
      "metadata": {}
    },
    "ArrayDefault": {
      "reference": "ArrayDefault",
      "route": "react-json-blinkforms/renderers/ArrayDefault",
      "sourcePath": "react-json-blinkforms\\src\\renderers\\ArrayDefault.md",
      "title": "ArrayDefault",
      "contents": [
        {
          "tag": "heading",
          "value": "ArrayDefault",
          "level": 1,
          "route": "react-json-blinkforms/renderers/ArrayDefault"
        },
        "<p>Navbars present useful navigation controls at the top of an application.</p>\n",
        {
          "tag": "reactExample",
          "value": "ArrayDefaultExample"
        },
        {
          "tag": "heading",
          "value": "Fixed to viewport top",
          "level": 3,
          "route": "react-json-blinkforms/renderers/ArrayDefault.fixed-to-viewport-top"
        },
        "<p>Enable the <code>fixedToTop</code> prop to attach a navbar to the top of the viewport using\n<code>position: fixed; top: 0;</code>. This is so-called &quot;sticky&quot; behavior: the navbar\nstays at the top of the screen as the user scrolls through the document.</p>\n<p>This modifier is not illustrated here because it breaks the document flow.</p>\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Body padding required</h4>\n    The fixed navbar will lie on top of your other content unless you add padding to the top of the\n    <code>&lt;body&gt;</code> element equal to the height of the navbar. Use the <code>$pt-navbar-height</code> Sass variable.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Fixed width",
          "level": 3,
          "route": "react-json-blinkforms/renderers/ArrayDefault.fixed-width"
        },
        "<p>If your application is inside a fixed-width container (instead of spanning the\nentire viewport), you can align the navbar to match by wrap your navbar groups\nin an element with your desired <code>width</code> and <code>margin: 0 auto;</code> to horizontally\ncenter it.</p>\n",
        {
          "tag": "css",
          "value": "navbar-container"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "react-json-blinkforms/renderers/ArrayDefault.props"
        },
        "<p>The <code>Navbar</code> API includes four stateless React components:</p>\n<ul>\n<li><code>Navbar</code></li>\n<li><code>NavbarGroup</code> (aliased as <code>Navbar.Group</code>)</li>\n<li><code>NavbarHeading</code> (aliased as <code>Navbar.Heading</code>)</li>\n<li><code>NavbarDivider</code> (aliased as <code>Navbar.Divider</code>)</li>\n</ul>\n<p>These components are simple containers for their children. Each of them supports\nthe full range of HTML <code>&lt;div&gt;</code> props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Group</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>align</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Alignment</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>LEFT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Heading</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Blueprint</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Heading</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Divider</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-minimal</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>home</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Home</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-minimal</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>document</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Files</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Group</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "INavbarProps"
        },
        {
          "tag": "interface",
          "value": "INavbarGroupProps"
        },
        {
          "tag": "interface",
          "value": "INavbarHeadingProps"
        },
        {
          "tag": "interface",
          "value": "INavbarDividerProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "react-json-blinkforms/renderers/ArrayDefault.css"
        },
        "<p>Use the following classes to construct a navbar:</p>\n<ul>\n<li><code>nav.bp3-navbar</code> &ndash; The parent element. Use a <code>&lt;nav&gt;</code> element for accessibility.</li>\n<li><code>.bp3-navbar-group.bp3-align-(left|right)</code> &ndash; Left- or right-aligned group.</li>\n<li><code>.bp3-navbar-heading</code> &ndash; Larger text for your application title.</li>\n<li><code>.bp3-navbar-divider</code> &ndash; Thin vertical line that can be placed between groups of elements.</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "navbar"
        }
      ],
      "contentsRaw": "@# ArrayDefault\n\nNavbars present useful navigation controls at the top of an application.\n\n@reactExample ArrayDefaultExample\n\n@### Fixed to viewport top\n\nEnable the `fixedToTop` prop to attach a navbar to the top of the viewport using\n`position: fixed; top: 0;`. This is so-called \"sticky\" behavior: the navbar\nstays at the top of the screen as the user scrolls through the document.\n\nThis modifier is not illustrated here because it breaks the document flow.\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Body padding required</h4>\n    The fixed navbar will lie on top of your other content unless you add padding to the top of the\n    `<body>` element equal to the height of the navbar. Use the `$pt-navbar-height` Sass variable.\n</div>\n\n@### Fixed width\n\nIf your application is inside a fixed-width container (instead of spanning the\nentire viewport), you can align the navbar to match by wrap your navbar groups\nin an element with your desired `width` and `margin: 0 auto;` to horizontally\ncenter it.\n\n@css navbar-container\n\n@## Props\n\nThe `Navbar` API includes four stateless React components:\n\n* `Navbar`\n* `NavbarGroup` (aliased as `Navbar.Group`)\n* `NavbarHeading` (aliased as `Navbar.Heading`)\n* `NavbarDivider` (aliased as `Navbar.Divider`)\n\nThese components are simple containers for their children. Each of them supports\nthe full range of HTML `<div>` props.\n\n```tsx\n<Navbar>\n    <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>Blueprint</Navbar.Heading>\n        <Navbar.Divider />\n        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Files\" />\n    </Navbar.Group>\n</Navbar>\n```\n\n@interface INavbarProps\n\n@interface INavbarGroupProps\n\n@interface INavbarHeadingProps\n\n@interface INavbarDividerProps\n\n@## CSS\n\nUse the following classes to construct a navbar:\n\n* `nav.bp3-navbar` &ndash; The parent element. Use a `<nav>` element for accessibility.\n* `.bp3-navbar-group.bp3-align-(left|right)` &ndash; Left- or right-aligned group.\n* `.bp3-navbar-heading` &ndash; Larger text for your application title.\n* `.bp3-navbar-divider` &ndash; Thin vertical line that can be placed between groups of elements.\n\n@css navbar",
      "metadata": {}
    },
    "renderers": {
      "reference": "renderers",
      "route": "react-json-blinkforms/renderers",
      "sourcePath": "react-json-blinkforms\\src\\renderers\\renderers.md",
      "title": "Components",
      "contents": [
        {
          "tag": "heading",
          "value": "Components",
          "level": 1,
          "route": "react-json-blinkforms/renderers"
        },
        "<!-- Exact ordering of components in the navbar: -->\n",
        {
          "tag": "page",
          "value": "ArrayDefault"
        }
      ],
      "contentsRaw": "@# Components\n\n<!-- Exact ordering of components in the navbar: -->\n@page ArrayDefault",
      "metadata": {}
    }
  },
  "typescript": {
    "NodeType": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "NodeType",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L5",
      "members": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ARRAY",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L10",
          "defaultValue": "\"array\""
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BOOLEAN",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L8",
          "defaultValue": "\"boolean\""
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NUMBER",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L7",
          "defaultValue": "\"number\""
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "OBJECT",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L9",
          "defaultValue": "\"object\""
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ROOT",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L11",
          "defaultValue": "\"root\""
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "STRING",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L6",
          "defaultValue": "\"string\""
        }
      ]
    },
    "LayoutMode": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "LayoutMode",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L46",
      "members": [
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "INLINE_LABEL",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L48",
          "defaultValue": "\"inlineLabel\""
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NORMAL",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L47",
          "defaultValue": "\"normal\""
        }
      ]
    },
    "FormContext": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "FormContext",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L367",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "errors",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L368",
          "type": "Array<NodeError>"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getErrorsForNode",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L369",
          "type": "(node: NodeAny) => Array<NodeError>"
        }
      ]
    },
    "NodeTypeSchemas": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeTypeSchemas",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L14",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ARRAY",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L19",
          "type": "NodeArraySchema"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "BOOLEAN",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L17",
          "type": "NodeBooleanSchema"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "NUMBER",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L16",
          "type": "NodeNumberSchema"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "OBJECT",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L18",
          "type": "NodeObjectSchema"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ROOT",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L20",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "STRING",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L15",
          "type": "NodeStringSchema"
        }
      ]
    },
    "NodeObjectSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeObjectSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L36",
      "extends": [
        "{ [key: string]: any }"
      ],
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "any",
        "type": "{ [key: string]: any }"
      },
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L25",
          "inheritedFrom": "__type.description",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatInput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L29",
          "inheritedFrom": "__type.formatInput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatOutput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L28",
          "inheritedFrom": "__type.formatOutput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "properties",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L39",
          "type": "NodeProperties"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "required",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L38",
          "type": "Array<string>"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L24",
          "inheritedFrom": "__type.title",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L37",
          "type": "NodeType.OBJECT"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ui",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
          "inheritedFrom": "__type.ui",
          "type": "string"
        }
      ]
    },
    "NodeStringSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeStringSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L42",
      "extends": [
        "{ [key: string]: any }"
      ],
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "any",
        "type": "{ [key: string]: any }"
      },
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L25",
          "inheritedFrom": "__type.description",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatInput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L29",
          "inheritedFrom": "__type.formatInput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatOutput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L28",
          "inheritedFrom": "__type.formatOutput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L24",
          "inheritedFrom": "__type.title",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L43",
          "type": "NodeType.STRING"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ui",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
          "inheritedFrom": "__type.ui",
          "type": "string"
        }
      ]
    },
    "NodeNumberSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeNumberSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L46",
      "extends": [
        "{ [key: string]: any }"
      ],
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "any",
        "type": "{ [key: string]: any }"
      },
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L25",
          "inheritedFrom": "__type.description",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatInput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L29",
          "inheritedFrom": "__type.formatInput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatOutput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L28",
          "inheritedFrom": "__type.formatOutput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L24",
          "inheritedFrom": "__type.title",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L47",
          "type": "NodeType.NUMBER"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ui",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
          "inheritedFrom": "__type.ui",
          "type": "string"
        }
      ]
    },
    "NodeBooleanSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeBooleanSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L50",
      "extends": [
        "{ [key: string]: any }"
      ],
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "any",
        "type": "{ [key: string]: any }"
      },
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L25",
          "inheritedFrom": "__type.description",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatInput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L29",
          "inheritedFrom": "__type.formatInput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatOutput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L28",
          "inheritedFrom": "__type.formatOutput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L24",
          "inheritedFrom": "__type.title",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L51",
          "type": "NodeType.BOOLEAN"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ui",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
          "inheritedFrom": "__type.ui",
          "type": "string"
        }
      ]
    },
    "NodeArraySchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeArraySchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L54",
      "extends": [
        "{ [key: string]: any }"
      ],
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "any",
        "type": "{ [key: string]: any }"
      },
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L25",
          "inheritedFrom": "__type.description",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatInput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L29",
          "inheritedFrom": "__type.formatInput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "formatOutput",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L28",
          "inheritedFrom": "__type.formatOutput",
          "type": "(output: any) => any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L56",
          "type": "Array<NodeBaseSchema> | NodeBaseSchema"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L24",
          "inheritedFrom": "__type.title",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L55",
          "type": "NodeType.ARRAY"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ui",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L26",
          "inheritedFrom": "__type.ui",
          "type": "string"
        }
      ]
    },
    "SchemaNodeHandlersMappingForType": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "SchemaNodeHandlersMappingForType",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L357",
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L357",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "NodeHandler<any, any, M>",
        "type": "{ [key: string]: NodeHandler<any, any, M> }"
      },
      "methods": [],
      "properties": []
    },
    "NodeProperties": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "NodeProperties",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L32",
      "indexSignature": {
        "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L32",
        "parameters": [
          {
            "flags": {
              "isExported": false,
              "isExternal": false,
              "isOptional": false,
              "isPrivate": false,
              "isProtected": false,
              "isPublic": false,
              "isRest": false,
              "isStatic": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "NodeSchema",
        "type": "{ [key: string]: NodeSchema }"
      },
      "methods": [],
      "properties": []
    },
    "SchemaParserConfig": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "SchemaParserConfig",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L372",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ajvOptions",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L380",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handlers",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L373",
          "type": "SchemaNodeHandlersMapping"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootModifyContext",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L377",
          "type": "(fn: (context: FormContext) => FormContext, source: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootSetContext",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L376",
          "type": "(context: FormContext, source: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootSetState",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L375",
          "type": "(state: NodeState<any>, root: RootNode, originalSource?: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootState",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L374",
          "type": "NodeState<any>"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "uidGenerator",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L378",
          "type": "() => number"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "uidGeneratorFactory",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L379",
          "type": "() => () => number"
        }
      ]
    },
    "SchemaParserConfigOpt": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "SchemaParserConfigOpt",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L383",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ajvOptions",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L391",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handlers",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L384",
          "type": "SchemaNodeHandlersMapping"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootModifyContext",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L388",
          "type": "(fn: (context: FormContext) => FormContext, source: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootSetContext",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L387",
          "type": "(context: FormContext, source: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootSetState",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L386",
          "type": "(state: NodeState<any>, root: NodeAny, originalSource?: NodeAny) => void"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rootState",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L385",
          "type": "NodeState<any>"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "uidGenerator",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L389",
          "type": "() => number"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "uidGeneratorFactory",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L390",
          "type": "() => () => number"
        }
      ]
    },
    "AjvError": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "AjvError",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L20",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dataPath",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L21",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "keyword",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L22",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "message",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L23",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "node",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L26",
          "type": "NodeAny"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "params",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L24",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\typescript-core\\src\\schemaParser.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "schemaPath",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaParser.tsx#L25",
          "type": "string"
        }
      ]
    },
    "WithDescriptionProps": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "WithDescriptionProps",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L41",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parent",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L42",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithDescription.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "titleExtra",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithDescription.tsx#L43",
          "type": "any"
        }
      ]
    },
    "WithErrorsProps": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithErrors.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "WithErrorsProps",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithErrors.tsx#L8",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithErrors.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "context",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithErrors.tsx#L9",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithErrors.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parent",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithErrors.tsx#L10",
          "type": "any"
        }
      ]
    },
    "WithMarginsProps": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithMargins.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "WithMarginsProps",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithMargins.tsx#L9",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\utils\\WithMargins.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parent",
          "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/utils/WithMargins.tsx#L10",
          "type": "any"
        }
      ]
    },
    "FormProps": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "FormProps",
      "methods": [],
      "properties": [
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "type": "Schema"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fontSize",
          "type": "string"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSubmit",
          "type": "(data: any) => void"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "theme",
          "type": "any"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "use",
          "type": "Array<any>"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "validateOnChange",
          "type": "boolean"
        },
        {
          "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\form.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "validateOnInit",
          "type": "boolean"
        }
      ]
    },
    "SchemaTreeResolver": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "SchemaTreeResolver",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L405",
      "type": "(node: M, parentNode: Node<PS, PO, PM>, config: SchemaParserConfig) => Node<any, any, M>"
    },
    "NodeBaseSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeBaseSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L23",
      "type": "{ [key: string]: any }"
    },
    "Schema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "Schema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L61",
      "type": "NodeObjectSchema"
    },
    "NodeHandler": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeHandler",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L349",
      "type": ""
    },
    "NodeTypeNames": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeTypeNames",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L361",
      "type": "keyof NodeType"
    },
    "SchemaNodeHandlersMapping": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "SchemaNodeHandlersMapping",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L363",
      "type": ""
    },
    "NodeState": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeState",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L394",
      "type": "S"
    },
    "NodeOutputValue": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeOutputValue",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L396",
      "type": "O"
    },
    "NodeMetaOutputValue": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeMetaOutputValue",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L398",
      "type": ""
    },
    "NodeAny": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeAny",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L403",
      "type": "Node<any, any, any>"
    },
    "NodeSchema": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeSchema",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L59",
      "type": "ValueOf<NodeTypeSchemas>"
    },
    "NodeError": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\schemaTypes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeError",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/schemaTypes.tsx#L427",
      "type": "NodeErrorAjv | NodeErrorPure"
    },
    "BlinkformsStateTransformer": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\BlinkformsClient.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "BlinkformsStateTransformer",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/BlinkformsClient.tsx#L9",
      "type": "(state: NodeState<any>, root: RootNode) => NodeState<any>"
    },
    "BlinkformsContextUpdateHandler": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\BlinkformsClient.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "BlinkformsContextUpdateHandler",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/BlinkformsClient.tsx#L10",
      "type": "(context: FormContext, source: NodeAny) => void"
    },
    "BlinkformsContextTransformer": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\BlinkformsClient.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "BlinkformsContextTransformer",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/BlinkformsClient.tsx#L11",
      "type": "(fn: (context: FormContext) => FormContext, source: NodeAny) => void"
    },
    "NodeS": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\ArrayDefault.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeS",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/ArrayDefault.tsx#L22",
      "type": ""
    },
    "NodeO": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\ArrayDefault.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeO",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/ArrayDefault.tsx#L20",
      "type": "NodeOutputValue<Array<NodeOutputValue<any>>>"
    },
    "ChildrenMap": {
      "fileName": "..\\blinkforms\\typescript-core\\src\\compositeNodes.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ChildrenMap",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/b963ca6/src/compositeNodes.tsx#L20",
      "type": "{ [key: string]: T }"
    },
    "NodeSMapping": {
      "fileName": "..\\blinkforms\\react-json-blinkforms\\src\\renderers\\ArrayDefault.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NodeSMapping",
      "sourceUrl": "https://github.com/json-blinkforms/blinkforms-docs/blob/6bd95ac/src/renderers/ArrayDefault.tsx#L16",
      "type": "{ [key: string]: NodeState<any> }"
    }
  },
  "css": {},
  "npm": {}
}