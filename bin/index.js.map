{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"react\"","webpack:///external \"react-hot-loader\"","webpack:///external \"styled-components\"","webpack:///(webpack)/buildin/harmony-module.js","webpack:///../typescript-core/src/schemaTypes.tsx","webpack:///./renderers/utils/WithDescription.tsx","webpack:///./renderers/utils/WithErrors.tsx","webpack:///./renderers/utils/WithMargins.tsx","webpack:///../typescript-core/src/simpleNodes.tsx","webpack:///./renderers/defaultReactHandlerProvider.tsx","webpack:///../typescript-core/src/compositeNodes.tsx","webpack:///./renderers/ObjectDefault.tsx","webpack:///./form.tsx","webpack:///../typescript-core/src/BlinkformsClient.tsx","webpack:///../typescript-core/src/schemaParser.tsx","webpack:///external \"ajv\"","webpack:///../typescript-core/src/defaultParserConfig.tsx","webpack:///./renderers/StringDefault.tsx","webpack:///./renderers/StringNotice.tsx","webpack:///./renderers/StringEnum.tsx","webpack:///./renderers/ArrayDefault.tsx","webpack:///./renderers/ArrayTuple.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","originalModule","webpackPolyfill","children","NodeType","Node","handler","type","schemaNode","parentNode","config","resolver","this","state","tag","uid","uidGenerator","getHandler","isOutputAvailable","validateCustom","length","result_1","forEach","child","concat","getDebugRepresentation","output","toString","map","childText","split","line","index","repeat","join","getUID","onResolveFinished","modifyContext","fn","rootModifyContext","setContext","context","rootSetContext","resolve","resolveInitialState","resolveChildren","addChild","push","overrideChildren","slice","getChildren","resolveNode","node","getConfig","getSchema","getState","getTag","setTag","setParent","getRawOutput","options","onChildStateChanged","source","originalSource","setStateSilently","assign","tslib__WEBPACK_IMPORTED_MODULE_0__","setState","findChild","filter","getOutput","enableFormat","formatOutput","__data","__source","setValue","RootNode","_super","dataTransformer","validator","_this","ROOT","validate","getData","render","getJsonSchema","compatID","Math","random","recParse","removeLabels","_typeof","_jsonSchemaCompat","nullable","keys","schema","rootSetState","isNodeErrorPure","error","undefined","LayoutMode","Wrapper","styled_components__WEBPACK_IMPORTED_MODULE_2___default","a","div","templateObject_1","TitleWrapper","templateObject_2","props","theme","primaryFont","DescriptionWrapper","templateObject_3","ContentWrapper","templateObject_4","TextWrapperInlineLabel","templateObject_5","ContentWrapperInlineLabel","templateObject_6","TitleExtraWrapper","templateObject_7","WithDescription","layout","parent","NORMAL","titleExtraNode","titleExtra","react__WEBPACK_IMPORTED_MODULE_1__","title","description","INLINE_LABEL","ErrorIcon","NoErrorIcon","IconWrapper","isVisible","Content","ErrorPopoverLabel","span","ErrorContainer","WithErrors","errors","getErrorsForNode","iconNode","message","WithMargins","SimpleNode","getInitialValue","renderSimple","_schemaTypes__WEBPACK_IMPORTED_MODULE_1__","default","_ObjectDefault__WEBPACK_IMPORTED_MODULE_0__","STRING","_StringDefault__WEBPACK_IMPORTED_MODULE_1__","notice","_StringNotice__WEBPACK_IMPORTED_MODULE_2__","enum","_StringEnum__WEBPACK_IMPORTED_MODULE_3__","OBJECT","ARRAY","_ArrayDefault__WEBPACK_IMPORTED_MODULE_4__","tuple","_ArrayTuple__WEBPACK_IMPORTED_MODULE_5__","__webpack_exports__","CompositeNode","renderComposite","initialState","getChildrenMapFromSchema","getValueMapFromValue","formatInput","getCompositeOutput","_a","childrenMap","ObjectDefault","properties","_blinkforms_core_compositeNodes__WEBPACK_IMPORTED_MODULE_1__","Form","client","_blinkforms_core_BlinkformsClient__WEBPACK_IMPORTED_MODULE_3__","configure","root","handleFormStateUpdate","handleFormContextUpdate","handleFormContextMapping","rootState","use","handlerProvider","registerHandlers","_renderers_defaultReactHandlerProvider__WEBPACK_IMPORTED_MODULE_4__","tree","formContext","validateOnChange","createTree","setTimeout","getTree","validateOnInit","componentDidMount","onSubmit","style","marginLeft","onClick","BlinkformsClient","stateTransformers","contextUpdateHandlers","contextTransformers","rootConfig","conf","handlers","newHandlers","_schemaParser__WEBPACK_IMPORTED_MODULE_1__","getHandlerForUI","ui","getHandlerForType","NUMBER","BOOLEAN","createNode","astNode","recTransformSchemaIntoTree","isNodeMetaOutputValue","data","recGetMetaOutputSourceNodeByPath","metaOutput","path","getMetaOutputSourceNodeByPath","objPath","match","matcher","exec","Array","from","x","transformOutputToRawData","isArray","item","debounce","func","wait","immediate","timeout","args","arguments","callNow","clearTimeout","apply","validateRoot","rootNode","ajv","ajv__WEBPACK_IMPORTED_MODULE_2___default","allErrors","ajvOptions","validateSchema","compile","errorsMap","WeakMap","customErrors","dataPath","err","has","set","transformSchemaIntoTree","_defaultParserConfig__WEBPACK_IMPORTED_MODULE_3__","uidGeneratorFactory","defaultParserConfig","InputWrapper","StringDefault","_utils_WithMargins__WEBPACK_IMPORTED_MODULE_5__","_utils_WithErrors__WEBPACK_IMPORTED_MODULE_4__","_utils_WithDescription__WEBPACK_IMPORTED_MODULE_3__","onChange","event","target","_blinkforms_core_simpleNodes__WEBPACK_IMPORTED_MODULE_6__","StringNotice","_blinkforms_core_simpleNodes__WEBPACK_IMPORTED_MODULE_2__","StringEnum","enumLabels","enumOpts","oLabel","oVal","lbSpec","find","opt","label","selectedValue","_utils_WithMargins__WEBPACK_IMPORTED_MODULE_4__","_utils_WithErrors__WEBPACK_IMPORTED_MODULE_3__","_utils_WithDescription__WEBPACK_IMPORTED_MODULE_2__","selected","_blinkforms_core_simpleNodes__WEBPACK_IMPORTED_MODULE_5__","ArrayDefault","items","results","removeItem","newItems","addNewItem","_blinkforms_core_schemaTypes__WEBPACK_IMPORTED_MODULE_5__","ArrayTuple","sort","_blinkforms_core_compositeNodes__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","module.exports = require(\"tslib\");","module.exports = require(\"react\");","module.exports = require(\"react-hot-loader\");","module.exports = require(\"styled-components\");","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as React from \"react\";\n\ntype ValueOf<T> = T[keyof T];\n\nexport enum NodeType {\n    STRING = \"string\",\n    NUMBER = \"number\",\n    BOOLEAN = \"boolean\",\n    OBJECT = \"object\",\n    ARRAY = \"array\",\n    ROOT = \"root\",\n}\n\nexport interface NodeTypeSchemas {\n    STRING: NodeStringSchema;\n    NUMBER: NodeNumberSchema;\n    BOOLEAN: NodeBooleanSchema;\n    OBJECT: NodeObjectSchema;\n    ARRAY: NodeArraySchema;\n    ROOT: any;\n}\n\nexport type NodeBaseSchema = {\n    title?: string;\n    description?: string;\n    ui?: string;\n    [key: string]: any;\n    formatOutput?: (output: any) => any;\n    formatInput?: (output: any) => any;\n};\n\nexport interface NodeProperties {\n    [key: string]: NodeSchema;\n}\n\nexport interface NodeObjectSchema extends NodeBaseSchema {\n    type: NodeType.OBJECT;\n    required?: Array<string>;\n    properties: NodeProperties;\n}\n\nexport interface NodeStringSchema extends NodeBaseSchema {\n    type: NodeType.STRING;\n}\n\nexport interface NodeNumberSchema extends NodeBaseSchema {\n    type: NodeType.NUMBER;\n}\n\nexport interface NodeBooleanSchema extends NodeBaseSchema {\n    type: NodeType.BOOLEAN;\n}\n\nexport interface NodeArraySchema extends NodeBaseSchema {\n    type: NodeType.ARRAY;\n    items: Array<NodeBaseSchema> | NodeBaseSchema;\n}\n\nexport type NodeSchema = ValueOf<NodeTypeSchemas>;\n\nexport type Schema = NodeObjectSchema;\n\nexport abstract class Node<\n  S, O, M extends NodeSchema,\n  CS = any, CO = any, CM extends NodeSchema = any,\n  PS = any, PO = any, PM extends NodeSchema = any\n> {\n    private uid: number;\n    private schemaNode: M;\n    private parentNode: Node<PS, PO, PM>;\n    private config: SchemaParserConfig;\n    private type: NodeType;\n    private resolver: SchemaTreeResolver;\n    private state: NodeState<S> = null;\n    private tag: string = null;\n    private children: Array<Node<CS, CO, CM>>;\n    private handler: NodeHandler<S, O, M, CS, CO, CM, PS, PO, PM>;\n\n    constructor(handler: NodeHandler<S, O, M, CS, CO, CM, PS, PO, PM>, type: NodeType, schemaNode: M, parentNode: Node<PS, PO, PM>, config: SchemaParserConfig, resolver: SchemaTreeResolver) {\n        this.schemaNode = schemaNode;\n        this.config = config;\n        this.resolver = resolver;\n        this.children = [];\n        this.type = type;\n        this.parentNode = parentNode;\n        this.uid = config.uidGenerator();\n    }\n\n    getHandler(): NodeHandler<S, O, M, CS, CO, CM, PS, PO, PM> {\n        return this.handler;\n    }\n\n    isOutputAvailable(): boolean {\n        return true;\n    }\n\n    validateCustom(): Array<NodeError> {\n        if (this.children.length === 0) {\n            return [];\n        } else {\n            let result = [];\n            this.children.forEach(child => {\n                result = result.concat(child.validateCustom());\n            });\n            return result;\n        }\n    }\n\n    getDebugRepresentation(): string {\n        let output = \"\";\n        const indent = 4;\n        const indentStr = \" \";\n\n        output += (this.type.toString());\n        if (this.tag) {\n            output += `[${this.tag}]`;\n        }\n        if (this.children.length > 0) {\n            output += \" {\\n\";\n            this.children.map(child => {\n                const childText = child.getDebugRepresentation();\n                output += \"  > \";\n                output += childText.split(\"\\n\").map((line, index) => {\n                    if (index === 0) {\n                        return line;\n                    }\n                    return indentStr.repeat(indent) + line;\n                }).join(\"\\n\");\n                output += \"\\n\";\n            });\n            output += \"}\";\n        }\n\n        return output;\n    }\n\n    getUID() {\n        return this.uid;\n    }\n\n    onResolveFinished() {\n        // No nothing\n    }\n\n    modifyContext(fn: (context: FormContext) => FormContext) {\n        this.config.rootModifyContext(fn, this);\n    }\n\n    setContext(context: FormContext) {\n        this.config.rootSetContext(context, this);\n    }\n\n    resolve() {\n        this.state = this.resolveInitialState() || null;\n        this.children = this.resolveChildren() || [];\n        this.onResolveFinished();\n    }\n\n    addChild(child: Node<CS, CO, CM>) {\n        this.children.push(child);\n    }\n\n    overrideChildren(children: Array<Node<CS, CO, CM>>) {\n        this.children = [ ...children ];\n    }\n\n    getChildren() {\n        return this.children;\n    }\n\n    resolveNode(node: any, parentNode: NodeAny, config: SchemaParserConfig): NodeAny {\n        return this.resolver(node, parentNode, config);\n    }\n\n    getConfig(): SchemaParserConfig {\n        return this.config;\n    }\n\n    getSchema(): M {\n        return this.schemaNode;\n    }\n\n    getState(): NodeState<S> {\n        return this.state;\n    }\n\n    getTag(): string {\n        return this.tag;\n    }\n\n    setTag(tag: string) {\n        this.tag = tag;\n    }\n\n    setParent(parentNode: Node<PS, PO, PM>) {\n        this.parentNode = parentNode;\n    }\n\n    abstract render(context: FormContext): React.ReactNode;\n\n    getRawOutput(options): NodeOutputValue<O> {\n        return null;\n    }\n\n    onChildStateChanged(state: NodeState<CS>, source: NodeAny, originalSource?: NodeAny) {\n        // Do nothing\n    }\n\n    setStateSilently(state: NodeState<S>, source?: NodeAny, originalSource?: NodeAny): void {\n        if (state) {\n            Object.assign(this.state, { ...this.state, ...state });\n        }\n    }\n\n    setState(state: NodeState<S>, source?: NodeAny, originalSource?: NodeAny): void {\n        this.setStateSilently(state, source, originalSource);\n        this.parentNode.onChildStateChanged(this.state, this, originalSource);\n    }\n\n    findChild(tag: string): Node<CS, CO, CM> {\n        return this.children.filter(child => child.tag === tag)[0];\n    }\n\n    resolveInitialState(): NodeState<S> {\n        return null;\n    }\n\n    resolveChildren(): Array<Node<CS, CO, CM>> {\n        return [];\n    }\n\n    getOutput(options): NodeMetaOutputValue<O> {\n        if ((!options || (options && options.enableFormat !== false)) && this.getSchema().formatOutput) {\n            return {\n                __data: this.getSchema().formatOutput(this.getRawOutput(options)),\n                __source: this,\n            };\n        }\n        return {\n            __data: this.getRawOutput(options),\n            __source: this,\n        };\n    }\n\n    setValue(value: NodeOutputValue<O>) {\n        // Do nothing\n    }\n}\n\nexport class RootNode extends Node<any, any, NodeSchema> {\n\n    private dataTransformer: (output: any) => any;\n    private validator: (root: RootNode) => any;\n\n    constructor(schemaNode: NodeSchema, config: SchemaParserConfig, resolve: SchemaTreeResolver, dataTransformer: (output: any) => any, validator: (root: RootNode) => any) {\n        super(null, NodeType.ROOT, schemaNode, null, config, resolve);\n        this.dataTransformer = dataTransformer;\n        this.validator = validator;\n    }\n\n    resolveInitialState() {\n        return {};\n    }\n\n    validate() {\n        this.validator(this);\n    }\n\n    getOutput(options) {\n        if (this.getChildren().length === 0) {\n            return {\n                __data: null,\n                __source: this,\n            };\n        } else if (this.getChildren().length === 1) {\n            return {\n                __data: this.getChildren()[0].getOutput(options),\n                __source: this,\n            };\n        } else {\n            return {\n                __data: this.getChildren().map(child => child.getOutput(options)),\n                __source: this,\n            };\n        }\n    }\n\n    getData(options?: any) {\n        return this.dataTransformer(this.getOutput(options));\n    }\n\n    render(context: FormContext) {\n        return this.getChildren().map(child => child.render(context));\n    }\n\n    getTag(): string {\n        return \"root\";\n    }\n\n    getJsonSchema(): NodeSchema {\n        const compatID = \"id-\" + (Math.random() * 1000000000);\n        const recParse = (node, removeLabels) => {\n            if (!node || typeof node !== \"object\") {\n                return;\n            } else if (!removeLabels && node._jsonSchemaCompat === compatID) {\n                return;\n            } else if (removeLabels && !node._jsonSchemaCompat) {\n                return;\n            }\n\n            if (!removeLabels) {\n                node._jsonSchemaCompat = compatID;\n            } else {\n                delete node._jsonSchemaCompat;\n            }\n\n            if (!removeLabels) {\n                if (node.nullable && node.type && typeof node.type !== \"object\") {\n                    node.type = [node.type, \"null\"];\n                }\n            }\n            Object.keys(node).forEach(key => {\n                if (key !== \"type\") {\n                    recParse(node[key], removeLabels);\n                }\n            });\n        };\n        const schema = this.getSchema();\n        recParse(schema, false);\n        recParse(schema, true);\n        return schema;\n    }\n\n    // FIXME: ROOT\n    onChildStateChanged(state: NodeState<any>, source: NodeAny, originalSource?: NodeAny) {\n        this.setState(state);\n    }\n\n    setState(state: NodeState<any>, source?: NodeAny, originalSource?: NodeAny): void {\n        this.setStateSilently(state, source, originalSource);\n        this.getConfig().rootSetState(this.getState(), this, originalSource);\n    }\n\n    setValue(value: NodeOutputValue<any>) {\n        this.getChildren().forEach(child => child.setValue(value));\n    }\n}\n\nexport type NodeHandler<\n  S, O, M extends NodeSchema,\n  CS = any, CO = any, CM extends NodeSchema = any,\n  PS = any, PO = any, PM extends NodeSchema = any\n> = {\n   new(handler: NodeHandler<S, O, M, CS, CO, CM, PS, PO, PM>, type: NodeType, schemaNode: M, parentNode: Node<PS, PO, PM>, config: SchemaParserConfig, resolver: SchemaTreeResolver): Node<S, O, M, CS, CO, CM, PS, PO, PM>;\n};\n\nexport interface SchemaNodeHandlersMappingForType<M extends NodeSchema> {\n    [key: string]: NodeHandler<any, any, M>;\n}\n\nexport type NodeTypeNames = keyof typeof NodeType;\n\nexport type SchemaNodeHandlersMapping = {\n    [key in NodeTypeNames]: SchemaNodeHandlersMappingForType<NodeTypeSchemas[key]>;\n};\n\nexport interface FormContext {\n    errors?: Array<NodeError>;\n    getErrorsForNode?: (node: NodeAny) => Array<NodeError>;\n}\n\nexport interface SchemaParserConfig {\n    handlers: SchemaNodeHandlersMapping;\n    rootState: NodeState<any>;\n    rootSetState: (state: NodeState<any>, root: RootNode, originalSource?: NodeAny) => void;\n    rootSetContext: (context: FormContext, source: NodeAny) => void;\n    rootModifyContext: (fn: (context: FormContext) => FormContext, source: NodeAny) => void;\n    uidGenerator: () => number;\n    uidGeneratorFactory: () => () => number;\n    ajvOptions?: any;\n}\n\nexport interface SchemaParserConfigOpt {\n    handlers?: SchemaNodeHandlersMapping;\n    rootState?: NodeState<any>;\n    rootSetState?: (state: NodeState<any>, root: NodeAny, originalSource?: NodeAny) => void;\n    rootSetContext?: (context: FormContext, source: NodeAny) => void;\n    rootModifyContext?: (fn: (context: FormContext) => FormContext, source: NodeAny) => void;\n    uidGenerator?: () => number;\n    uidGeneratorFactory?: () => () => number;\n    ajvOptions?: any;\n}\n\nexport type NodeState<S> = S;\n\nexport type NodeOutputValue<O> = O;\n\nexport type NodeMetaOutputValue<O> = {\n    __data: NodeOutputValue<O>;\n    __source: NodeAny;\n};\n\nexport type NodeAny = Node<any, any, any>;\n\nexport type SchemaTreeResolver<\n  M extends NodeSchema = any,\n  PS = any, PO = any, PM extends NodeSchema = any\n> = (node: M, parentNode: Node<PS, PO, PM>, config: SchemaParserConfig) => Node<any, any, M>;\n\nexport function isNodeErrorPure(error: NodeError): error is NodeErrorPure {\n    return (error as NodeErrorPure).source !== undefined;\n}\n\ninterface NodeErrorAjv {\n    keyword: string;\n    message?: string;\n    params: any;\n    schemaPath: string;\n    dataPath: string;\n}\n\ninterface NodeErrorPure {\n    message: string;\n    source: NodeAny;\n}\n\nexport type NodeError = NodeErrorAjv | NodeErrorPure;","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst TitleWrapper = styled.div`\n  font-family: ${(props) => props.theme.primaryFont};\n  font-size: 1.4vw;\n  display: inline-block;\n`;\n\nconst DescriptionWrapper = styled.div`\n  font-family: ${(props) => props.theme.primaryFont};\n  font-size: 1vw;\n`;\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  margin-left: 1vw;\n`;\n\nconst TextWrapperInlineLabel = styled.div`\n  display: inline-block;\n  float: left;\n  width: 25%;\n`;\n\nconst ContentWrapperInlineLabel = styled.div`\n  margin-left: 1vw;\n  display: inline-block;\n  width: 70%;\n`;\n\nconst TitleExtraWrapper = styled.div`\n  display: inline-block;\n  margin-right: 1vw;\n`;\n\nexport interface WithDescriptionProps {\n    parent: any;\n    titleExtra?: any;\n}\n\nexport enum LayoutMode {\n    NORMAL = \"normal\",\n    INLINE_LABEL = \"inlineLabel\",\n}\n\nexport default class WithDescription extends React.Component<WithDescriptionProps, undefined> {\n    render() {\n\n        const layout = this.props.parent.getSchema().layout || LayoutMode.NORMAL;\n\n        const titleExtraNode = (this.props.titleExtra) ? (\n            <TitleExtraWrapper>\n                {this.props.titleExtra}\n            </TitleExtraWrapper>\n        ) : (null);\n\n        switch (layout) {\n            case LayoutMode.NORMAL: {\n                return (\n                    <Wrapper>\n                        <TitleWrapper>\n                            {titleExtraNode}\n                            {this.props.parent.getSchema().title}\n                        </TitleWrapper>\n                        <DescriptionWrapper>\n                            {this.props.parent.getSchema().description}\n                        </DescriptionWrapper>\n                        <ContentWrapper>\n                            {this.props.children}\n                        </ContentWrapper>\n                    </Wrapper>\n                );\n            }\n            case LayoutMode.INLINE_LABEL: {\n                return (\n                    <Wrapper>\n                        <TextWrapperInlineLabel>\n                            <TitleWrapper>\n                                {titleExtraNode}\n                                {this.props.parent.getSchema().title}\n                            </TitleWrapper>\n                            <DescriptionWrapper>\n                                {this.props.parent.getSchema().description}\n                            </DescriptionWrapper>\n                        </TextWrapperInlineLabel>\n                        <ContentWrapperInlineLabel>\n                            {this.props.children}\n                        </ContentWrapperInlineLabel>\n                    </Wrapper>\n                );\n            }\n            default: {\n                return this.props.children;\n            }\n        }\n    }\n}","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    width: 100%;\n`;\n\nexport interface WithErrorsProps {\n    context: any;\n    parent: any;\n}\n\nconst ErrorIcon = styled.div`\n  display: inline-block;\n  height: 3vw;\n  margin-right: 1vw;\n  padding-right: 0.5vw;\n  padding-top: 0.7vw;\n  border-right: 0.15vw solid red;\n`;\n\nconst NoErrorIcon = styled.div`\n  display: inline-block;\n  height: 3vw;\n  margin-right: 1vw;\n  padding-right: 0.5vw;\n  padding-top: 0.7vw;\n  border-right: 0.15vw solid transparent;\n`;\n\ninterface IconWrapperProps {\n    theme: any;\n    isVisible: boolean;\n}\n\nconst IconWrapper = styled.div<IconWrapperProps>`\n  color: red;\n  opacity: ${(props) => ((props.isVisible) ? (1) : (0))};\n`;\n\nconst Content = styled.div`\n  display: inline-block;\n  width: 80%;\n`;\n\nconst ErrorPopoverLabel = styled.span`\n    margin-left: 0.3vw;\n    font-weight: bold;\n`;\n\nconst ErrorContainer = styled.div`\n    max-width: 10vw;\n`;\n\nexport default class WithErrors extends React.Component<WithErrorsProps, undefined> {\n    render() {\n        const errors = this.props.context.getErrorsForNode(this.props.parent) || [];\n        let iconNode = null;\n        \n        if (errors.length > 0) {\n            iconNode = (\n                <div>\n                    <ErrorContainer>\n                        <div>\n                            <ErrorPopoverLabel>\n                                Error!\n                            </ErrorPopoverLabel>\n                        </div>\n                        {errors[0].message}\n                    </ErrorContainer>\n                </div>\n            );\n        }\n\n        return (\n            <Wrapper>\n                {\n                    (errors.length === 0) ? (\n                        <NoErrorIcon>\n                            {iconNode}\n                        </NoErrorIcon>\n                    ) : (\n                        <ErrorIcon>\n                            {iconNode}\n                        </ErrorIcon>\n                    )\n                }\n                <Content>\n                    {this.props.children}\n                </Content>\n            </Wrapper>\n        );\n    }\n}","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    margin-top: 1vw;\n    width: 100%;\n`;\n\nexport interface WithMarginsProps {\n    parent: any;\n}\n\nexport default class WithMargins extends React.Component<WithMarginsProps, undefined> {\n    render() {\n        return (\n            <Wrapper>\n                {this.props.children}\n            </Wrapper>\n        );\n    }\n}","import * as React from \"react\";\n\nimport {\n    FormContext,\n    Node,\n    NodeSchema,\n} from \"./schemaTypes\";\n\nexport abstract class SimpleNode<V, M extends NodeSchema> extends Node<{ value: V }, V, M> {\n\n    abstract getInitialValue(): V;\n    abstract renderSimple(value: V, context: FormContext): React.ReactNode;\n\n    resolveInitialState() {\n        return {\n            value: this.getInitialValue(),\n        };\n    }\n\n    getRawOutput() {\n        return this.getState().value;\n    }\n\n    render(context: FormContext) {\n        return this.renderSimple(this.getState().value, context);\n    }\n}","import ObjectDefault from \"./ObjectDefault\";\n\nimport StringDefault from \"./StringDefault\";\nimport StringNotice from \"./StringNotice\";\nimport StringEnum from \"./StringEnum\";\n\nimport ArrayDefault from \"./ArrayDefault\";\nimport ArrayTuple from \"./ArrayTuple\";\n\nexport default {\n    ROOT: {\n        default: ObjectDefault,\n    },\n    STRING: {\n        default: StringDefault,\n        notice: StringNotice,\n        enum: StringEnum,\n    },\n    OBJECT: {\n        default: ObjectDefault,\n    },\n    ARRAY: {\n        default: ArrayDefault,\n        tuple: ArrayTuple,\n    },\n};","import * as React from \"react\";\n\nimport {\n    FormContext,\n    Node,\n    NodeAny,\n    NodeOutputValue,\n    NodeSchema,\n    NodeState,\n} from \"./schemaTypes\";\n\nexport type NodeS = {\n    [key: string]: NodeState<any>;\n};\n\nexport type NodeO = {\n    [key: string]: NodeOutputValue<any>;\n};\n\nexport type ChildrenMap<T> = {\n    [key: string]: T;\n};\n\nexport abstract class CompositeNode<O, M extends NodeSchema> extends Node<NodeS, O, M> {\n\n    abstract getChildrenMapFromSchema(): ChildrenMap<NodeSchema>;\n\n    abstract getCompositeOutput(output: NodeO): NodeOutputValue<O>;\n\n    renderComposite(context: FormContext, children: ChildrenMap<React.ReactNode>): React.ReactNode {\n        return Object.keys(children).map(key => children[key]);\n    }\n\n    resolveInitialState() {\n        const initialState = {};\n        Object.keys(this.getChildrenMapFromSchema()).forEach(key => {\n            initialState[key] = null;\n        });\n        return initialState;\n    }\n\n    getValueMapFromValue(value: NodeOutputValue<O>): NodeOutputValue<O> {\n        return { ...value };\n    }\n\n    setValue(value: NodeOutputValue<O>) {\n        if (this.getSchema().formatInput) {\n            value = this.getSchema().formatInput(value);\n        }\n        value = this.getValueMapFromValue(value);\n\n        Object.keys(this.getChildrenMapFromSchema()).forEach(key => {\n            if (this.findChild(key)) {\n                this.findChild(key).setValue(value[key]);\n            }\n        });\n    }\n\n    getRawOutput(options) {\n        const output = {};\n        Object.keys(this.getChildrenMapFromSchema()).forEach(key => {\n            if (this.findChild(key) && this.findChild(key).isOutputAvailable()) {\n                output[key] = this.findChild(key).getOutput(options);\n            }\n        });\n        return this.getCompositeOutput(output);\n    }\n\n    onChildStateChanged(state: NodeState<any>, source: NodeAny, originalSource?: NodeAny) {\n        this.setState({\n            [source.getTag()]: state,\n        });\n    }\n\n    resolveChildren() {\n        const childrenMap: ChildrenMap<NodeSchema> = this.getChildrenMapFromSchema();\n\n        return Object.keys(childrenMap).map(key => {\n            const child = this.resolveNode(childrenMap[key], this, this.getConfig());\n            child.setTag(key);\n            return child;\n        });\n    }\n\n    render(context: FormContext): React.ReactNode {\n        const childrenMap: ChildrenMap<React.ReactNode> = {};\n\n        Object.keys(this.getChildrenMapFromSchema()).forEach((key: string, index: number) => {\n            if (this.findChild(key)) {\n                childrenMap[key] = this.findChild(key).render(context);\n            }\n        });\n\n        return this.renderComposite(context, childrenMap);\n    }\n}","import { CompositeNode, NodeO } from \"@blinkforms/core/compositeNodes\";\n\nimport {\n    NodeObjectSchema,\n} from \"@blinkforms/core/schemaTypes\";\n\nexport default class ObjectDefault extends CompositeNode<NodeO, NodeObjectSchema> {\n\n    getChildrenMapFromSchema() {\n        return this.getSchema().properties;\n    }\n\n    getCompositeOutput(output: NodeO) {\n        return output;\n    }\n\n}","import * as React from \"react\";\nimport styled  from \"styled-components\";\n\nimport BlinkformsClient from \"@blinkforms/core/BlinkformsClient\";\nimport { transformSchemaIntoTree } from \"@blinkforms/core/schemaParser\";\nimport { FormContext, NodeAny, NodeState, NodeType, RootNode, Schema } from \"@blinkforms/core/schemaTypes\";\n\nimport defaultReactHandlerProvider from \"./renderers/defaultReactHandlerProvider\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport interface FormProps {\n    fontSize?: string;\n    theme?: any;\n    validateOnChange?: boolean;\n    validateOnInit?: boolean;\n    children: Schema;\n    onSubmit: (data: any) => void;\n    use?: Array<any>;\n}\n\ninterface FormState {\n    tree: RootNode;\n    formContext: FormContext;\n}\n\nexport class Form extends React.Component<FormProps, FormState> {\n\n    state: FormState;\n    client: BlinkformsClient;\n\n    constructor(props) {\n        super(props);\n\n        this.client = new BlinkformsClient();\n        this.client.configure({\n            rootSetState:       (state: NodeState<any>, root: RootNode) => this.handleFormStateUpdate(state, root),\n            rootSetContext:     (context: FormContext, source: NodeAny) => this.handleFormContextUpdate(context, source),\n            rootModifyContext:  (fn: (context: FormContext) => FormContext, source: NodeAny) => this.handleFormContextMapping(fn, source),\n            rootState:          {},\n        });\n        \n        if (this.props.use) {\n            this.props.use.forEach((handlerProvider) => {\n                this.client.registerHandlers(handlerProvider);\n            });\n        }\n        this.client.registerHandlers(defaultReactHandlerProvider);\n        \n        this.state = {\n            tree: null,\n            formContext: {\n                errors: [],\n                getErrorsForNode: () => [],\n            },\n        };\n    }\n\n    handleFormStateUpdate(state: NodeState<any>, root: RootNode) {\n        this.setState({\n            tree: root,\n        }, () => {\n            if (this.props.validateOnChange !== false) {\n                this.state.tree.validate();\n            }\n        });\n    }\n\n    handleFormContextUpdate(context: FormContext, source: NodeAny) {\n        this.setState({\n            formContext: {\n                ...this.state.formContext,\n                ...context,\n            },\n        });\n    }\n\n    handleFormContextMapping(fn: (context: FormContext) => FormContext, source: NodeAny) {\n        this.handleFormContextUpdate(fn(this.state.formContext), source);\n    }\n\n    createTree() {\n        const schema = this.props.children;\n\n        if (!this.state.tree) {\n            setTimeout(() => {\n                this.client.render(schema);\n                const tree = this.client.getTree();\n                this.setState({\n                    tree,\n                }, () => {\n                    if (this.props.validateOnInit !== false) {\n                        this.state.tree.validate();\n                    }\n                });\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.createTree();\n    }\n\n    render() {\n        this.createTree();\n\n        return (\n            <Wrapper>\n                {(this.state.tree) ? (this.state.tree.render(this.state.formContext)) : (null)}\n                {\n                    (this.state.tree && this.props.onSubmit)?(\n                        <div\n                            style={{\n                                marginLeft: '-2vw',\n                            }}\n                        >\n                            <button\n                                onClick={() => {\n                                    if (this.state.tree && this.props.onSubmit) {\n                                        this.props.onSubmit(this.state.tree.getData());\n                                    }\n                                }}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    ):(null)\n                }\n            </Wrapper>\n        );\n    }\n}\n\n\n/*export default class Form extends React.Component<FormProps, FormState> {\n\n    state: FormState;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tree: null,\n            formContext: {\n                errors: [],\n                getErrorsForNode: () => [],\n            },\n        };\n    }\n\n    handleFormStateUpdate(state: NodeState<any>, root: RootNode) {\n        this.setState({\n            tree: root,\n        }, () => {\n            if (this.props.validateOnChange !== false) {\n                this.state.tree.validate();\n            }\n        });\n    }\n\n    handleFormContextUpdate(context: FormContext, source: NodeAny) {\n        this.setState({\n            formContext: {\n                ...this.state.formContext,\n                ...context,\n            },\n        });\n    }\n\n    handleFormContextMapping(fn: (context: FormContext) => FormContext, source: NodeAny) {\n        this.handleFormContextUpdate(fn(this.state.formContext), source);\n    }\n\n    createTree() {\n        const schema = this.props.children;\n\n        if (!this.state.tree) {\n            setTimeout(() => {\n                const tree = transformSchemaIntoTree(schema, null, {\n                    rootSetState: (state: NodeState<any>, root: RootNode) => this.handleFormStateUpdate(state, root),\n                    rootSetContext: (context: FormContext, source: NodeAny) => this.handleFormContextUpdate(context, source),\n                    rootModifyContext: (fn: (context: FormContext) => FormContext, source: NodeAny) => this.handleFormContextMapping(fn, source),\n                    rootState: {},\n                });\n\n                this.setState({\n                    tree,\n                }, () => {\n                    if (this.props.validateOnInit !== false) {\n                        this.state.tree.validate();\n                    }\n                });\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.createTree();\n    }\n\n    render() {\n        this.createTree();\n\n        return (\n            <Wrapper>\n                {(this.state.tree) ? (this.state.tree.render(this.state.formContext)) : (null)}\n                {\n                    (this.state.tree && this.props.onSubmit)?(\n                        <div\n                            style={{\n                                marginLeft: '-2vw',\n                            }}\n                        >\n                            <button\n                                onClick={() => {\n                                    if (this.state.tree && this.props.onSubmit) {\n                                        this.props.onSubmit(this.state.tree.getData());\n                                    }\n                                }}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    ):(null)\n                }\n            </Wrapper>\n        );\n    }\n}*/\n","import {\n    NodeSchema,\n    SchemaParserConfigOpt,\n    RootNode,\n} from \"./schemaTypes\";\n\nimport { transformSchemaIntoTree } from \"./schemaParser\";\n\nexport type BlinkformsStateTransformer = (state: NodeState<any>, root: RootNode) => NodeState<any>;\nexport type BlinkformsContextUpdateHandler = (context: FormContext, source: NodeAny) => void;\nexport type BlinkformsContextTransformer = (fn: (context: FormContext) => FormContext, source: NodeAny) => void;\n\nexport default class BlinkformsClient {\n    \n    tree:   RootNode;\n    state:  NodeState<any>;\n    \n    stateTransformers:       Array<BlinkformsSetStateHandler>;\n    contextUpdateHandlers:   Array<BlinkformsContextUpdateHandler>;\n    contextTransformers:     Array<BlinkformsContextTransformer>;\n    rootConfig:              SchemaParserConfigOpt;\n    \n    constructor() {\n        this.tree = null;\n        this.state = null;\n        \n        this.stateTransformers = [];\n        this.contextUpdateHandlers = [];\n        this.contextTransformers = [];\n        this.rootConfig = {};\n    }\n    \n    configure(conf: SchemaParserConfigOpt) {\n        this.rootConfig = ({ ...this.rootConfig, ...conf });\n    }\n    \n    registerHandlers(handlers) {\n        const newHandlers = { ...this.rootConfig.handlers };\n        Object.keys(handlers).forEach((key) => {\n            newHandlers[key] = { ...newHandlers[key], ...handlers[key] };\n        });\n        \n        this.rootConfig = ({\n            ...this.rootConfig,\n            handlers: {\n                ...this.rootConfig.handlers,\n                ...newHandlers,\n            },\n        })\n    }\n    \n    handleFormStateUpdate(state: NodeState<any>, root: RootNode) {\n        this.state = state;\n        this.stateTransformers.forEach(t => {\n            this.state = t(this.state, root);\n        });\n    }\n    \n    handleFormContextUpdate(context: FormContext, source: NodeAny) {\n        this.contextUpdateHandlers.forEach(t => {\n            t(context, source);\n        });\n    }\n    \n    handleFormContextMapping(fn: (context: FormContext) => FormContext, source: NodeAny) {\n        this.contextTransformers.forEach(t => {\n            t(context, source);\n        });\n    }\n    \n    render<S extends NodeSchema>(schema: S, options: SchemaParserConfigOpt = null): BlinkformsClient {\n        this.tree = transformSchemaIntoTree(schema, null, {\n            rootSetState:       (state, root) => this.handleFormStateUpdate(state, root),\n            rootSetContext:     (context, source) => this.handleFormContextUpdate(context, source),\n            rootModifyContext:  (fn, source) => this.handleFormContextMapping(fn, source),\n            rootState:          {},\n            ...this.rootConfig,\n            ...options,\n        });\n        \n        return this;\n    }\n    \n    getTree(): RootNode {\n        return this.tree;\n    }\n    \n    getState(): NodeState<any> {\n        return this.state;\n    }\n    \n};","import {\n    isNodeErrorPure,\n    Node,\n    NodeAny,\n    NodeError,\n    NodeHandler,\n    NodeMetaOutputValue,\n    NodeSchema,\n    NodeType,\n    NodeTypeSchemas,\n    RootNode,\n    SchemaNodeHandlersMappingForType,\n    SchemaParserConfig,\n    SchemaParserConfigOpt,\n} from \"./schemaTypes\";\n\nimport Ajv from \"ajv\";\nimport { defaultParserConfig } from \"./defaultParserConfig\";\n\nexport interface AjvError {\n    dataPath: string;\n    keyword: string;\n    message?: string;\n    params: any;\n    schemaPath: string;\n    node?: NodeAny;\n}\n\nfunction getHandlerForUI<M extends NodeSchema>(node: M, handlers: SchemaNodeHandlersMappingForType<M>): NodeHandler<any, any, M> {\n    return node.ui ? handlers[node.ui] : handlers.default;\n}\n\nfunction getHandlerForType<M extends NodeSchema>(node: M, config: SchemaParserConfig): SchemaNodeHandlersMappingForType<NodeTypeSchemas[M[\"type\"]]> {\n    const t: NodeType = node.type;\n    switch (t) {\n        case NodeType.OBJECT:\n            return config.handlers.OBJECT;\n        case NodeType.STRING:\n            return config.handlers.STRING;\n        case NodeType.NUMBER:\n            return config.handlers.NUMBER;\n        case NodeType.BOOLEAN:\n            return config.handlers.BOOLEAN;\n        case NodeType.ARRAY:\n            return config.handlers.ARRAY;\n        case NodeType.ROOT:\n            return null;\n        default:\n            throw `Unknown node type ${node.type}`;\n            return null;\n    }\n}\n\nfunction createNode<M extends NodeSchema>(node: M, parentNode: NodeAny, config: SchemaParserConfig, handler: NodeHandler<any, any, M>): Node<any, any, M> {\n    const astNode: Node<any, any, M> = new handler(\n        handler, node.type, node, parentNode, config, recTransformSchemaIntoTree,\n    );\n    astNode.resolve();\n\n    parentNode.addChild(astNode);\n    return astNode;\n}\n\nexport function recTransformSchemaIntoTree<M extends NodeSchema>(node: M, parentNode: NodeAny, config: SchemaParserConfig): Node<any, any, M> {\n    return createNode(\n        node, parentNode, config,\n        getHandlerForUI(node, getHandlerForType(node, config)),\n    );\n}\n\nexport function isNodeMetaOutputValue(data: any): data is NodeMetaOutputValue<any> {\n    return (data && (typeof data.__data) !== \"undefined\" && data.__source);\n}\n\nfunction recGetMetaOutputSourceNodeByPath(metaOutput: any, path: Array<string> | string): any {\n    if (isNodeMetaOutputValue(metaOutput)) {\n        if (path !== null && path.length === 0) {\n            return metaOutput.__source;\n        } else {\n            return recGetMetaOutputSourceNodeByPath(metaOutput.__data, path);\n        }\n    } else if (path === null) {\n        return metaOutput;\n    } else if (typeof path === \"string\") {\n        return recGetMetaOutputSourceNodeByPath(metaOutput, path.split(\".\"));\n    } else if (path.length === 0) {\n        return recGetMetaOutputSourceNodeByPath(metaOutput, null);\n    } else {\n        return recGetMetaOutputSourceNodeByPath(metaOutput[path[0]], path.slice(1));\n    }\n}\n\nexport function getMetaOutputSourceNodeByPath(metaOutput: any, path: string): any {\n    const objPath = [];\n    for (let match,matcher=/^([^\\.\\[]+)|\\.([^\\.\\[]+)|\\[\"([^\"]+)\"\\]|\\[(\\d+)\\]/g; match = matcher.exec(path);) {\n      objPath.push(Array.from(match).slice(1).filter(x => x !== undefined)[0]);\n    }\n    return recGetMetaOutputSourceNodeByPath(metaOutput, objPath);\n}\n\nexport function transformOutputToRawData(metaOutput: any): any {\n    if (isNodeMetaOutputValue(metaOutput)) {\n        return transformOutputToRawData(metaOutput.__data);\n    } else if (Array.isArray(metaOutput)) {\n        return metaOutput.map(item => transformOutputToRawData(item));\n    } else if (metaOutput instanceof Object) {\n        const result = {};\n        Object.keys(metaOutput).forEach(key => {\n            result[key] = transformOutputToRawData(metaOutput[key]);\n        });\n        return result;\n    } else {\n        return metaOutput;\n    }\n}\n\nfunction debounce(func: any, wait: number, immediate?: boolean) {\n    let timeout;\n    return function() {\n        const context = this, args = arguments;\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n\nexport async function validateRoot(rootNode: RootNode) {\n\n    const ajv = new Ajv({\n        allErrors: true,\n        ...rootNode.getConfig().ajvOptions,\n    });\n\n    const validateSchema = ajv.compile(rootNode.getJsonSchema() as unknown as object);\n    const output = rootNode.getOutput({ enableFormat: false });\n\n    const data = transformOutputToRawData(output);\n\n    validateSchema(data);\n\n    let errors: Array<NodeError> = validateSchema.errors || [];\n    const errorsMap: WeakMap<NodeAny, Array<NodeError>> = new WeakMap();\n\n    const customErrors: Array<NodeError> = rootNode.validateCustom();\n    errors = errors.concat(customErrors);\n\n    errors.forEach(error => {\n        let source: NodeAny = null;\n        if (isNodeErrorPure(error)) {\n            source = error.source;\n        } else {\n            source = getMetaOutputSourceNodeByPath(output, error.dataPath);\n        }\n\n        if (source !== null) {\n            const err: NodeError = error;\n\n            if (errorsMap.has(source)) {\n                errorsMap.get(source).push(err);\n            } else {\n                errorsMap.set(source, [ err ]);\n            }\n        }\n    });\n\n    rootNode.setContext({\n        errors: errors || [],\n        getErrorsForNode: (node: NodeAny) => {\n            return errorsMap.get(node) || [];\n        },\n    });\n}\n\nexport function transformSchemaIntoTree<M extends NodeSchema>(node: M, rootNode: RootNode = null, config: SchemaParserConfigOpt = null): RootNode {\n    const conf = {...defaultParserConfig, ...config};\n    if (!conf.uidGenerator) {\n        conf.uidGenerator = conf.uidGeneratorFactory();\n    }\n\n    if (!rootNode) {\n        rootNode = new RootNode(\n            node, conf, recTransformSchemaIntoTree, transformOutputToRawData, debounce(validateRoot, 750),\n        );\n        rootNode.resolve();\n    }\n\n    recTransformSchemaIntoTree(node, rootNode, conf);\n    return rootNode;\n}","module.exports = require(\"ajv\");","import { SchemaParserConfig } from \"./schemaTypes\";\n\nexport const defaultParserConfig: SchemaParserConfig = {\n    handlers: {\n        ROOT: {\n            default: null,\n        },\n        STRING: {\n            default: null,\n        },\n        OBJECT: {\n            default: null,\n        },\n        NUMBER: {\n            default: null,\n        },\n        BOOLEAN: {\n            default: null,\n        },\n        ARRAY: {\n            default: null,\n        },\n    },\n    rootState: null,\n    rootSetState: () => {},\n    rootSetContext: () => {},\n    rootModifyContext: () => {},\n    uidGenerator: null,\n    uidGeneratorFactory: () => {\n        let uid = 0;\n        return () => {\n            ++uid;\n            return uid;\n        };\n    },\n};","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport WithDescription from \"./utils/WithDescription\";\nimport WithErrors from \"./utils/WithErrors\";\nimport WithMargins from \"./utils/WithMargins\";\n\nimport { SimpleNode } from \"@blinkforms/core/simpleNodes\";\n\nimport {\n    FormContext,\n    NodeStringSchema,\n} from \"@blinkforms/core/schemaTypes\";\n\nconst InputWrapper = styled.div`\n  width: 10vw;\n  margin-right: 3vw;\n`;\n\nexport default class StringDefault extends SimpleNode<string, NodeStringSchema> {\n    getInitialValue() {\n        return \"\";\n    }\n\n    renderSimple(value: string, context: FormContext) {\n        return (\n            <WithMargins parent={this}>\n                <WithErrors parent={this} context={context}>\n                        <WithDescription parent={this}>\n                            <InputWrapper>\n                                <input\n                                    value={value}\n                                    onChange={(event) => {\n                                        this.setState({ value: event.target.value })\n                                    }}\n                                />\n                            </InputWrapper>\n                        </WithDescription>\n                </WithErrors>\n            </WithMargins>\n        );\n    }\n}","import * as React from \"react\";\n\nimport { SimpleNode } from \"@blinkforms/core/simpleNodes\";\n\nimport {\n    FormContext,\n    NodeError,\n    NodeStringSchema,\n} from \"@blinkforms/core/schemaTypes\";\n\nexport default class StringNotice extends SimpleNode<string, NodeStringSchema> {\n    getInitialValue() {\n        return \"null\";\n    }\n\n    isOutputAvailable(): boolean {\n        return false;\n    }\n\n    validateCustom(): Array<NodeError> {\n        return [];\n    }\n\n    renderSimple(value: string, context: FormContext) {\n        return (\n            <div>\n                {this.getSchema().value}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\n\nimport WithDescription from \"./utils/WithDescription\";\nimport WithErrors from \"./utils/WithErrors\";\nimport WithMargins from \"./utils/WithMargins\";\n\nimport { SimpleNode } from \"@blinkforms/core/simpleNodes\";\n\nimport {\n    FormContext,\n    NodeStringSchema,\n} from \"@blinkforms/core/schemaTypes\";\n\nexport default class StringEnum extends SimpleNode<string, NodeStringSchema> {\n    getInitialValue() {\n        return \"\";\n    }\n\n    renderSimple(value: string, context: FormContext) {\n        const enumLabels = this.getSchema().enumLabels || null;\n        const enumOpts = (this.getSchema().enum || []).map(value => {\n            let oLabel = value;\n            let oVal = value;\n\n            if (enumLabels) {\n                const lbSpec = enumLabels.find(opt => opt.name === value);\n                if (lbSpec) {\n                    oLabel = lbSpec.label;\n                    oVal = lbSpec.name || value;\n                }\n            }\n\n            return ({\n                name: oVal,\n                label: oLabel,\n            });\n        });\n\n        const selectedValue = enumOpts.find(opt => opt.name === value) || null;\n        return (\n            <WithMargins parent={this}>\n                <WithErrors parent={this} context={context}>\n                    <WithDescription parent={this}>\n                        <select\n                            onChange={(event) => this.setState({ value: event.target.value })}\n                        >\n                            {enumOpts.map((item, index) => {\n                                return (\n                                    <option\n                                        key={`opt-${item.name+''}-${index}`}\n                                        value={item.name}\n                                        selected={selectedValue === item.name && item.name !== null && typeof item.name !== 'undefined'}\n                                    >\n                                        {item.label}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                    </WithDescription>\n                </WithErrors>\n            </WithMargins>\n        );\n    }\n}","import * as React from \"react\";\n\nimport WithDescription from \"./utils/WithDescription\";\nimport WithErrors from \"./utils/WithErrors\";\nimport WithMargins from \"./utils/WithMargins\";\n\nimport {\n    FormContext,\n    Node,\n    NodeAny,\n    NodeArraySchema,\n    NodeOutputValue,\n    NodeState,\n} from \"@blinkforms/core/schemaTypes\";\n\nexport type NodeSMapping = {\n    [key: string]: NodeState<any>;\n};\n\nexport type NodeO = NodeOutputValue<Array<NodeOutputValue<any>>>;\n\nexport type NodeS = {\n    items: NodeSMapping;\n};\n\nexport default class ArrayDefault extends Node<NodeS, NodeO, NodeArraySchema> {\n\n    resolveInitialState() {\n        return {\n            items: {},\n        };\n    }\n\n    setValue(value: NodeO) {\n        if (this.getSchema().formatInput) {\n            value = this.getSchema().formatInput(value);\n        }\n        value = { ...value };\n\n        if (Object.keys(value).length !== this.getChildren().length) {\n            this.overrideChildren(Object.keys(value).map(key => {\n                const child = this.resolveNode(this.getSchema().items, this, this.getConfig());\n                child.setTag(key);\n                return child;\n            }));\n        }\n\n        this.getChildren().forEach((child, index) => {\n            child.setValue(value[index]);\n        });\n    }\n\n    getRawOutput(options) {\n        const results = [];\n        this.getChildren().forEach(child => {\n            if (child.isOutputAvailable()) {\n                results.push(child.getOutput(options));\n            }\n        });\n        return results;\n    }\n\n    onChildStateChanged(state: NodeState<any>, source: NodeAny, originalSource?: NodeAny) {\n        this.setState({\n            items: {\n                ...this.getState().items,\n                [source.getTag()]: state,\n            },\n        });\n    }\n\n    removeItem(index: number) {\n        const newItems = { ...this.getState().items };\n        delete newItems[index];\n\n        this.overrideChildren(this.getChildren().filter((child, i) => index !== i).map((child, i) => {\n            child.setTag(i.toString());\n            return child;\n        }));\n\n        this.setState({\n            items: newItems,\n        });\n    }\n\n    addNewItem() {\n        const key = this.getChildren().length;\n\n        const child = this.resolveNode(this.getSchema().items, this, this.getConfig());\n        this.setState({\n            items: {\n                ...this.getState().items,\n                [key]: child.resolveInitialState(),\n            },\n        });\n    }\n\n    resolveChildren() {\n        return [];\n    }\n\n    render(context: FormContext): React.ReactNode {\n        return (\n            <WithMargins parent={this}>\n                <WithErrors parent={this} context={context}>\n                    <WithDescription\n                        parent={this}\n                        titleExtra={\n                            <div>\n                                <button onClick={() => this.addNewItem()}>Add item</button>\n                            </div>\n                        }\n                    >\n                        {\n                            this.getChildren().map((child, index) => {\n                                return (\n                                    <div>\n                                        <div>\n                                            <button onClick={() => this.removeItem(index)}>X</button>\n                                        </div>\n                                        {child.render(context)}\n                                    </div>\n                                );\n                            })\n                        }\n                    </WithDescription>\n                </WithErrors>\n            </WithMargins>\n        );\n    }\n\n}","import * as React from \"react\";\n\nimport { ChildrenMap, CompositeNode, NodeO } from \"@blinkforms/core/compositeNodes\";\n\nimport WithDescription from \"./utils/WithDescription\";\nimport WithErrors from \"./utils/WithErrors\";\nimport WithMargins from \"./utils/WithMargins\";\n\nimport {\n    FormContext,\n    NodeOutputValue,\n    NodeSchema,\n} from \"@blinkforms/core/schemaTypes\";\n\nexport default class ArrayTuple<O, M extends NodeSchema> extends CompositeNode<Array<O>, M> {\n\n    getChildrenMapFromSchema() {\n        return { ...this.getSchema().items };\n    }\n\n    setValue(value: NodeOutputValue<Array<O>>) {\n        if (this.getSchema().formatInput) {\n            value = this.getSchema().formatInput(value);\n        }\n        value = this.getValueMapFromValue(value);\n\n        Object.keys(this.getChildrenMapFromSchema()).forEach(key => {\n            if (this.findChild(key)) {\n                this.findChild(key).setValue(value[key]);\n            }\n        });\n    }\n\n    getCompositeOutput(output: NodeO) {\n        const items = [];\n        Object.keys(output).sort().forEach(key => items.push(output[key]));\n\n        return items;\n    }\n\n    renderComposite(context: FormContext, children: ChildrenMap<React.ReactNode>): React.ReactNode {\n        return (\n            <WithMargins parent={this}>\n                <WithErrors parent={this} context={context}>\n                    <WithDescription parent={this}>\n                        {Object.keys(children).map(key => children[key])}\n                    </WithDescription>\n                </WithErrors>\n            </WithMargins>\n        );\n    }\n\n}"],"sourceRoot":""}